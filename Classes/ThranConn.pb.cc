// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ThranConn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_ThranConn_2eproto() {
  delete REQThranReg::default_instance_;
  delete ACKThranReg::default_instance_;
  delete REQThranConn::default_instance_;
  delete ACKThranConn::default_instance_;
  delete REQThranShortCert::default_instance_;
  delete ACKThranShortCert::default_instance_;
  delete REQThranOpenId::default_instance_;
  delete ACKThranOpenId::default_instance_;
  delete REQSinaGame::default_instance_;
  delete ACKSinaGame::default_instance_;
  delete REQWeiBo::default_instance_;
  delete ACKWeiBo::default_instance_;
  delete REQThranExit::default_instance_;
  delete REQThranGameVersion::default_instance_;
  delete ACKThranGameVersion::default_instance_;
  delete REQThranNewVerify::default_instance_;
  delete ACKThranNewVerify::default_instance_;
  delete REQThranFindPwd::default_instance_;
  delete ACKThranFindPwd::default_instance_;
  delete ACKThranHeart::default_instance_;
  delete SinaApiInfo::default_instance_;
  delete SinaApiRet::default_instance_;
  delete OGRoomInfo::default_instance_;
  delete OGThranMatchInfo::default_instance_;
  delete ThranRoomInfo::default_instance_;
  delete ThranJSSInfo::default_instance_;
  delete OGBulletinInfo::default_instance_;
  delete REQQuickConn::default_instance_;
  delete ACKQuickConn::default_instance_;
}

void protobuf_AddDesc_ThranConn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  REQThranReg::default_instance_ = new REQThranReg();
  ACKThranReg::default_instance_ = new ACKThranReg();
  REQThranConn::default_instance_ = new REQThranConn();
  ACKThranConn::default_instance_ = new ACKThranConn();
  REQThranShortCert::default_instance_ = new REQThranShortCert();
  ACKThranShortCert::default_instance_ = new ACKThranShortCert();
  REQThranOpenId::default_instance_ = new REQThranOpenId();
  ACKThranOpenId::default_instance_ = new ACKThranOpenId();
  REQSinaGame::default_instance_ = new REQSinaGame();
  ACKSinaGame::default_instance_ = new ACKSinaGame();
  REQWeiBo::default_instance_ = new REQWeiBo();
  ACKWeiBo::default_instance_ = new ACKWeiBo();
  REQThranExit::default_instance_ = new REQThranExit();
  REQThranGameVersion::default_instance_ = new REQThranGameVersion();
  ACKThranGameVersion::default_instance_ = new ACKThranGameVersion();
  REQThranNewVerify::default_instance_ = new REQThranNewVerify();
  ACKThranNewVerify::default_instance_ = new ACKThranNewVerify();
  REQThranFindPwd::default_instance_ = new REQThranFindPwd();
  ACKThranFindPwd::default_instance_ = new ACKThranFindPwd();
  ACKThranHeart::default_instance_ = new ACKThranHeart();
  SinaApiInfo::default_instance_ = new SinaApiInfo();
  SinaApiRet::default_instance_ = new SinaApiRet();
  OGRoomInfo::default_instance_ = new OGRoomInfo();
  OGThranMatchInfo::default_instance_ = new OGThranMatchInfo();
  ThranRoomInfo::default_instance_ = new ThranRoomInfo();
  ThranJSSInfo::default_instance_ = new ThranJSSInfo();
  OGBulletinInfo::default_instance_ = new OGBulletinInfo();
  REQQuickConn::default_instance_ = new REQQuickConn();
  ACKQuickConn::default_instance_ = new ACKQuickConn();
  REQThranReg::default_instance_->InitAsDefaultInstance();
  ACKThranReg::default_instance_->InitAsDefaultInstance();
  REQThranConn::default_instance_->InitAsDefaultInstance();
  ACKThranConn::default_instance_->InitAsDefaultInstance();
  REQThranShortCert::default_instance_->InitAsDefaultInstance();
  ACKThranShortCert::default_instance_->InitAsDefaultInstance();
  REQThranOpenId::default_instance_->InitAsDefaultInstance();
  ACKThranOpenId::default_instance_->InitAsDefaultInstance();
  REQSinaGame::default_instance_->InitAsDefaultInstance();
  ACKSinaGame::default_instance_->InitAsDefaultInstance();
  REQWeiBo::default_instance_->InitAsDefaultInstance();
  ACKWeiBo::default_instance_->InitAsDefaultInstance();
  REQThranExit::default_instance_->InitAsDefaultInstance();
  REQThranGameVersion::default_instance_->InitAsDefaultInstance();
  ACKThranGameVersion::default_instance_->InitAsDefaultInstance();
  REQThranNewVerify::default_instance_->InitAsDefaultInstance();
  ACKThranNewVerify::default_instance_->InitAsDefaultInstance();
  REQThranFindPwd::default_instance_->InitAsDefaultInstance();
  ACKThranFindPwd::default_instance_->InitAsDefaultInstance();
  ACKThranHeart::default_instance_->InitAsDefaultInstance();
  SinaApiInfo::default_instance_->InitAsDefaultInstance();
  SinaApiRet::default_instance_->InitAsDefaultInstance();
  OGRoomInfo::default_instance_->InitAsDefaultInstance();
  OGThranMatchInfo::default_instance_->InitAsDefaultInstance();
  ThranRoomInfo::default_instance_->InitAsDefaultInstance();
  ThranJSSInfo::default_instance_->InitAsDefaultInstance();
  OGBulletinInfo::default_instance_->InitAsDefaultInstance();
  REQQuickConn::default_instance_->InitAsDefaultInstance();
  ACKQuickConn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ThranConn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ThranConn_2eproto {
  StaticDescriptorInitializer_ThranConn_2eproto() {
    protobuf_AddDesc_ThranConn_2eproto();
  }
} static_descriptor_initializer_ThranConn_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int REQThranReg::kUserNameFieldNumber;
const int REQThranReg::kPwdFieldNumber;
const int REQThranReg::kVerifyIdFieldNumber;
const int REQThranReg::kVerifyStrFieldNumber;
const int REQThranReg::kSecureIDFieldNumber;
const int REQThranReg::kComeFromIDFieldNumber;
const int REQThranReg::kChannelIDFieldNumber;
const int REQThranReg::kGameIdFieldNumber;
const int REQThranReg::kTokenFieldNumber;
const int REQThranReg::kUserNameAplFieldNumber;
const int REQThranReg::kRoomAdapteFieldNumber;
const int REQThranReg::kSexFieldNumber;
#endif  // !_MSC_VER

REQThranReg::REQThranReg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranReg::InitAsDefaultInstance() {
}

REQThranReg::REQThranReg(const REQThranReg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranReg::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifyid_ = 0;
  verifystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernameapl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranReg::~REQThranReg() {
  SharedDtor();
}

void REQThranReg::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (verifystr_ != &::google::protobuf::internal::kEmptyString) {
    delete verifystr_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
    delete usernameapl_;
  }
  if (this != default_instance_) {
  }
}

void REQThranReg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranReg& REQThranReg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranReg* REQThranReg::default_instance_ = NULL;

REQThranReg* REQThranReg::New() const {
  return new REQThranReg;
}

void REQThranReg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    verifyid_ = 0;
    if (has_verifystr()) {
      if (verifystr_ != &::google::protobuf::internal::kEmptyString) {
        verifystr_->clear();
      }
    }
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_usernameapl()) {
      if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
        usernameapl_->clear();
      }
    }
    roomadapte_ = 0;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranReg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pwd;
        break;
      }
      
      // required string Pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerifyId;
        break;
      }
      
      // optional int32 VerifyId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerifyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifyid_)));
          set_has_verifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VerifyStr;
        break;
      }
      
      // optional string VerifyStr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VerifyStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifystr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_token;
        break;
      }
      
      // required string token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_UserNameApl;
        break;
      }
      
      // optional bytes UserNameApl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserNameApl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usernameapl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Sex;
        break;
      }
      
      // optional int32 Sex = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranReg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string Pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // optional int32 VerifyId = 3;
  if (has_verifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verifyid(), output);
  }
  
  // optional string VerifyStr = 4;
  if (has_verifystr()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verifystr(), output);
  }
  
  // required string SecureID = 5;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 6;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->comefromid(), output);
  }
  
  // required string ChannelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channelid(), output);
  }
  
  // required int32 GameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }
  
  // required string token = 9;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->token(), output);
  }
  
  // optional bytes UserNameApl = 10;
  if (has_usernameapl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->usernameapl(), output);
  }
  
  // optional int32 RoomAdapte = 11 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roomadapte(), output);
  }
  
  // optional int32 Sex = 12 [default = 0];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }
  
}

int REQThranReg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string Pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional int32 VerifyId = 3;
    if (has_verifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifyid());
    }
    
    // optional string VerifyStr = 4;
    if (has_verifystr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifystr());
    }
    
    // required string SecureID = 5;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 6;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 7;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string token = 9;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional bytes UserNameApl = 10;
    if (has_usernameapl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->usernameapl());
    }
    
    // optional int32 RoomAdapte = 11 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
    // optional int32 Sex = 12 [default = 0];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranReg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranReg*>(&from));
}

void REQThranReg::MergeFrom(const REQThranReg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_verifyid()) {
      set_verifyid(from.verifyid());
    }
    if (from.has_verifystr()) {
      set_verifystr(from.verifystr());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_usernameapl()) {
      set_usernameapl(from.usernameapl());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
}

void REQThranReg::CopyFrom(const REQThranReg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranReg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f3) != 0x000001f3) return false;
  
  return true;
}

void REQThranReg::Swap(REQThranReg* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(pwd_, other->pwd_);
    std::swap(verifyid_, other->verifyid_);
    std::swap(verifystr_, other->verifystr_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(token_, other->token_);
    std::swap(usernameapl_, other->usernameapl_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranReg::GetTypeName() const {
  return "REQThranReg";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranReg::kAckResultFieldNumber;
const int ACKThranReg::kErrorStrFieldNumber;
const int ACKThranReg::kCertFieldNumber;
const int ACKThranReg::kRoleNameFieldNumber;
const int ACKThranReg::kRoomListFieldNumber;
const int ACKThranReg::kLoginIdFieldNumber;
const int ACKThranReg::kMatchRoomListFieldNumber;
const int ACKThranReg::kCertNoRoleFieldNumber;
#endif  // !_MSC_VER

ACKThranReg::ACKThranReg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranReg::InitAsDefaultInstance() {
}

ACKThranReg::ACKThranReg(const ACKThranReg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranReg::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  errorstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginid_ = 0;
  certnorole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranReg::~ACKThranReg() {
  SharedDtor();
}

void ACKThranReg::SharedDtor() {
  if (errorstr_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstr_;
  }
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
    delete certnorole_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranReg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranReg& ACKThranReg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranReg* ACKThranReg::default_instance_ = NULL;

ACKThranReg* ACKThranReg::New() const {
  return new ACKThranReg;
}

void ACKThranReg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_errorstr()) {
      if (errorstr_ != &::google::protobuf::internal::kEmptyString) {
        errorstr_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    loginid_ = 0;
    if (has_certnorole()) {
      if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
        certnorole_->clear();
      }
    }
  }
  roomlist_.Clear();
  matchroomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranReg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorStr;
        break;
      }
      
      // optional string ErrorStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cert;
        break;
      }
      
      // required bytes cert = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // required string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomList;
        break;
      }
      
      // repeated .OGRoomInfo RoomList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomList;
        if (input->ExpectTag(48)) goto parse_LoginId;
        break;
      }
      
      // required int32 LoginId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGRoomInfo MatchRoomList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_MatchRoomList;
        if (input->ExpectTag(66)) goto parse_CertNoRole;
        break;
      }
      
      // optional bytes CertNoRole = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertNoRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certnorole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranReg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // optional string ErrorStr = 2;
  if (has_errorstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errorstr(), output);
  }
  
  // required bytes cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cert(), output);
  }
  
  // required string RoleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rolename(), output);
  }
  
  // repeated .OGRoomInfo RoomList = 5;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->roomlist(i), output);
  }
  
  // required int32 LoginId = 6;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->loginid(), output);
  }
  
  // repeated .OGRoomInfo MatchRoomList = 7;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->matchroomlist(i), output);
  }
  
  // optional bytes CertNoRole = 8;
  if (has_certnorole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->certnorole(), output);
  }
  
}

int ACKThranReg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // optional string ErrorStr = 2;
    if (has_errorstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstr());
    }
    
    // required bytes cert = 3;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }
    
    // required string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 LoginId = 6;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional bytes CertNoRole = 8;
    if (has_certnorole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certnorole());
    }
    
  }
  // repeated .OGRoomInfo RoomList = 5;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  // repeated .OGRoomInfo MatchRoomList = 7;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranReg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranReg*>(&from));
}

void ACKThranReg::MergeFrom(const ACKThranReg& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_errorstr()) {
      set_errorstr(from.errorstr());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_certnorole()) {
      set_certnorole(from.certnorole());
    }
  }
}

void ACKThranReg::CopyFrom(const ACKThranReg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranReg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002d) != 0x0000002d) return false;
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKThranReg::Swap(ACKThranReg* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(errorstr_, other->errorstr_);
    std::swap(cert_, other->cert_);
    std::swap(rolename_, other->rolename_);
    roomlist_.Swap(&other->roomlist_);
    std::swap(loginid_, other->loginid_);
    matchroomlist_.Swap(&other->matchroomlist_);
    std::swap(certnorole_, other->certnorole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranReg::GetTypeName() const {
  return "ACKThranReg";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranConn::kUserNameFieldNumber;
const int REQThranConn::kNickNameFieldNumber;
const int REQThranConn::kPwdFieldNumber;
const int REQThranConn::kSexFieldNumber;
const int REQThranConn::kSecureIDFieldNumber;
const int REQThranConn::kComeFromIDFieldNumber;
const int REQThranConn::kChannelIDFieldNumber;
const int REQThranConn::kGameIdFieldNumber;
const int REQThranConn::kTokenFieldNumber;
const int REQThranConn::kUserNameAplFieldNumber;
const int REQThranConn::kVerifyIdFieldNumber;
const int REQThranConn::kTicketFieldNumber;
const int REQThranConn::kRoomAdapteFieldNumber;
const int REQThranConn::kLoginTypeFieldNumber;
const int REQThranConn::kGroupIDFieldNumber;
#endif  // !_MSC_VER

REQThranConn::REQThranConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranConn::InitAsDefaultInstance() {
}

REQThranConn::REQThranConn(const REQThranConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranConn::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernameapl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifyid_ = 0;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  logintype_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranConn::~REQThranConn() {
  SharedDtor();
}

void REQThranConn::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
    delete usernameapl_;
  }
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void REQThranConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranConn& REQThranConn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranConn* REQThranConn::default_instance_ = NULL;

REQThranConn* REQThranConn::New() const {
  return new REQThranConn;
}

void REQThranConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    sex_ = 0;
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_usernameapl()) {
      if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
        usernameapl_->clear();
      }
    }
    verifyid_ = 0;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    roomadapte_ = 0;
    logintype_ = 0;
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }
      
      // required string NickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pwd;
        break;
      }
      
      // required string Pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Sex;
        break;
      }
      
      // optional int32 Sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_token;
        break;
      }
      
      // required string token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_UserNameApl;
        break;
      }
      
      // optional bytes UserNameApl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserNameApl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usernameapl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VerifyId;
        break;
      }
      
      // optional int32 VerifyId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerifyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifyid_)));
          set_has_verifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Ticket;
        break;
      }
      
      // optional string Ticket = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LoginType;
        break;
      }
      
      // optional int32 LoginType = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_GroupID;
        break;
      }
      
      // optional int32 GroupID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }
  
  // required string Pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  // optional int32 Sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // required string SecureID = 5;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 6;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->comefromid(), output);
  }
  
  // required string ChannelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channelid(), output);
  }
  
  // required int32 GameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }
  
  // required string token = 9;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->token(), output);
  }
  
  // optional bytes UserNameApl = 10;
  if (has_usernameapl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->usernameapl(), output);
  }
  
  // optional int32 VerifyId = 11;
  if (has_verifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->verifyid(), output);
  }
  
  // optional string Ticket = 12;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ticket(), output);
  }
  
  // optional int32 RoomAdapte = 13 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->roomadapte(), output);
  }
  
  // optional int32 LoginType = 14 [default = 0];
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->logintype(), output);
  }
  
  // optional int32 GroupID = 15;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->groupid(), output);
  }
  
}

int REQThranConn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required string Pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional int32 Sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required string SecureID = 5;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 6;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 7;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string token = 9;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional bytes UserNameApl = 10;
    if (has_usernameapl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->usernameapl());
    }
    
    // optional int32 VerifyId = 11;
    if (has_verifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifyid());
    }
    
    // optional string Ticket = 12;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }
    
    // optional int32 RoomAdapte = 13 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
    // optional int32 LoginType = 14 [default = 0];
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }
    
    // optional int32 GroupID = 15;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranConn*>(&from));
}

void REQThranConn::MergeFrom(const REQThranConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_usernameapl()) {
      set_usernameapl(from.usernameapl());
    }
    if (from.has_verifyid()) {
      set_verifyid(from.verifyid());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void REQThranConn::CopyFrom(const REQThranConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranConn::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f7) != 0x000001f7) return false;
  
  return true;
}

void REQThranConn::Swap(REQThranConn* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(pwd_, other->pwd_);
    std::swap(sex_, other->sex_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(token_, other->token_);
    std::swap(usernameapl_, other->usernameapl_);
    std::swap(verifyid_, other->verifyid_);
    std::swap(ticket_, other->ticket_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(logintype_, other->logintype_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranConn::GetTypeName() const {
  return "REQThranConn";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranConn::kAckResultFieldNumber;
const int ACKThranConn::kCertFieldNumber;
const int ACKThranConn::kUserNameFieldNumber;
const int ACKThranConn::kRoleNameFieldNumber;
const int ACKThranConn::kPassWordFieldNumber;
const int ACKThranConn::kYuanBaoCntFieldNumber;
const int ACKThranConn::kCoinCntFieldNumber;
const int ACKThranConn::kRoomListFieldNumber;
const int ACKThranConn::kLoginIdFieldNumber;
const int ACKThranConn::kMatchRoomListFieldNumber;
const int ACKThranConn::kCertNoRoleFieldNumber;
const int ACKThranConn::kThranRoomItemsFieldNumber;
#endif  // !_MSC_VER

ACKThranConn::ACKThranConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranConn::InitAsDefaultInstance() {
}

ACKThranConn::ACKThranConn(const ACKThranConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranConn::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yuanbaocnt_ = 0;
  coincnt_ = GOOGLE_LONGLONG(0);
  loginid_ = 0;
  certnorole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranConn::~ACKThranConn() {
  SharedDtor();
}

void ACKThranConn::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
    delete certnorole_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranConn& ACKThranConn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranConn* ACKThranConn::default_instance_ = NULL;

ACKThranConn* ACKThranConn::New() const {
  return new ACKThranConn;
}

void ACKThranConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    yuanbaocnt_ = 0;
    coincnt_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    loginid_ = 0;
    if (has_certnorole()) {
      if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
        certnorole_->clear();
      }
    }
  }
  roomlist_.Clear();
  matchroomlist_.Clear();
  thranroomitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cert;
        break;
      }
      
      // required bytes cert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }
      
      // required string UserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // required string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PassWord;
        break;
      }
      
      // required string PassWord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_YuanBaoCnt;
        break;
      }
      
      // required int32 YuanBaoCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YuanBaoCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbaocnt_)));
          set_has_yuanbaocnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CoinCnt;
        break;
      }
      
      // required int64 CoinCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coincnt_)));
          set_has_coincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoomList;
        break;
      }
      
      // repeated .OGRoomInfo RoomList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoomList;
        if (input->ExpectTag(72)) goto parse_LoginId;
        break;
      }
      
      // required int32 LoginId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGRoomInfo MatchRoomList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatchRoomList;
        if (input->ExpectTag(90)) goto parse_CertNoRole;
        break;
      }
      
      // optional bytes CertNoRole = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertNoRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certnorole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ThranRoomItems;
        break;
      }
      
      // repeated .ThranRoomInfo ThranRoomItems = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThranRoomItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thranroomitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ThranRoomItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // required bytes cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cert(), output);
  }
  
  // required string UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // required string RoleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rolename(), output);
  }
  
  // required string PassWord = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }
  
  // required int32 YuanBaoCnt = 6;
  if (has_yuanbaocnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->yuanbaocnt(), output);
  }
  
  // required int64 CoinCnt = 7;
  if (has_coincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->coincnt(), output);
  }
  
  // repeated .OGRoomInfo RoomList = 8;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->roomlist(i), output);
  }
  
  // required int32 LoginId = 9;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loginid(), output);
  }
  
  // repeated .OGRoomInfo MatchRoomList = 10;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->matchroomlist(i), output);
  }
  
  // optional bytes CertNoRole = 11;
  if (has_certnorole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->certnorole(), output);
  }
  
  // repeated .ThranRoomInfo ThranRoomItems = 12;
  for (int i = 0; i < this->thranroomitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->thranroomitems(i), output);
  }
  
}

int ACKThranConn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // required bytes cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }
    
    // required string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required string PassWord = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required int32 YuanBaoCnt = 6;
    if (has_yuanbaocnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbaocnt());
    }
    
    // required int64 CoinCnt = 7;
    if (has_coincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coincnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LoginId = 9;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional bytes CertNoRole = 11;
    if (has_certnorole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certnorole());
    }
    
  }
  // repeated .OGRoomInfo RoomList = 8;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  // repeated .OGRoomInfo MatchRoomList = 10;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  // repeated .ThranRoomInfo ThranRoomItems = 12;
  total_size += 1 * this->thranroomitems_size();
  for (int i = 0; i < this->thranroomitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thranroomitems(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranConn*>(&from));
}

void ACKThranConn::MergeFrom(const ACKThranConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  thranroomitems_.MergeFrom(from.thranroomitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_yuanbaocnt()) {
      set_yuanbaocnt(from.yuanbaocnt());
    }
    if (from.has_coincnt()) {
      set_coincnt(from.coincnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_certnorole()) {
      set_certnorole(from.certnorole());
    }
  }
}

void ACKThranConn::CopyFrom(const ACKThranConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranConn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKThranConn::Swap(ACKThranConn* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(cert_, other->cert_);
    std::swap(username_, other->username_);
    std::swap(rolename_, other->rolename_);
    std::swap(password_, other->password_);
    std::swap(yuanbaocnt_, other->yuanbaocnt_);
    std::swap(coincnt_, other->coincnt_);
    roomlist_.Swap(&other->roomlist_);
    std::swap(loginid_, other->loginid_);
    matchroomlist_.Swap(&other->matchroomlist_);
    std::swap(certnorole_, other->certnorole_);
    thranroomitems_.Swap(&other->thranroomitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranConn::GetTypeName() const {
  return "ACKThranConn";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranShortCert::kUserNameFieldNumber;
const int REQThranShortCert::kNickNameFieldNumber;
const int REQThranShortCert::kPwdFieldNumber;
const int REQThranShortCert::kSexFieldNumber;
const int REQThranShortCert::kSecureIDFieldNumber;
const int REQThranShortCert::kComeFromIDFieldNumber;
const int REQThranShortCert::kChannelIDFieldNumber;
const int REQThranShortCert::kGameIdFieldNumber;
const int REQThranShortCert::kTokenFieldNumber;
const int REQThranShortCert::kUserNameAplFieldNumber;
const int REQThranShortCert::kVerifyIdFieldNumber;
const int REQThranShortCert::kTicketFieldNumber;
const int REQThranShortCert::kRoomAdapteFieldNumber;
#endif  // !_MSC_VER

REQThranShortCert::REQThranShortCert()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranShortCert::InitAsDefaultInstance() {
}

REQThranShortCert::REQThranShortCert(const REQThranShortCert& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranShortCert::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernameapl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifyid_ = 0;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranShortCert::~REQThranShortCert() {
  SharedDtor();
}

void REQThranShortCert::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
    delete usernameapl_;
  }
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void REQThranShortCert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranShortCert& REQThranShortCert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranShortCert* REQThranShortCert::default_instance_ = NULL;

REQThranShortCert* REQThranShortCert::New() const {
  return new REQThranShortCert;
}

void REQThranShortCert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    sex_ = 0;
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_usernameapl()) {
      if (usernameapl_ != &::google::protobuf::internal::kEmptyString) {
        usernameapl_->clear();
      }
    }
    verifyid_ = 0;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    roomadapte_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranShortCert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }
      
      // optional string NickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pwd;
        break;
      }
      
      // required string Pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Sex;
        break;
      }
      
      // optional int32 Sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_token;
        break;
      }
      
      // required string token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_UserNameApl;
        break;
      }
      
      // optional bytes UserNameApl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserNameApl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usernameapl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VerifyId;
        break;
      }
      
      // optional int32 VerifyId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerifyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifyid_)));
          set_has_verifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Ticket;
        break;
      }
      
      // optional string Ticket = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranShortCert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }
  
  // required string Pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  // optional int32 Sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // required string SecureID = 5;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 6;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->comefromid(), output);
  }
  
  // required string ChannelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channelid(), output);
  }
  
  // required int32 GameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }
  
  // required string token = 9;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->token(), output);
  }
  
  // optional bytes UserNameApl = 10;
  if (has_usernameapl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->usernameapl(), output);
  }
  
  // optional int32 VerifyId = 11;
  if (has_verifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->verifyid(), output);
  }
  
  // optional string Ticket = 12;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ticket(), output);
  }
  
  // optional int32 RoomAdapte = 13 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->roomadapte(), output);
  }
  
}

int REQThranShortCert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required string Pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional int32 Sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required string SecureID = 5;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 6;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 7;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string token = 9;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional bytes UserNameApl = 10;
    if (has_usernameapl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->usernameapl());
    }
    
    // optional int32 VerifyId = 11;
    if (has_verifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifyid());
    }
    
    // optional string Ticket = 12;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }
    
    // optional int32 RoomAdapte = 13 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranShortCert::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranShortCert*>(&from));
}

void REQThranShortCert::MergeFrom(const REQThranShortCert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_usernameapl()) {
      set_usernameapl(from.usernameapl());
    }
    if (from.has_verifyid()) {
      set_verifyid(from.verifyid());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
  }
}

void REQThranShortCert::CopyFrom(const REQThranShortCert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranShortCert::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f5) != 0x000001f5) return false;
  
  return true;
}

void REQThranShortCert::Swap(REQThranShortCert* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(pwd_, other->pwd_);
    std::swap(sex_, other->sex_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(token_, other->token_);
    std::swap(usernameapl_, other->usernameapl_);
    std::swap(verifyid_, other->verifyid_);
    std::swap(ticket_, other->ticket_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranShortCert::GetTypeName() const {
  return "REQThranShortCert";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranShortCert::kAckResultFieldNumber;
const int ACKThranShortCert::kShortCertFieldNumber;
const int ACKThranShortCert::kUserNameFieldNumber;
const int ACKThranShortCert::kRoomListFieldNumber;
const int ACKThranShortCert::kMatchRoomListFieldNumber;
#endif  // !_MSC_VER

ACKThranShortCert::ACKThranShortCert()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranShortCert::InitAsDefaultInstance() {
}

ACKThranShortCert::ACKThranShortCert(const ACKThranShortCert& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranShortCert::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  shortcert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranShortCert::~ACKThranShortCert() {
  SharedDtor();
}

void ACKThranShortCert::SharedDtor() {
  if (shortcert_ != &::google::protobuf::internal::kEmptyString) {
    delete shortcert_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranShortCert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranShortCert& ACKThranShortCert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranShortCert* ACKThranShortCert::default_instance_ = NULL;

ACKThranShortCert* ACKThranShortCert::New() const {
  return new ACKThranShortCert;
}

void ACKThranShortCert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_shortcert()) {
      if (shortcert_ != &::google::protobuf::internal::kEmptyString) {
        shortcert_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  roomlist_.Clear();
  matchroomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranShortCert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ShortCert;
        break;
      }
      
      // required bytes ShortCert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShortCert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shortcert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }
      
      // optional string UserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomList;
        break;
      }
      
      // repeated .OGRoomInfo RoomList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomList;
        if (input->ExpectTag(42)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGRoomInfo MatchRoomList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MatchRoomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranShortCert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // required bytes ShortCert = 2;
  if (has_shortcert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->shortcert(), output);
  }
  
  // optional string UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // repeated .OGRoomInfo RoomList = 4;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->roomlist(i), output);
  }
  
  // repeated .OGRoomInfo MatchRoomList = 5;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->matchroomlist(i), output);
  }
  
}

int ACKThranShortCert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // required bytes ShortCert = 2;
    if (has_shortcert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shortcert());
    }
    
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  // repeated .OGRoomInfo RoomList = 4;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  // repeated .OGRoomInfo MatchRoomList = 5;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranShortCert::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranShortCert*>(&from));
}

void ACKThranShortCert::MergeFrom(const ACKThranShortCert& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_shortcert()) {
      set_shortcert(from.shortcert());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
}

void ACKThranShortCert::CopyFrom(const ACKThranShortCert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranShortCert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKThranShortCert::Swap(ACKThranShortCert* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(shortcert_, other->shortcert_);
    std::swap(username_, other->username_);
    roomlist_.Swap(&other->roomlist_);
    matchroomlist_.Swap(&other->matchroomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranShortCert::GetTypeName() const {
  return "ACKThranShortCert";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranOpenId::kUserNameFieldNumber;
const int REQThranOpenId::kPwdFieldNumber;
const int REQThranOpenId::kTypeFieldNumber;
const int REQThranOpenId::kSecureIDFieldNumber;
const int REQThranOpenId::kComeFromIDFieldNumber;
const int REQThranOpenId::kChannelIDFieldNumber;
const int REQThranOpenId::kGameIdFieldNumber;
const int REQThranOpenId::kVerifyIdFieldNumber;
const int REQThranOpenId::kTicketFieldNumber;
const int REQThranOpenId::kTokenFieldNumber;
const int REQThranOpenId::kThirdkeyFieldNumber;
const int REQThranOpenId::kRoomAdapteFieldNumber;
const int REQThranOpenId::kThirdAppIdFieldNumber;
#endif  // !_MSC_VER

REQThranOpenId::REQThranOpenId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranOpenId::InitAsDefaultInstance() {
}

REQThranOpenId::REQThranOpenId(const REQThranOpenId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranOpenId::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  verifyid_ = 0;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thirdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  thirdappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranOpenId::~REQThranOpenId() {
  SharedDtor();
}

void REQThranOpenId::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdkey_;
  }
  if (thirdappid_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdappid_;
  }
  if (this != default_instance_) {
  }
}

void REQThranOpenId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranOpenId& REQThranOpenId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranOpenId* REQThranOpenId::default_instance_ = NULL;

REQThranOpenId* REQThranOpenId::New() const {
  return new REQThranOpenId;
}

void REQThranOpenId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
    verifyid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_thirdkey()) {
      if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
        thirdkey_->clear();
      }
    }
    roomadapte_ = 0;
    if (has_thirdappid()) {
      if (thirdappid_ != &::google::protobuf::internal::kEmptyString) {
        thirdappid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranOpenId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pwd;
        break;
      }
      
      // required string Pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VerifyId;
        break;
      }
      
      // optional int32 VerifyId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerifyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifyid_)));
          set_has_verifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Ticket;
        break;
      }
      
      // optional string Ticket = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_token;
        break;
      }
      
      // required string token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Thirdkey;
        break;
      }
      
      // optional string Thirdkey = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Thirdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ThirdAppId;
        break;
      }
      
      // optional string ThirdAppId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThirdAppId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdappid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranOpenId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }
  
  // required string Pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // required string SecureID = 4;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 5;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->comefromid(), output);
  }
  
  // required string ChannelID = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channelid(), output);
  }
  
  // required int32 GameId = 7;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gameid(), output);
  }
  
  // optional int32 VerifyId = 8;
  if (has_verifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->verifyid(), output);
  }
  
  // optional string Ticket = 9;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ticket(), output);
  }
  
  // required string token = 10;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->token(), output);
  }
  
  // optional string Thirdkey = 11;
  if (has_thirdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->thirdkey(), output);
  }
  
  // optional int32 RoomAdapte = 12 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->roomadapte(), output);
  }
  
  // optional string ThirdAppId = 13;
  if (has_thirdappid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->thirdappid(), output);
  }
  
}

int REQThranOpenId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }
    
    // required string Pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string SecureID = 4;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 5;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 7;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 VerifyId = 8;
    if (has_verifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifyid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Ticket = 9;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }
    
    // required string token = 10;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string Thirdkey = 11;
    if (has_thirdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdkey());
    }
    
    // optional int32 RoomAdapte = 12 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
    // optional string ThirdAppId = 13;
    if (has_thirdappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdappid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranOpenId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranOpenId*>(&from));
}

void REQThranOpenId::MergeFrom(const REQThranOpenId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_verifyid()) {
      set_verifyid(from.verifyid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_thirdkey()) {
      set_thirdkey(from.thirdkey());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
    if (from.has_thirdappid()) {
      set_thirdappid(from.thirdappid());
    }
  }
}

void REQThranOpenId::CopyFrom(const REQThranOpenId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranOpenId::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;
  
  return true;
}

void REQThranOpenId::Swap(REQThranOpenId* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(pwd_, other->pwd_);
    std::swap(type_, other->type_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(verifyid_, other->verifyid_);
    std::swap(ticket_, other->ticket_);
    std::swap(token_, other->token_);
    std::swap(thirdkey_, other->thirdkey_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(thirdappid_, other->thirdappid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranOpenId::GetTypeName() const {
  return "REQThranOpenId";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranOpenId::kAckResultFieldNumber;
const int ACKThranOpenId::kCertFieldNumber;
const int ACKThranOpenId::kUserNameFieldNumber;
const int ACKThranOpenId::kRoleNameFieldNumber;
const int ACKThranOpenId::kYuanBaoCntFieldNumber;
const int ACKThranOpenId::kCoinCntFieldNumber;
const int ACKThranOpenId::kRoomListFieldNumber;
const int ACKThranOpenId::kMatchRoomListFieldNumber;
const int ACKThranOpenId::kLoginIdFieldNumber;
const int ACKThranOpenId::kCertNoRoleFieldNumber;
const int ACKThranOpenId::kAchvIdFieldNumber;
#endif  // !_MSC_VER

ACKThranOpenId::ACKThranOpenId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranOpenId::InitAsDefaultInstance() {
}

ACKThranOpenId::ACKThranOpenId(const ACKThranOpenId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranOpenId::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yuanbaocnt_ = 0;
  coincnt_ = GOOGLE_LONGLONG(0);
  loginid_ = 0;
  certnorole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranOpenId::~ACKThranOpenId() {
  SharedDtor();
}

void ACKThranOpenId::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
    delete certnorole_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranOpenId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranOpenId& ACKThranOpenId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranOpenId* ACKThranOpenId::default_instance_ = NULL;

ACKThranOpenId* ACKThranOpenId::New() const {
  return new ACKThranOpenId;
}

void ACKThranOpenId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    yuanbaocnt_ = 0;
    coincnt_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    loginid_ = 0;
    if (has_certnorole()) {
      if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
        certnorole_->clear();
      }
    }
  }
  roomlist_.Clear();
  matchroomlist_.Clear();
  achvid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranOpenId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cert;
        break;
      }
      
      // required bytes cert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }
      
      // required bytes UserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // required bytes RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_YuanBaoCnt;
        break;
      }
      
      // required int32 YuanBaoCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YuanBaoCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbaocnt_)));
          set_has_yuanbaocnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CoinCnt;
        break;
      }
      
      // required int64 CoinCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coincnt_)));
          set_has_coincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RoomList;
        break;
      }
      
      // repeated .OGRoomInfo RoomList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RoomList;
        if (input->ExpectTag(66)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGRoomInfo MatchRoomList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_MatchRoomList;
        if (input->ExpectTag(72)) goto parse_LoginId;
        break;
      }
      
      // required int32 LoginId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CertNoRole;
        break;
      }
      
      // optional bytes CertNoRole = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertNoRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certnorole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_AchvId;
        break;
      }
      
      // repeated int32 AchvId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AchvId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_achvid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_achvid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_AchvId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranOpenId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // required bytes cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cert(), output);
  }
  
  // required bytes UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->username(), output);
  }
  
  // required bytes RoleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->rolename(), output);
  }
  
  // required int32 YuanBaoCnt = 5;
  if (has_yuanbaocnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->yuanbaocnt(), output);
  }
  
  // required int64 CoinCnt = 6;
  if (has_coincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->coincnt(), output);
  }
  
  // repeated .OGRoomInfo RoomList = 7;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->roomlist(i), output);
  }
  
  // repeated .OGRoomInfo MatchRoomList = 8;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->matchroomlist(i), output);
  }
  
  // required int32 LoginId = 9;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loginid(), output);
  }
  
  // optional bytes CertNoRole = 10;
  if (has_certnorole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->certnorole(), output);
  }
  
  // repeated int32 AchvId = 11;
  for (int i = 0; i < this->achvid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->achvid(i), output);
  }
  
}

int ACKThranOpenId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // required bytes cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }
    
    // required bytes UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }
    
    // required bytes RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }
    
    // required int32 YuanBaoCnt = 5;
    if (has_yuanbaocnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbaocnt());
    }
    
    // required int64 CoinCnt = 6;
    if (has_coincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coincnt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LoginId = 9;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional bytes CertNoRole = 10;
    if (has_certnorole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certnorole());
    }
    
  }
  // repeated .OGRoomInfo RoomList = 7;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  // repeated .OGRoomInfo MatchRoomList = 8;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  // repeated int32 AchvId = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->achvid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->achvid(i));
    }
    total_size += 1 * this->achvid_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranOpenId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranOpenId*>(&from));
}

void ACKThranOpenId::MergeFrom(const ACKThranOpenId& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  achvid_.MergeFrom(from.achvid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_yuanbaocnt()) {
      set_yuanbaocnt(from.yuanbaocnt());
    }
    if (from.has_coincnt()) {
      set_coincnt(from.coincnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_certnorole()) {
      set_certnorole(from.certnorole());
    }
  }
}

void ACKThranOpenId::CopyFrom(const ACKThranOpenId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranOpenId::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKThranOpenId::Swap(ACKThranOpenId* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(cert_, other->cert_);
    std::swap(username_, other->username_);
    std::swap(rolename_, other->rolename_);
    std::swap(yuanbaocnt_, other->yuanbaocnt_);
    std::swap(coincnt_, other->coincnt_);
    roomlist_.Swap(&other->roomlist_);
    matchroomlist_.Swap(&other->matchroomlist_);
    std::swap(loginid_, other->loginid_);
    std::swap(certnorole_, other->certnorole_);
    achvid_.Swap(&other->achvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranOpenId::GetTypeName() const {
  return "ACKThranOpenId";
}


// ===================================================================

#ifndef _MSC_VER
const int REQSinaGame::kThirdkeyFieldNumber;
const int REQSinaGame::kInfoListFieldNumber;
const int REQSinaGame::kSecureIDFieldNumber;
const int REQSinaGame::kComeFromIDFieldNumber;
const int REQSinaGame::kChannelIDFieldNumber;
const int REQSinaGame::kGameIdFieldNumber;
#endif  // !_MSC_VER

REQSinaGame::REQSinaGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQSinaGame::InitAsDefaultInstance() {
}

REQSinaGame::REQSinaGame(const REQSinaGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQSinaGame::SharedCtor() {
  _cached_size_ = 0;
  thirdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQSinaGame::~REQSinaGame() {
  SharedDtor();
}

void REQSinaGame::SharedDtor() {
  if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdkey_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void REQSinaGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQSinaGame& REQSinaGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQSinaGame* REQSinaGame::default_instance_ = NULL;

REQSinaGame* REQSinaGame::New() const {
  return new REQSinaGame;
}

void REQSinaGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_thirdkey()) {
      if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
        thirdkey_->clear();
      }
    }
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQSinaGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Thirdkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        break;
      }
      
      // repeated .SinaApiInfo InfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        if (input->ExpectTag(34)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQSinaGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Thirdkey = 1;
  if (has_thirdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->thirdkey(), output);
  }
  
  // repeated .SinaApiInfo InfoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->infolist(i), output);
  }
  
  // required string SecureID = 4;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 5;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->comefromid(), output);
  }
  
  // required string ChannelID = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channelid(), output);
  }
  
  // required int32 GameId = 7;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gameid(), output);
  }
  
}

int REQSinaGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Thirdkey = 1;
    if (has_thirdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdkey());
    }
    
    // required string SecureID = 4;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 5;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 7;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  // repeated .SinaApiInfo InfoList = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQSinaGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQSinaGame*>(&from));
}

void REQSinaGame::MergeFrom(const REQSinaGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thirdkey()) {
      set_thirdkey(from.thirdkey());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
}

void REQSinaGame::CopyFrom(const REQSinaGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQSinaGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  
  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void REQSinaGame::Swap(REQSinaGame* other) {
  if (other != this) {
    std::swap(thirdkey_, other->thirdkey_);
    infolist_.Swap(&other->infolist_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQSinaGame::GetTypeName() const {
  return "REQSinaGame";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKSinaGame::kAckResultFieldNumber;
const int ACKSinaGame::kRetListFieldNumber;
#endif  // !_MSC_VER

ACKSinaGame::ACKSinaGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKSinaGame::InitAsDefaultInstance() {
}

ACKSinaGame::ACKSinaGame(const ACKSinaGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKSinaGame::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKSinaGame::~ACKSinaGame() {
  SharedDtor();
}

void ACKSinaGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKSinaGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKSinaGame& ACKSinaGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKSinaGame* ACKSinaGame::default_instance_ = NULL;

ACKSinaGame* ACKSinaGame::New() const {
  return new ACKSinaGame;
}

void ACKSinaGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
  }
  retlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKSinaGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RetList;
        break;
      }
      
      // repeated .SinaApiRet RetList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RetList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_retlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RetList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKSinaGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // repeated .SinaApiRet RetList = 2;
  for (int i = 0; i < this->retlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->retlist(i), output);
  }
  
}

int ACKSinaGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
  }
  // repeated .SinaApiRet RetList = 2;
  total_size += 1 * this->retlist_size();
  for (int i = 0; i < this->retlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->retlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKSinaGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKSinaGame*>(&from));
}

void ACKSinaGame::MergeFrom(const ACKSinaGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  retlist_.MergeFrom(from.retlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
  }
}

void ACKSinaGame::CopyFrom(const ACKSinaGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKSinaGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < retlist_size(); i++) {
    if (!this->retlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKSinaGame::Swap(ACKSinaGame* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    retlist_.Swap(&other->retlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKSinaGame::GetTypeName() const {
  return "ACKSinaGame";
}


// ===================================================================

#ifndef _MSC_VER
const int REQWeiBo::kUserNameFieldNumber;
const int REQWeiBo::kPwdFieldNumber;
const int REQWeiBo::kTypeFieldNumber;
const int REQWeiBo::kSecureIDFieldNumber;
const int REQWeiBo::kComeFromIDFieldNumber;
const int REQWeiBo::kChannelIDFieldNumber;
const int REQWeiBo::kGameIdFieldNumber;
const int REQWeiBo::kTokenFieldNumber;
const int REQWeiBo::kWbMsgFieldNumber;
const int REQWeiBo::kWbPicFieldNumber;
#endif  // !_MSC_VER

REQWeiBo::REQWeiBo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQWeiBo::InitAsDefaultInstance() {
}

REQWeiBo::REQWeiBo(const REQWeiBo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQWeiBo::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wbmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wbpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQWeiBo::~REQWeiBo() {
  SharedDtor();
}

void REQWeiBo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (wbmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete wbmsg_;
  }
  if (wbpic_ != &::google::protobuf::internal::kEmptyString) {
    delete wbpic_;
  }
  if (this != default_instance_) {
  }
}

void REQWeiBo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQWeiBo& REQWeiBo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQWeiBo* REQWeiBo::default_instance_ = NULL;

REQWeiBo* REQWeiBo::New() const {
  return new REQWeiBo;
}

void REQWeiBo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_wbmsg()) {
      if (wbmsg_ != &::google::protobuf::internal::kEmptyString) {
        wbmsg_->clear();
      }
    }
    if (has_wbpic()) {
      if (wbpic_ != &::google::protobuf::internal::kEmptyString) {
        wbpic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQWeiBo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pwd;
        break;
      }
      
      // required string Pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SecureID;
        break;
      }
      
      // required string SecureID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }
      
      // required string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wbMsg;
        break;
      }
      
      // optional bytes wbMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wbMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wbmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wbPic;
        break;
      }
      
      // optional bytes wbPic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wbPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wbpic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQWeiBo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }
  
  // required string Pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // required string SecureID = 4;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 5;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->comefromid(), output);
  }
  
  // required string ChannelID = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channelid(), output);
  }
  
  // required int32 GameId = 7;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gameid(), output);
  }
  
  // required string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }
  
  // optional bytes wbMsg = 9;
  if (has_wbmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->wbmsg(), output);
  }
  
  // optional bytes wbPic = 10;
  if (has_wbpic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->wbpic(), output);
  }
  
}

int REQWeiBo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }
    
    // required string Pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string SecureID = 4;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 5;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 7;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes wbMsg = 9;
    if (has_wbmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wbmsg());
    }
    
    // optional bytes wbPic = 10;
    if (has_wbpic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wbpic());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQWeiBo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQWeiBo*>(&from));
}

void REQWeiBo::MergeFrom(const REQWeiBo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wbmsg()) {
      set_wbmsg(from.wbmsg());
    }
    if (from.has_wbpic()) {
      set_wbpic(from.wbpic());
    }
  }
}

void REQWeiBo::CopyFrom(const REQWeiBo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQWeiBo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void REQWeiBo::Swap(REQWeiBo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(pwd_, other->pwd_);
    std::swap(type_, other->type_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(token_, other->token_);
    std::swap(wbmsg_, other->wbmsg_);
    std::swap(wbpic_, other->wbpic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQWeiBo::GetTypeName() const {
  return "REQWeiBo";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKWeiBo::kAckResultFieldNumber;
#endif  // !_MSC_VER

ACKWeiBo::ACKWeiBo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKWeiBo::InitAsDefaultInstance() {
}

ACKWeiBo::ACKWeiBo(const ACKWeiBo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKWeiBo::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKWeiBo::~ACKWeiBo() {
  SharedDtor();
}

void ACKWeiBo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKWeiBo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKWeiBo& ACKWeiBo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKWeiBo* ACKWeiBo::default_instance_ = NULL;

ACKWeiBo* ACKWeiBo::New() const {
  return new ACKWeiBo;
}

void ACKWeiBo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKWeiBo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKWeiBo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
}

int ACKWeiBo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKWeiBo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKWeiBo*>(&from));
}

void ACKWeiBo::MergeFrom(const ACKWeiBo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
  }
}

void ACKWeiBo::CopyFrom(const ACKWeiBo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKWeiBo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ACKWeiBo::Swap(ACKWeiBo* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKWeiBo::GetTypeName() const {
  return "ACKWeiBo";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranExit::kLoginIdFieldNumber;
const int REQThranExit::kExitTypeFieldNumber;
const int REQThranExit::kExitMsgFieldNumber;
#endif  // !_MSC_VER

REQThranExit::REQThranExit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranExit::InitAsDefaultInstance() {
}

REQThranExit::REQThranExit(const REQThranExit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranExit::SharedCtor() {
  _cached_size_ = 0;
  loginid_ = 0;
  exittype_ = 0;
  exitmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranExit::~REQThranExit() {
  SharedDtor();
}

void REQThranExit::SharedDtor() {
  if (exitmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete exitmsg_;
  }
  if (this != default_instance_) {
  }
}

void REQThranExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranExit& REQThranExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranExit* REQThranExit::default_instance_ = NULL;

REQThranExit* REQThranExit::New() const {
  return new REQThranExit;
}

void REQThranExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginid_ = 0;
    exittype_ = 0;
    if (has_exitmsg()) {
      if (exitmsg_ != &::google::protobuf::internal::kEmptyString) {
        exitmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LoginId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginid_)));
          set_has_loginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ExitType;
        break;
      }
      
      // optional int32 ExitType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exittype_)));
          set_has_exittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExitMsg;
        break;
      }
      
      // optional string ExitMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExitMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exitmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 LoginId = 1;
  if (has_loginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loginid(), output);
  }
  
  // optional int32 ExitType = 2;
  if (has_exittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exittype(), output);
  }
  
  // optional string ExitMsg = 3;
  if (has_exitmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exitmsg(), output);
  }
  
}

int REQThranExit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 LoginId = 1;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginid());
    }
    
    // optional int32 ExitType = 2;
    if (has_exittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exittype());
    }
    
    // optional string ExitMsg = 3;
    if (has_exitmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exitmsg());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranExit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranExit*>(&from));
}

void REQThranExit::MergeFrom(const REQThranExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginid()) {
      set_loginid(from.loginid());
    }
    if (from.has_exittype()) {
      set_exittype(from.exittype());
    }
    if (from.has_exitmsg()) {
      set_exitmsg(from.exitmsg());
    }
  }
}

void REQThranExit::CopyFrom(const REQThranExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void REQThranExit::Swap(REQThranExit* other) {
  if (other != this) {
    std::swap(loginid_, other->loginid_);
    std::swap(exittype_, other->exittype_);
    std::swap(exitmsg_, other->exitmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranExit::GetTypeName() const {
  return "REQThranExit";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranGameVersion::kCurVersionFieldNumber;
const int REQThranGameVersion::kGameIdFieldNumber;
const int REQThranGameVersion::kComeFromIDFieldNumber;
const int REQThranGameVersion::kResolutionIDFieldNumber;
const int REQThranGameVersion::kChannelIDFieldNumber;
const int REQThranGameVersion::kLanguageIDFieldNumber;
const int REQThranGameVersion::kSmallVersionFieldNumber;
const int REQThranGameVersion::kClientTypeFieldNumber;
const int REQThranGameVersion::kScreenSizeFieldNumber;
const int REQThranGameVersion::kRoomAdapteFieldNumber;
#endif  // !_MSC_VER

REQThranGameVersion::REQThranGameVersion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranGameVersion::InitAsDefaultInstance() {
}

REQThranGameVersion::REQThranGameVersion(const REQThranGameVersion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranGameVersion::SharedCtor() {
  _cached_size_ = 0;
  curversion_ = 0;
  gameid_ = 0;
  comefromid_ = 0;
  resolutionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smallversion_ = 0;
  clienttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screensize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranGameVersion::~REQThranGameVersion() {
  SharedDtor();
}

void REQThranGameVersion::SharedDtor() {
  if (resolutionid_ != &::google::protobuf::internal::kEmptyString) {
    delete resolutionid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (languageid_ != &::google::protobuf::internal::kEmptyString) {
    delete languageid_;
  }
  if (clienttype_ != &::google::protobuf::internal::kEmptyString) {
    delete clienttype_;
  }
  if (screensize_ != &::google::protobuf::internal::kEmptyString) {
    delete screensize_;
  }
  if (this != default_instance_) {
  }
}

void REQThranGameVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranGameVersion& REQThranGameVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranGameVersion* REQThranGameVersion::default_instance_ = NULL;

REQThranGameVersion* REQThranGameVersion::New() const {
  return new REQThranGameVersion;
}

void REQThranGameVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curversion_ = 0;
    gameid_ = 0;
    comefromid_ = 0;
    if (has_resolutionid()) {
      if (resolutionid_ != &::google::protobuf::internal::kEmptyString) {
        resolutionid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_languageid()) {
      if (languageid_ != &::google::protobuf::internal::kEmptyString) {
        languageid_->clear();
      }
    }
    smallversion_ = 0;
    if (has_clienttype()) {
      if (clienttype_ != &::google::protobuf::internal::kEmptyString) {
        clienttype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_screensize()) {
      if (screensize_ != &::google::protobuf::internal::kEmptyString) {
        screensize_->clear();
      }
    }
    roomadapte_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranGameVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CurVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curversion_)));
          set_has_curversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ResolutionID;
        break;
      }
      
      // required string ResolutionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LanguageID;
        break;
      }
      
      // required string LanguageID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LanguageID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languageid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_smallVersion;
        break;
      }
      
      // optional int32 smallVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallversion_)));
          set_has_smallversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ClientType;
        break;
      }
      
      // optional string ClientType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clienttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ScreenSize;
        break;
      }
      
      // optional string ScreenSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScreenSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screensize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranGameVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CurVersion = 1;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curversion(), output);
  }
  
  // required int32 GameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  // required int32 ComeFromID = 3;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comefromid(), output);
  }
  
  // required string ResolutionID = 4;
  if (has_resolutionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resolutionid(), output);
  }
  
  // required string ChannelID = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channelid(), output);
  }
  
  // required string LanguageID = 6;
  if (has_languageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->languageid(), output);
  }
  
  // optional int32 smallVersion = 7;
  if (has_smallversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->smallversion(), output);
  }
  
  // optional string ClientType = 8;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->clienttype(), output);
  }
  
  // optional string ScreenSize = 9;
  if (has_screensize()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->screensize(), output);
  }
  
  // optional int32 RoomAdapte = 10 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roomadapte(), output);
  }
  
}

int REQThranGameVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CurVersion = 1;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curversion());
    }
    
    // required int32 GameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required int32 ComeFromID = 3;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ResolutionID = 4;
    if (has_resolutionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionid());
    }
    
    // required string ChannelID = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required string LanguageID = 6;
    if (has_languageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languageid());
    }
    
    // optional int32 smallVersion = 7;
    if (has_smallversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallversion());
    }
    
    // optional string ClientType = 8;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clienttype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ScreenSize = 9;
    if (has_screensize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screensize());
    }
    
    // optional int32 RoomAdapte = 10 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranGameVersion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranGameVersion*>(&from));
}

void REQThranGameVersion::MergeFrom(const REQThranGameVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curversion()) {
      set_curversion(from.curversion());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_resolutionid()) {
      set_resolutionid(from.resolutionid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_languageid()) {
      set_languageid(from.languageid());
    }
    if (from.has_smallversion()) {
      set_smallversion(from.smallversion());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screensize()) {
      set_screensize(from.screensize());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
  }
}

void REQThranGameVersion::CopyFrom(const REQThranGameVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranGameVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void REQThranGameVersion::Swap(REQThranGameVersion* other) {
  if (other != this) {
    std::swap(curversion_, other->curversion_);
    std::swap(gameid_, other->gameid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(resolutionid_, other->resolutionid_);
    std::swap(channelid_, other->channelid_);
    std::swap(languageid_, other->languageid_);
    std::swap(smallversion_, other->smallversion_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(screensize_, other->screensize_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranGameVersion::GetTypeName() const {
  return "REQThranGameVersion";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranGameVersion::kAckResultFieldNumber;
const int ACKThranGameVersion::kPlayEnableFieldNumber;
const int ACKThranGameVersion::kDownloadUrlFieldNumber;
const int ACKThranGameVersion::kGameServerIpFieldNumber;
const int ACKThranGameVersion::kGameServerPortFieldNumber;
const int ACKThranGameVersion::kGameRankEnableFieldNumber;
const int ACKThranGameVersion::kGameRankDefFieldNumber;
const int ACKThranGameVersion::kIfPreserveFieldNumber;
const int ACKThranGameVersion::kPreserveMsgFieldNumber;
const int ACKThranGameVersion::kMatchInfoListFieldNumber;
const int ACKThranGameVersion::kDownloadReasionFieldNumber;
const int ACKThranGameVersion::kGameIdFieldNumber;
const int ACKThranGameVersion::kGameSortFieldNumber;
const int ACKThranGameVersion::kMatchRoomListFieldNumber;
const int ACKThranGameVersion::kJssListFieldNumber;
const int ACKThranGameVersion::kIfSearchFieldNumber;
const int ACKThranGameVersion::kBulletinListFieldNumber;
#endif  // !_MSC_VER

ACKThranGameVersion::ACKThranGameVersion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranGameVersion::InitAsDefaultInstance() {
}

ACKThranGameVersion::ACKThranGameVersion(const ACKThranGameVersion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranGameVersion::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  playenable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserverport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamerankenable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamerankdef_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifpreserve_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preservemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadreasion_ = 0;
  gameid_ = 0;
  gamesort_ = 0;
  ifsearch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranGameVersion::~ACKThranGameVersion() {
  SharedDtor();
}

void ACKThranGameVersion::SharedDtor() {
  if (playenable_ != &::google::protobuf::internal::kEmptyString) {
    delete playenable_;
  }
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (gameserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverip_;
  }
  if (gameserverport_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserverport_;
  }
  if (gamerankenable_ != &::google::protobuf::internal::kEmptyString) {
    delete gamerankenable_;
  }
  if (gamerankdef_ != &::google::protobuf::internal::kEmptyString) {
    delete gamerankdef_;
  }
  if (ifpreserve_ != &::google::protobuf::internal::kEmptyString) {
    delete ifpreserve_;
  }
  if (preservemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete preservemsg_;
  }
  if (ifsearch_ != &::google::protobuf::internal::kEmptyString) {
    delete ifsearch_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranGameVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranGameVersion& ACKThranGameVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranGameVersion* ACKThranGameVersion::default_instance_ = NULL;

ACKThranGameVersion* ACKThranGameVersion::New() const {
  return new ACKThranGameVersion;
}

void ACKThranGameVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_playenable()) {
      if (playenable_ != &::google::protobuf::internal::kEmptyString) {
        playenable_->clear();
      }
    }
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    if (has_gameserverip()) {
      if (gameserverip_ != &::google::protobuf::internal::kEmptyString) {
        gameserverip_->clear();
      }
    }
    if (has_gameserverport()) {
      if (gameserverport_ != &::google::protobuf::internal::kEmptyString) {
        gameserverport_->clear();
      }
    }
    if (has_gamerankenable()) {
      if (gamerankenable_ != &::google::protobuf::internal::kEmptyString) {
        gamerankenable_->clear();
      }
    }
    if (has_gamerankdef()) {
      if (gamerankdef_ != &::google::protobuf::internal::kEmptyString) {
        gamerankdef_->clear();
      }
    }
    if (has_ifpreserve()) {
      if (ifpreserve_ != &::google::protobuf::internal::kEmptyString) {
        ifpreserve_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_preservemsg()) {
      if (preservemsg_ != &::google::protobuf::internal::kEmptyString) {
        preservemsg_->clear();
      }
    }
    downloadreasion_ = 0;
    gameid_ = 0;
    gamesort_ = 0;
    if (has_ifsearch()) {
      if (ifsearch_ != &::google::protobuf::internal::kEmptyString) {
        ifsearch_->clear();
      }
    }
  }
  matchinfolist_.Clear();
  matchroomlist_.Clear();
  jsslist_.Clear();
  bulletinlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranGameVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayEnable;
        break;
      }
      
      // required string PlayEnable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playenable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DownloadUrl;
        break;
      }
      
      // required string DownloadUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DownloadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GameServerIp;
        break;
      }
      
      // required string GameServerIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GameServerPort;
        break;
      }
      
      // required string GameServerPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameServerPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserverport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_GameRankEnable;
        break;
      }
      
      // required string GameRankEnable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameRankEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamerankenable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GameRankDef;
        break;
      }
      
      // required string GameRankDef = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameRankDef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamerankdef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_IfPreserve;
        break;
      }
      
      // optional string IfPreserve = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IfPreserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifpreserve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_PreserveMsg;
        break;
      }
      
      // optional string PreserveMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PreserveMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preservemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatchInfoList;
        break;
      }
      
      // repeated .OGThranMatchInfo MatchInfoList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatchInfoList;
        if (input->ExpectTag(88)) goto parse_DownloadReasion;
        break;
      }
      
      // optional int32 DownloadReasion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DownloadReasion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downloadreasion_)));
          set_has_downloadreasion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GameId;
        break;
      }
      
      // optional int32 GameId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gameSort;
        break;
      }
      
      // optional int32 gameSort = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameSort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamesort_)));
          set_has_gamesort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGRoomInfo MatchRoomList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_MatchRoomList;
        if (input->ExpectTag(122)) goto parse_JssList;
        break;
      }
      
      // repeated .ThranJSSInfo JssList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JssList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jsslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_JssList;
        if (input->ExpectTag(130)) goto parse_IfSearch;
        break;
      }
      
      // optional string IfSearch = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IfSearch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifsearch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_BulletinList;
        break;
      }
      
      // repeated .OGBulletinInfo BulletinList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletinList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletinlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_BulletinList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranGameVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // required string PlayEnable = 2;
  if (has_playenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playenable(), output);
  }
  
  // required string DownloadUrl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->downloadurl(), output);
  }
  
  // required string GameServerIp = 4;
  if (has_gameserverip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameserverip(), output);
  }
  
  // required string GameServerPort = 5;
  if (has_gameserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gameserverport(), output);
  }
  
  // required string GameRankEnable = 6;
  if (has_gamerankenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gamerankenable(), output);
  }
  
  // required string GameRankDef = 7;
  if (has_gamerankdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->gamerankdef(), output);
  }
  
  // optional string IfPreserve = 8;
  if (has_ifpreserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ifpreserve(), output);
  }
  
  // optional string PreserveMsg = 9;
  if (has_preservemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->preservemsg(), output);
  }
  
  // repeated .OGThranMatchInfo MatchInfoList = 10;
  for (int i = 0; i < this->matchinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->matchinfolist(i), output);
  }
  
  // optional int32 DownloadReasion = 11;
  if (has_downloadreasion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->downloadreasion(), output);
  }
  
  // optional int32 GameId = 12;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gameid(), output);
  }
  
  // optional int32 gameSort = 13;
  if (has_gamesort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gamesort(), output);
  }
  
  // repeated .OGRoomInfo MatchRoomList = 14;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->matchroomlist(i), output);
  }
  
  // repeated .ThranJSSInfo JssList = 15;
  for (int i = 0; i < this->jsslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->jsslist(i), output);
  }
  
  // optional string IfSearch = 16;
  if (has_ifsearch()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->ifsearch(), output);
  }
  
  // repeated .OGBulletinInfo BulletinList = 17;
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->bulletinlist(i), output);
  }
  
}

int ACKThranGameVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // required string PlayEnable = 2;
    if (has_playenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playenable());
    }
    
    // required string DownloadUrl = 3;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }
    
    // required string GameServerIp = 4;
    if (has_gameserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverip());
    }
    
    // required string GameServerPort = 5;
    if (has_gameserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserverport());
    }
    
    // required string GameRankEnable = 6;
    if (has_gamerankenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamerankenable());
    }
    
    // required string GameRankDef = 7;
    if (has_gamerankdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamerankdef());
    }
    
    // optional string IfPreserve = 8;
    if (has_ifpreserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifpreserve());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string PreserveMsg = 9;
    if (has_preservemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preservemsg());
    }
    
    // optional int32 DownloadReasion = 11;
    if (has_downloadreasion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downloadreasion());
    }
    
    // optional int32 GameId = 12;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 gameSort = 13;
    if (has_gamesort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamesort());
    }
    
    // optional string IfSearch = 16;
    if (has_ifsearch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifsearch());
    }
    
  }
  // repeated .OGThranMatchInfo MatchInfoList = 10;
  total_size += 1 * this->matchinfolist_size();
  for (int i = 0; i < this->matchinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchinfolist(i));
  }
  
  // repeated .OGRoomInfo MatchRoomList = 14;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  // repeated .ThranJSSInfo JssList = 15;
  total_size += 1 * this->jsslist_size();
  for (int i = 0; i < this->jsslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jsslist(i));
  }
  
  // repeated .OGBulletinInfo BulletinList = 17;
  total_size += 2 * this->bulletinlist_size();
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletinlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranGameVersion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranGameVersion*>(&from));
}

void ACKThranGameVersion::MergeFrom(const ACKThranGameVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchinfolist_.MergeFrom(from.matchinfolist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  jsslist_.MergeFrom(from.jsslist_);
  bulletinlist_.MergeFrom(from.bulletinlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_playenable()) {
      set_playenable(from.playenable());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_gameserverip()) {
      set_gameserverip(from.gameserverip());
    }
    if (from.has_gameserverport()) {
      set_gameserverport(from.gameserverport());
    }
    if (from.has_gamerankenable()) {
      set_gamerankenable(from.gamerankenable());
    }
    if (from.has_gamerankdef()) {
      set_gamerankdef(from.gamerankdef());
    }
    if (from.has_ifpreserve()) {
      set_ifpreserve(from.ifpreserve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preservemsg()) {
      set_preservemsg(from.preservemsg());
    }
    if (from.has_downloadreasion()) {
      set_downloadreasion(from.downloadreasion());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamesort()) {
      set_gamesort(from.gamesort());
    }
    if (from.has_ifsearch()) {
      set_ifsearch(from.ifsearch());
    }
  }
}

void ACKThranGameVersion::CopyFrom(const ACKThranGameVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranGameVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < matchinfolist_size(); i++) {
    if (!this->matchinfolist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKThranGameVersion::Swap(ACKThranGameVersion* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(playenable_, other->playenable_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(gameserverip_, other->gameserverip_);
    std::swap(gameserverport_, other->gameserverport_);
    std::swap(gamerankenable_, other->gamerankenable_);
    std::swap(gamerankdef_, other->gamerankdef_);
    std::swap(ifpreserve_, other->ifpreserve_);
    std::swap(preservemsg_, other->preservemsg_);
    matchinfolist_.Swap(&other->matchinfolist_);
    std::swap(downloadreasion_, other->downloadreasion_);
    std::swap(gameid_, other->gameid_);
    std::swap(gamesort_, other->gamesort_);
    matchroomlist_.Swap(&other->matchroomlist_);
    jsslist_.Swap(&other->jsslist_);
    std::swap(ifsearch_, other->ifsearch_);
    bulletinlist_.Swap(&other->bulletinlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranGameVersion::GetTypeName() const {
  return "ACKThranGameVersion";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranNewVerify::kSecureIDFieldNumber;
const int REQThranNewVerify::kComeFromIDFieldNumber;
const int REQThranNewVerify::kChannelIDFieldNumber;
const int REQThranNewVerify::kGameIdFieldNumber;
#endif  // !_MSC_VER

REQThranNewVerify::REQThranNewVerify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranNewVerify::InitAsDefaultInstance() {
}

REQThranNewVerify::REQThranNewVerify(const REQThranNewVerify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranNewVerify::SharedCtor() {
  _cached_size_ = 0;
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranNewVerify::~REQThranNewVerify() {
  SharedDtor();
}

void REQThranNewVerify::SharedDtor() {
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void REQThranNewVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranNewVerify& REQThranNewVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranNewVerify* REQThranNewVerify::default_instance_ = NULL;

REQThranNewVerify* REQThranNewVerify::New() const {
  return new REQThranNewVerify;
}

void REQThranNewVerify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranNewVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SecureID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranNewVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SecureID = 1;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 2;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comefromid(), output);
  }
  
  // required string ChannelID = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }
  
  // required int32 GameId = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gameid(), output);
  }
  
}

int REQThranNewVerify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SecureID = 1;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 2;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranNewVerify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranNewVerify*>(&from));
}

void REQThranNewVerify::MergeFrom(const REQThranNewVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
}

void REQThranNewVerify::CopyFrom(const REQThranNewVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranNewVerify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void REQThranNewVerify::Swap(REQThranNewVerify* other) {
  if (other != this) {
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranNewVerify::GetTypeName() const {
  return "REQThranNewVerify";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranNewVerify::kAckResultFieldNumber;
const int ACKThranNewVerify::kErrorStrFieldNumber;
const int ACKThranNewVerify::kVerifyFieldNumber;
const int ACKThranNewVerify::kVerifyIdFieldNumber;
#endif  // !_MSC_VER

ACKThranNewVerify::ACKThranNewVerify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranNewVerify::InitAsDefaultInstance() {
}

ACKThranNewVerify::ACKThranNewVerify(const ACKThranNewVerify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranNewVerify::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  errorstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verifyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranNewVerify::~ACKThranNewVerify() {
  SharedDtor();
}

void ACKThranNewVerify::SharedDtor() {
  if (errorstr_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstr_;
  }
  if (verify_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranNewVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranNewVerify& ACKThranNewVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranNewVerify* ACKThranNewVerify::default_instance_ = NULL;

ACKThranNewVerify* ACKThranNewVerify::New() const {
  return new ACKThranNewVerify;
}

void ACKThranNewVerify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_errorstr()) {
      if (errorstr_ != &::google::protobuf::internal::kEmptyString) {
        errorstr_->clear();
      }
    }
    if (has_verify()) {
      if (verify_ != &::google::protobuf::internal::kEmptyString) {
        verify_->clear();
      }
    }
    verifyid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranNewVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorStr;
        break;
      }
      
      // optional string ErrorStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Verify;
        break;
      }
      
      // optional bytes Verify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerifyId;
        break;
      }
      
      // optional int32 VerifyId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerifyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verifyid_)));
          set_has_verifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranNewVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // optional string ErrorStr = 2;
  if (has_errorstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errorstr(), output);
  }
  
  // optional bytes Verify = 3;
  if (has_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->verify(), output);
  }
  
  // optional int32 VerifyId = 4;
  if (has_verifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->verifyid(), output);
  }
  
}

int ACKThranNewVerify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // optional string ErrorStr = 2;
    if (has_errorstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstr());
    }
    
    // optional bytes Verify = 3;
    if (has_verify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verify());
    }
    
    // optional int32 VerifyId = 4;
    if (has_verifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verifyid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranNewVerify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranNewVerify*>(&from));
}

void ACKThranNewVerify::MergeFrom(const ACKThranNewVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_errorstr()) {
      set_errorstr(from.errorstr());
    }
    if (from.has_verify()) {
      set_verify(from.verify());
    }
    if (from.has_verifyid()) {
      set_verifyid(from.verifyid());
    }
  }
}

void ACKThranNewVerify::CopyFrom(const ACKThranNewVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranNewVerify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ACKThranNewVerify::Swap(ACKThranNewVerify* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(errorstr_, other->errorstr_);
    std::swap(verify_, other->verify_);
    std::swap(verifyid_, other->verifyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranNewVerify::GetTypeName() const {
  return "ACKThranNewVerify";
}


// ===================================================================

#ifndef _MSC_VER
const int REQThranFindPwd::kEmailFieldNumber;
const int REQThranFindPwd::kNewPwdFieldNumber;
#endif  // !_MSC_VER

REQThranFindPwd::REQThranFindPwd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQThranFindPwd::InitAsDefaultInstance() {
}

REQThranFindPwd::REQThranFindPwd(const REQThranFindPwd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQThranFindPwd::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQThranFindPwd::~REQThranFindPwd() {
  SharedDtor();
}

void REQThranFindPwd::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete newpwd_;
  }
  if (this != default_instance_) {
  }
}

void REQThranFindPwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQThranFindPwd& REQThranFindPwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQThranFindPwd* REQThranFindPwd::default_instance_ = NULL;

REQThranFindPwd* REQThranFindPwd::New() const {
  return new REQThranFindPwd;
}

void REQThranFindPwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_newpwd()) {
      if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
        newpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQThranFindPwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewPwd;
        break;
      }
      
      // required string NewPwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQThranFindPwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }
  
  // required string NewPwd = 2;
  if (has_newpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newpwd(), output);
  }
  
}

int REQThranFindPwd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // required string NewPwd = 2;
    if (has_newpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpwd());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQThranFindPwd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQThranFindPwd*>(&from));
}

void REQThranFindPwd::MergeFrom(const REQThranFindPwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_newpwd()) {
      set_newpwd(from.newpwd());
    }
  }
}

void REQThranFindPwd::CopyFrom(const REQThranFindPwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQThranFindPwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void REQThranFindPwd::Swap(REQThranFindPwd* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(newpwd_, other->newpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQThranFindPwd::GetTypeName() const {
  return "REQThranFindPwd";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranFindPwd::kAckResultFieldNumber;
#endif  // !_MSC_VER

ACKThranFindPwd::ACKThranFindPwd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranFindPwd::InitAsDefaultInstance() {
}

ACKThranFindPwd::ACKThranFindPwd(const ACKThranFindPwd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranFindPwd::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranFindPwd::~ACKThranFindPwd() {
  SharedDtor();
}

void ACKThranFindPwd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKThranFindPwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranFindPwd& ACKThranFindPwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranFindPwd* ACKThranFindPwd::default_instance_ = NULL;

ACKThranFindPwd* ACKThranFindPwd::New() const {
  return new ACKThranFindPwd;
}

void ACKThranFindPwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranFindPwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranFindPwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
}

int ACKThranFindPwd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranFindPwd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranFindPwd*>(&from));
}

void ACKThranFindPwd::MergeFrom(const ACKThranFindPwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
  }
}

void ACKThranFindPwd::CopyFrom(const ACKThranFindPwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranFindPwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ACKThranFindPwd::Swap(ACKThranFindPwd* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranFindPwd::GetTypeName() const {
  return "ACKThranFindPwd";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKThranHeart::kServTimeFieldNumber;
#endif  // !_MSC_VER

ACKThranHeart::ACKThranHeart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKThranHeart::InitAsDefaultInstance() {
}

ACKThranHeart::ACKThranHeart(const ACKThranHeart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKThranHeart::SharedCtor() {
  _cached_size_ = 0;
  servtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKThranHeart::~ACKThranHeart() {
  SharedDtor();
}

void ACKThranHeart::SharedDtor() {
  if (servtime_ != &::google::protobuf::internal::kEmptyString) {
    delete servtime_;
  }
  if (this != default_instance_) {
  }
}

void ACKThranHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKThranHeart& ACKThranHeart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKThranHeart* ACKThranHeart::default_instance_ = NULL;

ACKThranHeart* ACKThranHeart::New() const {
  return new ACKThranHeart;
}

void ACKThranHeart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servtime()) {
      if (servtime_ != &::google::protobuf::internal::kEmptyString) {
        servtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKThranHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ServTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKThranHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ServTime = 1;
  if (has_servtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servtime(), output);
  }
  
}

int ACKThranHeart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ServTime = 1;
    if (has_servtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servtime());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKThranHeart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKThranHeart*>(&from));
}

void ACKThranHeart::MergeFrom(const ACKThranHeart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servtime()) {
      set_servtime(from.servtime());
    }
  }
}

void ACKThranHeart::CopyFrom(const ACKThranHeart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKThranHeart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ACKThranHeart::Swap(ACKThranHeart* other) {
  if (other != this) {
    std::swap(servtime_, other->servtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKThranHeart::GetTypeName() const {
  return "ACKThranHeart";
}


// ===================================================================

#ifndef _MSC_VER
const int SinaApiInfo::kApiTypeFieldNumber;
const int SinaApiInfo::kRetValueFieldNumber;
const int SinaApiInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

SinaApiInfo::SinaApiInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SinaApiInfo::InitAsDefaultInstance() {
}

SinaApiInfo::SinaApiInfo(const SinaApiInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SinaApiInfo::SharedCtor() {
  _cached_size_ = 0;
  apitype_ = 0;
  retvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinaApiInfo::~SinaApiInfo() {
  SharedDtor();
}

void SinaApiInfo::SharedDtor() {
  if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete retvalue_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SinaApiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SinaApiInfo& SinaApiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

SinaApiInfo* SinaApiInfo::default_instance_ = NULL;

SinaApiInfo* SinaApiInfo::New() const {
  return new SinaApiInfo;
}

void SinaApiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apitype_ = 0;
    if (has_retvalue()) {
      if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
        retvalue_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SinaApiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ApiType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apitype_)));
          set_has_apitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RetValue;
        break;
      }
      
      // required string RetValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserId;
        break;
      }
      
      // optional string UserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SinaApiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ApiType = 1;
  if (has_apitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apitype(), output);
  }
  
  // required string RetValue = 2;
  if (has_retvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->retvalue(), output);
  }
  
  // optional string UserId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
}

int SinaApiInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ApiType = 1;
    if (has_apitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apitype());
    }
    
    // required string RetValue = 2;
    if (has_retvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retvalue());
    }
    
    // optional string UserId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinaApiInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SinaApiInfo*>(&from));
}

void SinaApiInfo::MergeFrom(const SinaApiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apitype()) {
      set_apitype(from.apitype());
    }
    if (from.has_retvalue()) {
      set_retvalue(from.retvalue());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
}

void SinaApiInfo::CopyFrom(const SinaApiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinaApiInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SinaApiInfo::Swap(SinaApiInfo* other) {
  if (other != this) {
    std::swap(apitype_, other->apitype_);
    std::swap(retvalue_, other->retvalue_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SinaApiInfo::GetTypeName() const {
  return "SinaApiInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SinaApiRet::kRetResultFieldNumber;
const int SinaApiRet::kApiTypeFieldNumber;
const int SinaApiRet::kRetValueFieldNumber;
#endif  // !_MSC_VER

SinaApiRet::SinaApiRet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SinaApiRet::InitAsDefaultInstance() {
}

SinaApiRet::SinaApiRet(const SinaApiRet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SinaApiRet::SharedCtor() {
  _cached_size_ = 0;
  retresult_ = 0;
  apitype_ = 0;
  retvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinaApiRet::~SinaApiRet() {
  SharedDtor();
}

void SinaApiRet::SharedDtor() {
  if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete retvalue_;
  }
  if (this != default_instance_) {
  }
}

void SinaApiRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SinaApiRet& SinaApiRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

SinaApiRet* SinaApiRet::default_instance_ = NULL;

SinaApiRet* SinaApiRet::New() const {
  return new SinaApiRet;
}

void SinaApiRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retresult_ = 0;
    apitype_ = 0;
    if (has_retvalue()) {
      if (retvalue_ != &::google::protobuf::internal::kEmptyString) {
        retvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SinaApiRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RetResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retresult_)));
          set_has_retresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ApiType;
        break;
      }
      
      // required int32 ApiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ApiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apitype_)));
          set_has_apitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RetValue;
        break;
      }
      
      // optional string RetValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RetValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SinaApiRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RetResult = 1;
  if (has_retresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retresult(), output);
  }
  
  // required int32 ApiType = 2;
  if (has_apitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->apitype(), output);
  }
  
  // optional string RetValue = 3;
  if (has_retvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->retvalue(), output);
  }
  
}

int SinaApiRet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RetResult = 1;
    if (has_retresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retresult());
    }
    
    // required int32 ApiType = 2;
    if (has_apitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apitype());
    }
    
    // optional string RetValue = 3;
    if (has_retvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retvalue());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinaApiRet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SinaApiRet*>(&from));
}

void SinaApiRet::MergeFrom(const SinaApiRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retresult()) {
      set_retresult(from.retresult());
    }
    if (from.has_apitype()) {
      set_apitype(from.apitype());
    }
    if (from.has_retvalue()) {
      set_retvalue(from.retvalue());
    }
  }
}

void SinaApiRet::CopyFrom(const SinaApiRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinaApiRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SinaApiRet::Swap(SinaApiRet* other) {
  if (other != this) {
    std::swap(retresult_, other->retresult_);
    std::swap(apitype_, other->apitype_);
    std::swap(retvalue_, other->retvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SinaApiRet::GetTypeName() const {
  return "SinaApiRet";
}


// ===================================================================

#ifndef _MSC_VER
const int OGRoomInfo::kRoomIdFieldNumber;
const int OGRoomInfo::kRoomRankFieldNumber;
const int OGRoomInfo::kRoomIpFieldNumber;
const int OGRoomInfo::kRoomPortFieldNumber;
const int OGRoomInfo::kRoomStatusFieldNumber;
const int OGRoomInfo::kRoomMinGoldFieldNumber;
const int OGRoomInfo::kRoomMaxGoldFieldNumber;
const int OGRoomInfo::kRoomMinPlayFieldNumber;
const int OGRoomInfo::kRoomTypeFieldNumber;
const int OGRoomInfo::kServerTypeFieldNumber;
const int OGRoomInfo::kDescriptionFieldNumber;
const int OGRoomInfo::kRoomNameFieldNumber;
#endif  // !_MSC_VER

OGRoomInfo::OGRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OGRoomInfo::InitAsDefaultInstance() {
}

OGRoomInfo::OGRoomInfo(const OGRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OGRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roommingold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roommaxgold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomminplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGRoomInfo::~OGRoomInfo() {
  SharedDtor();
}

void OGRoomInfo::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomrank_ != &::google::protobuf::internal::kEmptyString) {
    delete roomrank_;
  }
  if (roomip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomip_;
  }
  if (roomport_ != &::google::protobuf::internal::kEmptyString) {
    delete roomport_;
  }
  if (roomstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete roomstatus_;
  }
  if (roommingold_ != &::google::protobuf::internal::kEmptyString) {
    delete roommingold_;
  }
  if (roommaxgold_ != &::google::protobuf::internal::kEmptyString) {
    delete roommaxgold_;
  }
  if (roomminplay_ != &::google::protobuf::internal::kEmptyString) {
    delete roomminplay_;
  }
  if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
    delete roomtype_;
  }
  if (servertype_ != &::google::protobuf::internal::kEmptyString) {
    delete servertype_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

void OGRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OGRoomInfo& OGRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

OGRoomInfo* OGRoomInfo::default_instance_ = NULL;

OGRoomInfo* OGRoomInfo::New() const {
  return new OGRoomInfo;
}

void OGRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_roomrank()) {
      if (roomrank_ != &::google::protobuf::internal::kEmptyString) {
        roomrank_->clear();
      }
    }
    if (has_roomip()) {
      if (roomip_ != &::google::protobuf::internal::kEmptyString) {
        roomip_->clear();
      }
    }
    if (has_roomport()) {
      if (roomport_ != &::google::protobuf::internal::kEmptyString) {
        roomport_->clear();
      }
    }
    if (has_roomstatus()) {
      if (roomstatus_ != &::google::protobuf::internal::kEmptyString) {
        roomstatus_->clear();
      }
    }
    if (has_roommingold()) {
      if (roommingold_ != &::google::protobuf::internal::kEmptyString) {
        roommingold_->clear();
      }
    }
    if (has_roommaxgold()) {
      if (roommaxgold_ != &::google::protobuf::internal::kEmptyString) {
        roommaxgold_->clear();
      }
    }
    if (has_roomminplay()) {
      if (roomminplay_ != &::google::protobuf::internal::kEmptyString) {
        roomminplay_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
        roomtype_->clear();
      }
    }
    if (has_servertype()) {
      if (servertype_ != &::google::protobuf::internal::kEmptyString) {
        servertype_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OGRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string RoomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomRank;
        break;
      }
      
      // required string RoomRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoomIp;
        break;
      }
      
      // required string RoomIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomPort;
        break;
      }
      
      // required string RoomPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomStatus;
        break;
      }
      
      // required string RoomStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RoomMinGold;
        break;
      }
      
      // required string RoomMinGold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMinGold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roommingold()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RoomMaxGold;
        break;
      }
      
      // required string RoomMaxGold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMaxGold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roommaxgold()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoomMinPlay;
        break;
      }
      
      // required string RoomMinPlay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMinPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomminplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_RoomType;
        break;
      }
      
      // optional string RoomType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ServerType;
        break;
      }
      
      // optional string ServerType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Description;
        break;
      }
      
      // optional string Description = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }
  
  // required string RoomRank = 2;
  if (has_roomrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomrank(), output);
  }
  
  // required string RoomIp = 3;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomip(), output);
  }
  
  // required string RoomPort = 4;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomport(), output);
  }
  
  // required string RoomStatus = 5;
  if (has_roomstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomstatus(), output);
  }
  
  // required string RoomMinGold = 6;
  if (has_roommingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->roommingold(), output);
  }
  
  // required string RoomMaxGold = 7;
  if (has_roommaxgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->roommaxgold(), output);
  }
  
  // required string RoomMinPlay = 8;
  if (has_roomminplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->roomminplay(), output);
  }
  
  // optional string RoomType = 9;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->roomtype(), output);
  }
  
  // optional string ServerType = 10;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->servertype(), output);
  }
  
  // optional string Description = 11;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->description(), output);
  }
  
  // optional string RoomName = 12;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->roomname(), output);
  }
  
}

int OGRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }
    
    // required string RoomRank = 2;
    if (has_roomrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomrank());
    }
    
    // required string RoomIp = 3;
    if (has_roomip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }
    
    // required string RoomPort = 4;
    if (has_roomport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomport());
    }
    
    // required string RoomStatus = 5;
    if (has_roomstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomstatus());
    }
    
    // required string RoomMinGold = 6;
    if (has_roommingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roommingold());
    }
    
    // required string RoomMaxGold = 7;
    if (has_roommaxgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roommaxgold());
    }
    
    // required string RoomMinPlay = 8;
    if (has_roomminplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomminplay());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string RoomType = 9;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }
    
    // optional string ServerType = 10;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertype());
    }
    
    // optional string Description = 11;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional string RoomName = 12;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OGRoomInfo*>(&from));
}

void OGRoomInfo::MergeFrom(const OGRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomrank()) {
      set_roomrank(from.roomrank());
    }
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
    if (from.has_roomstatus()) {
      set_roomstatus(from.roomstatus());
    }
    if (from.has_roommingold()) {
      set_roommingold(from.roommingold());
    }
    if (from.has_roommaxgold()) {
      set_roommaxgold(from.roommaxgold());
    }
    if (from.has_roomminplay()) {
      set_roomminplay(from.roomminplay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
  }
}

void OGRoomInfo::CopyFrom(const OGRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void OGRoomInfo::Swap(OGRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomrank_, other->roomrank_);
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(roomstatus_, other->roomstatus_);
    std::swap(roommingold_, other->roommingold_);
    std::swap(roommaxgold_, other->roommaxgold_);
    std::swap(roomminplay_, other->roomminplay_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(servertype_, other->servertype_);
    std::swap(description_, other->description_);
    std::swap(roomname_, other->roomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OGRoomInfo::GetTypeName() const {
  return "OGRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int OGThranMatchInfo::kMatchIDFieldNumber;
const int OGThranMatchInfo::kMatchNameFieldNumber;
const int OGThranMatchInfo::kAwardNameFieldNumber;
const int OGThranMatchInfo::kAwardSumFieldNumber;
const int OGThranMatchInfo::kMatchTermFieldNumber;
const int OGThranMatchInfo::kHumanLimitFieldNumber;
const int OGThranMatchInfo::kMatchHumanSumFieldNumber;
const int OGThranMatchInfo::kMatchTypeFieldNumber;
const int OGThranMatchInfo::kMatchIntervalFieldNumber;
const int OGThranMatchInfo::kMatchPrizeFieldNumber;
const int OGThranMatchInfo::kMatchProcessFieldNumber;
const int OGThranMatchInfo::kMatchDateFieldNumber;
const int OGThranMatchInfo::kMatchFeeFieldNumber;
const int OGThranMatchInfo::kMatchAreaFieldNumber;
const int OGThranMatchInfo::kDescriptionFieldNumber;
#endif  // !_MSC_VER

OGThranMatchInfo::OGThranMatchInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OGThranMatchInfo::InitAsDefaultInstance() {
}

OGThranMatchInfo::OGThranMatchInfo(const OGThranMatchInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OGThranMatchInfo::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardsum_ = 0;
  matchterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  humanlimit_ = 0;
  matchhumansum_ = 0;
  matchtype_ = 0;
  matchinterval_ = 0;
  matchprize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchprocess_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchfee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matcharea_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGThranMatchInfo::~OGThranMatchInfo() {
  SharedDtor();
}

void OGThranMatchInfo::SharedDtor() {
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchname_;
  }
  if (awardname_ != &::google::protobuf::internal::kEmptyString) {
    delete awardname_;
  }
  if (matchterm_ != &::google::protobuf::internal::kEmptyString) {
    delete matchterm_;
  }
  if (matchprize_ != &::google::protobuf::internal::kEmptyString) {
    delete matchprize_;
  }
  if (matchprocess_ != &::google::protobuf::internal::kEmptyString) {
    delete matchprocess_;
  }
  if (matchdate_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdate_;
  }
  if (matchfee_ != &::google::protobuf::internal::kEmptyString) {
    delete matchfee_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void OGThranMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OGThranMatchInfo& OGThranMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

OGThranMatchInfo* OGThranMatchInfo::default_instance_ = NULL;

OGThranMatchInfo* OGThranMatchInfo::New() const {
  return new OGThranMatchInfo;
}

void OGThranMatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    if (has_matchname()) {
      if (matchname_ != &::google::protobuf::internal::kEmptyString) {
        matchname_->clear();
      }
    }
    if (has_awardname()) {
      if (awardname_ != &::google::protobuf::internal::kEmptyString) {
        awardname_->clear();
      }
    }
    awardsum_ = 0;
    if (has_matchterm()) {
      if (matchterm_ != &::google::protobuf::internal::kEmptyString) {
        matchterm_->clear();
      }
    }
    humanlimit_ = 0;
    matchhumansum_ = 0;
    matchtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matchinterval_ = 0;
    if (has_matchprize()) {
      if (matchprize_ != &::google::protobuf::internal::kEmptyString) {
        matchprize_->clear();
      }
    }
    if (has_matchprocess()) {
      if (matchprocess_ != &::google::protobuf::internal::kEmptyString) {
        matchprocess_->clear();
      }
    }
    if (has_matchdate()) {
      if (matchdate_ != &::google::protobuf::internal::kEmptyString) {
        matchdate_->clear();
      }
    }
    if (has_matchfee()) {
      if (matchfee_ != &::google::protobuf::internal::kEmptyString) {
        matchfee_->clear();
      }
    }
    matcharea_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OGThranMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MatchID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MatchName;
        break;
      }
      
      // required string MatchName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AwardName;
        break;
      }
      
      // optional string AwardName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardSum;
        break;
      }
      
      // optional int32 AwardSum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardsum_)));
          set_has_awardsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MatchTerm;
        break;
      }
      
      // optional string MatchTerm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchTerm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchterm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HumanLimit;
        break;
      }
      
      // optional int32 HumanLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HumanLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &humanlimit_)));
          set_has_humanlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MatchHumanSum;
        break;
      }
      
      // optional int32 MatchHumanSum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchHumanSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchhumansum_)));
          set_has_matchhumansum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MatchType;
        break;
      }
      
      // optional int32 MatchType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MatchInterval;
        break;
      }
      
      // optional int32 MatchInterval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchinterval_)));
          set_has_matchinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatchPrize;
        break;
      }
      
      // optional string MatchPrize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchPrize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchprize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_MatchProcess;
        break;
      }
      
      // optional string MatchProcess = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchprocess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_MatchDate;
        break;
      }
      
      // optional string MatchDate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_MatchFee;
        break;
      }
      
      // optional string MatchFee = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchFee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchfee()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_MatchArea;
        break;
      }
      
      // optional int32 MatchArea = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matcharea_)));
          set_has_matcharea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Description;
        break;
      }
      
      // optional string Description = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGThranMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MatchID = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }
  
  // required string MatchName = 2;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->matchname(), output);
  }
  
  // optional string AwardName = 3;
  if (has_awardname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->awardname(), output);
  }
  
  // optional int32 AwardSum = 4;
  if (has_awardsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardsum(), output);
  }
  
  // optional string MatchTerm = 5;
  if (has_matchterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->matchterm(), output);
  }
  
  // optional int32 HumanLimit = 6;
  if (has_humanlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->humanlimit(), output);
  }
  
  // optional int32 MatchHumanSum = 7;
  if (has_matchhumansum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->matchhumansum(), output);
  }
  
  // optional int32 MatchType = 8;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->matchtype(), output);
  }
  
  // optional int32 MatchInterval = 9;
  if (has_matchinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->matchinterval(), output);
  }
  
  // optional string MatchPrize = 10;
  if (has_matchprize()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->matchprize(), output);
  }
  
  // optional string MatchProcess = 11;
  if (has_matchprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->matchprocess(), output);
  }
  
  // optional string MatchDate = 12;
  if (has_matchdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->matchdate(), output);
  }
  
  // optional string MatchFee = 13;
  if (has_matchfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->matchfee(), output);
  }
  
  // optional int32 MatchArea = 14;
  if (has_matcharea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->matcharea(), output);
  }
  
  // optional string Description = 15;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->description(), output);
  }
  
}

int OGThranMatchInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MatchID = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }
    
    // required string MatchName = 2;
    if (has_matchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchname());
    }
    
    // optional string AwardName = 3;
    if (has_awardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardname());
    }
    
    // optional int32 AwardSum = 4;
    if (has_awardsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardsum());
    }
    
    // optional string MatchTerm = 5;
    if (has_matchterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchterm());
    }
    
    // optional int32 HumanLimit = 6;
    if (has_humanlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->humanlimit());
    }
    
    // optional int32 MatchHumanSum = 7;
    if (has_matchhumansum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchhumansum());
    }
    
    // optional int32 MatchType = 8;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MatchInterval = 9;
    if (has_matchinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchinterval());
    }
    
    // optional string MatchPrize = 10;
    if (has_matchprize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchprize());
    }
    
    // optional string MatchProcess = 11;
    if (has_matchprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchprocess());
    }
    
    // optional string MatchDate = 12;
    if (has_matchdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchdate());
    }
    
    // optional string MatchFee = 13;
    if (has_matchfee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchfee());
    }
    
    // optional int32 MatchArea = 14;
    if (has_matcharea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matcharea());
    }
    
    // optional string Description = 15;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGThranMatchInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OGThranMatchInfo*>(&from));
}

void OGThranMatchInfo::MergeFrom(const OGThranMatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_matchname()) {
      set_matchname(from.matchname());
    }
    if (from.has_awardname()) {
      set_awardname(from.awardname());
    }
    if (from.has_awardsum()) {
      set_awardsum(from.awardsum());
    }
    if (from.has_matchterm()) {
      set_matchterm(from.matchterm());
    }
    if (from.has_humanlimit()) {
      set_humanlimit(from.humanlimit());
    }
    if (from.has_matchhumansum()) {
      set_matchhumansum(from.matchhumansum());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchinterval()) {
      set_matchinterval(from.matchinterval());
    }
    if (from.has_matchprize()) {
      set_matchprize(from.matchprize());
    }
    if (from.has_matchprocess()) {
      set_matchprocess(from.matchprocess());
    }
    if (from.has_matchdate()) {
      set_matchdate(from.matchdate());
    }
    if (from.has_matchfee()) {
      set_matchfee(from.matchfee());
    }
    if (from.has_matcharea()) {
      set_matcharea(from.matcharea());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
}

void OGThranMatchInfo::CopyFrom(const OGThranMatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGThranMatchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OGThranMatchInfo::Swap(OGThranMatchInfo* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(matchname_, other->matchname_);
    std::swap(awardname_, other->awardname_);
    std::swap(awardsum_, other->awardsum_);
    std::swap(matchterm_, other->matchterm_);
    std::swap(humanlimit_, other->humanlimit_);
    std::swap(matchhumansum_, other->matchhumansum_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(matchinterval_, other->matchinterval_);
    std::swap(matchprize_, other->matchprize_);
    std::swap(matchprocess_, other->matchprocess_);
    std::swap(matchdate_, other->matchdate_);
    std::swap(matchfee_, other->matchfee_);
    std::swap(matcharea_, other->matcharea_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OGThranMatchInfo::GetTypeName() const {
  return "OGThranMatchInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ThranRoomInfo::kGameIDFieldNumber;
const int ThranRoomInfo::kGroupIDFieldNumber;
const int ThranRoomInfo::kRoomIDFieldNumber;
const int ThranRoomInfo::kMaxPlayerFieldNumber;
const int ThranRoomInfo::kRoomIPFieldNumber;
const int ThranRoomInfo::kRoomPortFieldNumber;
const int ThranRoomInfo::kContextFieldNumber;
const int ThranRoomInfo::kCurPlayerFieldNumber;
const int ThranRoomInfo::kRoomStateFieldNumber;
const int ThranRoomInfo::kIsLockFieldNumber;
const int ThranRoomInfo::kThranRoomItemsFieldNumber;
#endif  // !_MSC_VER

ThranRoomInfo::ThranRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ThranRoomInfo::InitAsDefaultInstance() {
}

ThranRoomInfo::ThranRoomInfo(const ThranRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ThranRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  groupid_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxplayer_ = 0;
  roomip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomport_ = 0;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curplayer_ = 0;
  roomstate_ = 0;
  islock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThranRoomInfo::~ThranRoomInfo() {
  SharedDtor();
}

void ThranRoomInfo::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomip_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void ThranRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ThranRoomInfo& ThranRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ThranRoomInfo* ThranRoomInfo::default_instance_ = NULL;

ThranRoomInfo* ThranRoomInfo::New() const {
  return new ThranRoomInfo;
}

void ThranRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    groupid_ = 0;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    maxplayer_ = 0;
    if (has_roomip()) {
      if (roomip_ != &::google::protobuf::internal::kEmptyString) {
        roomip_->clear();
      }
    }
    roomport_ = 0;
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    curplayer_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roomstate_ = 0;
    islock_ = 0;
  }
  thranroomitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ThranRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }
      
      // optional int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoomID;
        break;
      }
      
      // optional bytes RoomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxPlayer;
        break;
      }
      
      // optional int32 MaxPlayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayer_)));
          set_has_maxplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomIP;
        break;
      }
      
      // optional string RoomIP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoomPort;
        break;
      }
      
      // optional int32 RoomPort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomport_)));
          set_has_roomport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Context;
        break;
      }
      
      // optional bytes Context = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CurPlayer;
        break;
      }
      
      // optional int32 CurPlayer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curplayer_)));
          set_has_curplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RoomState;
        break;
      }
      
      // optional int32 RoomState = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomstate_)));
          set_has_roomstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsLock;
        break;
      }
      
      // optional int32 IsLock = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ThranRoomItems;
        break;
      }
      
      // repeated .ThranRoomInfo ThranRoomItems = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThranRoomItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thranroomitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ThranRoomItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThranRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }
  
  // optional int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }
  
  // optional bytes RoomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->roomid(), output);
  }
  
  // optional int32 MaxPlayer = 4;
  if (has_maxplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplayer(), output);
  }
  
  // optional string RoomIP = 5;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomip(), output);
  }
  
  // optional int32 RoomPort = 6;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomport(), output);
  }
  
  // optional bytes Context = 7;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->context(), output);
  }
  
  // optional int32 CurPlayer = 8;
  if (has_curplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curplayer(), output);
  }
  
  // optional int32 RoomState = 9;
  if (has_roomstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roomstate(), output);
  }
  
  // optional int32 IsLock = 10 [default = 0];
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->islock(), output);
  }
  
  // repeated .ThranRoomInfo ThranRoomItems = 11;
  for (int i = 0; i < this->thranroomitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->thranroomitems(i), output);
  }
  
}

int ThranRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
    // optional bytes RoomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }
    
    // optional int32 MaxPlayer = 4;
    if (has_maxplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayer());
    }
    
    // optional string RoomIP = 5;
    if (has_roomip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }
    
    // optional int32 RoomPort = 6;
    if (has_roomport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomport());
    }
    
    // optional bytes Context = 7;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }
    
    // optional int32 CurPlayer = 8;
    if (has_curplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curplayer());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 RoomState = 9;
    if (has_roomstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomstate());
    }
    
    // optional int32 IsLock = 10 [default = 0];
    if (has_islock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islock());
    }
    
  }
  // repeated .ThranRoomInfo ThranRoomItems = 11;
  total_size += 1 * this->thranroomitems_size();
  for (int i = 0; i < this->thranroomitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thranroomitems(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThranRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ThranRoomInfo*>(&from));
}

void ThranRoomInfo::MergeFrom(const ThranRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  thranroomitems_.MergeFrom(from.thranroomitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_maxplayer()) {
      set_maxplayer(from.maxplayer());
    }
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_curplayer()) {
      set_curplayer(from.curplayer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomstate()) {
      set_roomstate(from.roomstate());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
  }
}

void ThranRoomInfo::CopyFrom(const ThranRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThranRoomInfo::IsInitialized() const {
  
  return true;
}

void ThranRoomInfo::Swap(ThranRoomInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(groupid_, other->groupid_);
    std::swap(roomid_, other->roomid_);
    std::swap(maxplayer_, other->maxplayer_);
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(context_, other->context_);
    std::swap(curplayer_, other->curplayer_);
    std::swap(roomstate_, other->roomstate_);
    std::swap(islock_, other->islock_);
    thranroomitems_.Swap(&other->thranroomitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ThranRoomInfo::GetTypeName() const {
  return "ThranRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ThranJSSInfo::kRoomIPFieldNumber;
const int ThranJSSInfo::kRoomPortFieldNumber;
const int ThranJSSInfo::kRemarkFieldNumber;
#endif  // !_MSC_VER

ThranJSSInfo::ThranJSSInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ThranJSSInfo::InitAsDefaultInstance() {
}

ThranJSSInfo::ThranJSSInfo(const ThranJSSInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ThranJSSInfo::SharedCtor() {
  _cached_size_ = 0;
  roomip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThranJSSInfo::~ThranJSSInfo() {
  SharedDtor();
}

void ThranJSSInfo::SharedDtor() {
  if (roomip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomip_;
  }
  if (roomport_ != &::google::protobuf::internal::kEmptyString) {
    delete roomport_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void ThranJSSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ThranJSSInfo& ThranJSSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ThranJSSInfo* ThranJSSInfo::default_instance_ = NULL;

ThranJSSInfo* ThranJSSInfo::New() const {
  return new ThranJSSInfo;
}

void ThranJSSInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomip()) {
      if (roomip_ != &::google::protobuf::internal::kEmptyString) {
        roomip_->clear();
      }
    }
    if (has_roomport()) {
      if (roomport_ != &::google::protobuf::internal::kEmptyString) {
        roomport_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ThranJSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RoomIP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomPort;
        break;
      }
      
      // optional string RoomPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Remark;
        break;
      }
      
      // optional string Remark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThranJSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string RoomIP = 1;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomip(), output);
  }
  
  // optional string RoomPort = 2;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomport(), output);
  }
  
  // optional string Remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remark(), output);
  }
  
}

int ThranJSSInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoomIP = 1;
    if (has_roomip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }
    
    // optional string RoomPort = 2;
    if (has_roomport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomport());
    }
    
    // optional string Remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThranJSSInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ThranJSSInfo*>(&from));
}

void ThranJSSInfo::MergeFrom(const ThranJSSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
}

void ThranJSSInfo::CopyFrom(const ThranJSSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThranJSSInfo::IsInitialized() const {
  
  return true;
}

void ThranJSSInfo::Swap(ThranJSSInfo* other) {
  if (other != this) {
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ThranJSSInfo::GetTypeName() const {
  return "ThranJSSInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int OGBulletinInfo::kTitleFieldNumber;
const int OGBulletinInfo::kContentFieldNumber;
#endif  // !_MSC_VER

OGBulletinInfo::OGBulletinInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OGBulletinInfo::InitAsDefaultInstance() {
}

OGBulletinInfo::OGBulletinInfo(const OGBulletinInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OGBulletinInfo::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGBulletinInfo::~OGBulletinInfo() {
  SharedDtor();
}

void OGBulletinInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGBulletinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OGBulletinInfo& OGBulletinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

OGBulletinInfo* OGBulletinInfo::default_instance_ = NULL;

OGBulletinInfo* OGBulletinInfo::New() const {
  return new OGBulletinInfo;
}

void OGBulletinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OGBulletinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }
      
      // optional bytes Content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGBulletinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes Title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->title(), output);
  }
  
  // optional bytes Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }
  
}

int OGBulletinInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // optional bytes Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGBulletinInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OGBulletinInfo*>(&from));
}

void OGBulletinInfo::MergeFrom(const OGBulletinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void OGBulletinInfo::CopyFrom(const OGBulletinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGBulletinInfo::IsInitialized() const {
  
  return true;
}

void OGBulletinInfo::Swap(OGBulletinInfo* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OGBulletinInfo::GetTypeName() const {
  return "OGBulletinInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int REQQuickConn::kUserNameFieldNumber;
const int REQQuickConn::kPwdFieldNumber;
const int REQQuickConn::kSecureIDFieldNumber;
const int REQQuickConn::kComeFromIDFieldNumber;
const int REQQuickConn::kChannelIDFieldNumber;
const int REQQuickConn::kGameIdFieldNumber;
const int REQQuickConn::kTokenFieldNumber;
const int REQQuickConn::kRoomAdapteFieldNumber;
const int REQQuickConn::kLoginTypeFieldNumber;
const int REQQuickConn::kCurVersionFieldNumber;
const int REQQuickConn::kSmallVersionFieldNumber;
const int REQQuickConn::kResolutionIDFieldNumber;
const int REQQuickConn::kLanguageIDFieldNumber;
const int REQQuickConn::kScreenSizeFieldNumber;
const int REQQuickConn::kThirdDigitalNameFieldNumber;
const int REQQuickConn::kThirdkeyFieldNumber;
const int REQQuickConn::kThirdAppIdFieldNumber;
const int REQQuickConn::kPackageFieldNumber;
#endif  // !_MSC_VER

REQQuickConn::REQQuickConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void REQQuickConn::InitAsDefaultInstance() {
}

REQQuickConn::REQQuickConn(const REQQuickConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void REQQuickConn::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comefromid_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomadapte_ = 0;
  logintype_ = 0;
  curversion_ = 0;
  smallversion_ = 0;
  resolutionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screensize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thirddigitalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thirdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thirdappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQQuickConn::~REQQuickConn() {
  SharedDtor();
}

void REQQuickConn::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (secureid_ != &::google::protobuf::internal::kEmptyString) {
    delete secureid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (resolutionid_ != &::google::protobuf::internal::kEmptyString) {
    delete resolutionid_;
  }
  if (languageid_ != &::google::protobuf::internal::kEmptyString) {
    delete languageid_;
  }
  if (screensize_ != &::google::protobuf::internal::kEmptyString) {
    delete screensize_;
  }
  if (thirddigitalname_ != &::google::protobuf::internal::kEmptyString) {
    delete thirddigitalname_;
  }
  if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdkey_;
  }
  if (thirdappid_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdappid_;
  }
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (this != default_instance_) {
  }
}

void REQQuickConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const REQQuickConn& REQQuickConn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

REQQuickConn* REQQuickConn::default_instance_ = NULL;

REQQuickConn* REQQuickConn::New() const {
  return new REQQuickConn;
}

void REQQuickConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_secureid()) {
      if (secureid_ != &::google::protobuf::internal::kEmptyString) {
        secureid_->clear();
      }
    }
    comefromid_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    gameid_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    roomadapte_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logintype_ = 0;
    curversion_ = 0;
    smallversion_ = 0;
    if (has_resolutionid()) {
      if (resolutionid_ != &::google::protobuf::internal::kEmptyString) {
        resolutionid_->clear();
      }
    }
    if (has_languageid()) {
      if (languageid_ != &::google::protobuf::internal::kEmptyString) {
        languageid_->clear();
      }
    }
    if (has_screensize()) {
      if (screensize_ != &::google::protobuf::internal::kEmptyString) {
        screensize_->clear();
      }
    }
    if (has_thirddigitalname()) {
      if (thirddigitalname_ != &::google::protobuf::internal::kEmptyString) {
        thirddigitalname_->clear();
      }
    }
    if (has_thirdkey()) {
      if (thirdkey_ != &::google::protobuf::internal::kEmptyString) {
        thirdkey_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_thirdappid()) {
      if (thirdappid_ != &::google::protobuf::internal::kEmptyString) {
        thirdappid_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kEmptyString) {
        package_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool REQQuickConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pwd;
        break;
      }
      
      // optional string Pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SecureID;
        break;
      }
      
      // optional string SecureID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ComeFromID;
        break;
      }
      
      // required int32 ComeFromID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComeFromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ChannelID;
        break;
      }
      
      // required string ChannelID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GameId;
        break;
      }
      
      // required int32 GameId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }
      
      // required string token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RoomAdapte;
        break;
      }
      
      // optional int32 RoomAdapte = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomAdapte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomadapte_)));
          set_has_roomadapte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LoginType;
        break;
      }
      
      // optional int32 LoginType = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CurVersion;
        break;
      }
      
      // required int32 CurVersion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curversion_)));
          set_has_curversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_smallVersion;
        break;
      }
      
      // optional int32 smallVersion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallversion_)));
          set_has_smallversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ResolutionID;
        break;
      }
      
      // required string ResolutionID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResolutionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_LanguageID;
        break;
      }
      
      // optional string LanguageID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LanguageID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languageid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ScreenSize;
        break;
      }
      
      // optional string ScreenSize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScreenSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screensize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ThirdDigitalName;
        break;
      }
      
      // optional string ThirdDigitalName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThirdDigitalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirddigitalname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Thirdkey;
        break;
      }
      
      // optional string Thirdkey = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Thirdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ThirdAppId;
        break;
      }
      
      // optional string ThirdAppId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThirdAppId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdappid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Package;
        break;
      }
      
      // optional string Package = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQQuickConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }
  
  // optional string Pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // optional string SecureID = 3;
  if (has_secureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->secureid(), output);
  }
  
  // required int32 ComeFromID = 4;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->comefromid(), output);
  }
  
  // required string ChannelID = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channelid(), output);
  }
  
  // required int32 GameId = 6;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gameid(), output);
  }
  
  // required string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->token(), output);
  }
  
  // optional int32 RoomAdapte = 8 [default = 0];
  if (has_roomadapte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roomadapte(), output);
  }
  
  // optional int32 LoginType = 9 [default = 0];
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->logintype(), output);
  }
  
  // required int32 CurVersion = 10;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->curversion(), output);
  }
  
  // optional int32 smallVersion = 11;
  if (has_smallversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->smallversion(), output);
  }
  
  // required string ResolutionID = 12;
  if (has_resolutionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->resolutionid(), output);
  }
  
  // optional string LanguageID = 13;
  if (has_languageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->languageid(), output);
  }
  
  // optional string ScreenSize = 14;
  if (has_screensize()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->screensize(), output);
  }
  
  // optional string ThirdDigitalName = 15;
  if (has_thirddigitalname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->thirddigitalname(), output);
  }
  
  // optional string Thirdkey = 16;
  if (has_thirdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->thirdkey(), output);
  }
  
  // optional string ThirdAppId = 17;
  if (has_thirdappid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->thirdappid(), output);
  }
  
  // optional string Package = 18;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->package(), output);
  }
  
}

int REQQuickConn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }
    
    // optional string Pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional string SecureID = 3;
    if (has_secureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secureid());
    }
    
    // required int32 ComeFromID = 4;
    if (has_comefromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // required string ChannelID = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 GameId = 6;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional int32 RoomAdapte = 8 [default = 0];
    if (has_roomadapte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomadapte());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LoginType = 9 [default = 0];
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }
    
    // required int32 CurVersion = 10;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curversion());
    }
    
    // optional int32 smallVersion = 11;
    if (has_smallversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallversion());
    }
    
    // required string ResolutionID = 12;
    if (has_resolutionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionid());
    }
    
    // optional string LanguageID = 13;
    if (has_languageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languageid());
    }
    
    // optional string ScreenSize = 14;
    if (has_screensize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screensize());
    }
    
    // optional string ThirdDigitalName = 15;
    if (has_thirddigitalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirddigitalname());
    }
    
    // optional string Thirdkey = 16;
    if (has_thirdkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdkey());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string ThirdAppId = 17;
    if (has_thirdappid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdappid());
    }
    
    // optional string Package = 18;
    if (has_package()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQQuickConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const REQQuickConn*>(&from));
}

void REQQuickConn::MergeFrom(const REQQuickConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_secureid()) {
      set_secureid(from.secureid());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_roomadapte()) {
      set_roomadapte(from.roomadapte());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_curversion()) {
      set_curversion(from.curversion());
    }
    if (from.has_smallversion()) {
      set_smallversion(from.smallversion());
    }
    if (from.has_resolutionid()) {
      set_resolutionid(from.resolutionid());
    }
    if (from.has_languageid()) {
      set_languageid(from.languageid());
    }
    if (from.has_screensize()) {
      set_screensize(from.screensize());
    }
    if (from.has_thirddigitalname()) {
      set_thirddigitalname(from.thirddigitalname());
    }
    if (from.has_thirdkey()) {
      set_thirdkey(from.thirdkey());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_thirdappid()) {
      set_thirdappid(from.thirdappid());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
  }
}

void REQQuickConn::CopyFrom(const REQQuickConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQQuickConn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000a78) != 0x00000a78) return false;
  
  return true;
}

void REQQuickConn::Swap(REQQuickConn* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(pwd_, other->pwd_);
    std::swap(secureid_, other->secureid_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gameid_, other->gameid_);
    std::swap(token_, other->token_);
    std::swap(roomadapte_, other->roomadapte_);
    std::swap(logintype_, other->logintype_);
    std::swap(curversion_, other->curversion_);
    std::swap(smallversion_, other->smallversion_);
    std::swap(resolutionid_, other->resolutionid_);
    std::swap(languageid_, other->languageid_);
    std::swap(screensize_, other->screensize_);
    std::swap(thirddigitalname_, other->thirddigitalname_);
    std::swap(thirdkey_, other->thirdkey_);
    std::swap(thirdappid_, other->thirdappid_);
    std::swap(package_, other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string REQQuickConn::GetTypeName() const {
  return "REQQuickConn";
}


// ===================================================================

#ifndef _MSC_VER
const int ACKQuickConn::kAckResultFieldNumber;
const int ACKQuickConn::kUserNameFieldNumber;
const int ACKQuickConn::kRoleNameFieldNumber;
const int ACKQuickConn::kYuanBaoCntFieldNumber;
const int ACKQuickConn::kCoinCntFieldNumber;
const int ACKQuickConn::kRoomListFieldNumber;
const int ACKQuickConn::kMatchRoomListFieldNumber;
const int ACKQuickConn::kCertFieldNumber;
const int ACKQuickConn::kCertNoCertFieldNumber;
const int ACKQuickConn::kCurVersionFieldNumber;
const int ACKQuickConn::kPlayEnableFieldNumber;
const int ACKQuickConn::kDownloadUrlFieldNumber;
const int ACKQuickConn::kIfPreserveFieldNumber;
const int ACKQuickConn::kPreserveMsgFieldNumber;
const int ACKQuickConn::kDownloadReasionFieldNumber;
const int ACKQuickConn::kGameIdFieldNumber;
const int ACKQuickConn::kJssListFieldNumber;
const int ACKQuickConn::kIfSearchFieldNumber;
const int ACKQuickConn::kBulletinListFieldNumber;
const int ACKQuickConn::kVersionInfoFieldNumber;
const int ACKQuickConn::kMatchSvrListFieldNumber;
const int ACKQuickConn::kSexFieldNumber;
const int ACKQuickConn::kRoomSvrListFieldNumber;
const int ACKQuickConn::kDdzActiveFieldNumber;
const int ACKQuickConn::kMsgUrlFieldNumber;
const int ACKQuickConn::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ACKQuickConn::ACKQuickConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ACKQuickConn::InitAsDefaultInstance() {
}

ACKQuickConn::ACKQuickConn(const ACKQuickConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ACKQuickConn::SharedCtor() {
  _cached_size_ = 0;
  ackresult_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yuanbaocnt_ = 0;
  coincnt_ = GOOGLE_LONGLONG(0);
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  certnocert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curversion_ = 0;
  playenable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifpreserve_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preservemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadreasion_ = 0;
  gameid_ = 0;
  ifsearch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  ddzactive_ = 0;
  msgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKQuickConn::~ACKQuickConn() {
  SharedDtor();
}

void ACKQuickConn::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (certnocert_ != &::google::protobuf::internal::kEmptyString) {
    delete certnocert_;
  }
  if (playenable_ != &::google::protobuf::internal::kEmptyString) {
    delete playenable_;
  }
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (ifpreserve_ != &::google::protobuf::internal::kEmptyString) {
    delete ifpreserve_;
  }
  if (preservemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete preservemsg_;
  }
  if (ifsearch_ != &::google::protobuf::internal::kEmptyString) {
    delete ifsearch_;
  }
  if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
    delete versioninfo_;
  }
  if (msgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete msgurl_;
  }
  if (this != default_instance_) {
  }
}

void ACKQuickConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ACKQuickConn& ACKQuickConn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThranConn_2eproto();  return *default_instance_;
}

ACKQuickConn* ACKQuickConn::default_instance_ = NULL;

ACKQuickConn* ACKQuickConn::New() const {
  return new ACKQuickConn;
}

void ACKQuickConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ackresult_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    yuanbaocnt_ = 0;
    coincnt_ = GOOGLE_LONGLONG(0);
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_certnocert()) {
      if (certnocert_ != &::google::protobuf::internal::kEmptyString) {
        certnocert_->clear();
      }
    }
    curversion_ = 0;
    if (has_playenable()) {
      if (playenable_ != &::google::protobuf::internal::kEmptyString) {
        playenable_->clear();
      }
    }
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    if (has_ifpreserve()) {
      if (ifpreserve_ != &::google::protobuf::internal::kEmptyString) {
        ifpreserve_->clear();
      }
    }
    if (has_preservemsg()) {
      if (preservemsg_ != &::google::protobuf::internal::kEmptyString) {
        preservemsg_->clear();
      }
    }
    downloadreasion_ = 0;
    gameid_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_ifsearch()) {
      if (ifsearch_ != &::google::protobuf::internal::kEmptyString) {
        ifsearch_->clear();
      }
    }
    if (has_versioninfo()) {
      if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
        versioninfo_->clear();
      }
    }
    sex_ = 0;
    ddzactive_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_msgurl()) {
      if (msgurl_ != &::google::protobuf::internal::kEmptyString) {
        msgurl_->clear();
      }
    }
    errorcode_ = 0;
  }
  roomlist_.Clear();
  matchroomlist_.Clear();
  jsslist_.Clear();
  bulletinlist_.Clear();
  matchsvrlist_.Clear();
  roomsvrlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ACKQuickConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackresult_)));
          set_has_ackresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }
      
      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleName;
        break;
      }
      
      // required string RoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_YuanBaoCnt;
        break;
      }
      
      // required int32 YuanBaoCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YuanBaoCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yuanbaocnt_)));
          set_has_yuanbaocnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CoinCnt;
        break;
      }
      
      // required int64 CoinCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coincnt_)));
          set_has_coincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RoomList;
        break;
      }
      
      // repeated .OGRoomInfo RoomList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RoomList;
        if (input->ExpectTag(58)) goto parse_MatchRoomList;
        break;
      }
      
      // repeated .OGThranMatchInfo MatchRoomList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchRoomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchroomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_MatchRoomList;
        if (input->ExpectTag(66)) goto parse_Cert;
        break;
      }
      
      // optional bytes Cert = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CertNoCert;
        break;
      }
      
      // optional bytes CertNoCert = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertNoCert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certnocert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CurVersion;
        break;
      }
      
      // required int32 CurVersion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curversion_)));
          set_has_curversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PlayEnable;
        break;
      }
      
      // required string PlayEnable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playenable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DownloadUrl;
        break;
      }
      
      // required string DownloadUrl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DownloadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_IfPreserve;
        break;
      }
      
      // optional string IfPreserve = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IfPreserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifpreserve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_PreserveMsg;
        break;
      }
      
      // optional string PreserveMsg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PreserveMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preservemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_DownloadReasion;
        break;
      }
      
      // optional int32 DownloadReasion = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DownloadReasion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downloadreasion_)));
          set_has_downloadreasion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_GameId;
        break;
      }
      
      // optional int32 GameId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_JssList;
        break;
      }
      
      // repeated .ThranJSSInfo JssList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JssList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jsslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_JssList;
        if (input->ExpectTag(146)) goto parse_IfSearch;
        break;
      }
      
      // optional string IfSearch = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IfSearch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifsearch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_BulletinList;
        break;
      }
      
      // repeated .OGBulletinInfo BulletinList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletinList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletinlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_BulletinList;
        if (input->ExpectTag(162)) goto parse_VersionInfo;
        break;
      }
      
      // optional string VersionInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VersionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_MatchSvrList;
        break;
      }
      
      // repeated .OGRoomInfo MatchSvrList = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchSvrList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchsvrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_MatchSvrList;
        if (input->ExpectTag(176)) goto parse_Sex;
        break;
      }
      
      // optional int32 Sex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_RoomSvrList;
        break;
      }
      
      // repeated .OGRoomInfo RoomSvrList = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomSvrList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomsvrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_RoomSvrList;
        if (input->ExpectTag(192)) goto parse_DdzActive;
        break;
      }
      
      // optional int32 DdzActive = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DdzActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ddzactive_)));
          set_has_ddzactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_MsgUrl;
        break;
      }
      
      // optional string MsgUrl = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKQuickConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AckResult = 1;
  if (has_ackresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ackresult(), output);
  }
  
  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required string RoleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  // required int32 YuanBaoCnt = 4;
  if (has_yuanbaocnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yuanbaocnt(), output);
  }
  
  // required int64 CoinCnt = 5;
  if (has_coincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->coincnt(), output);
  }
  
  // repeated .OGRoomInfo RoomList = 6;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->roomlist(i), output);
  }
  
  // repeated .OGThranMatchInfo MatchRoomList = 7;
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->matchroomlist(i), output);
  }
  
  // optional bytes Cert = 8;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->cert(), output);
  }
  
  // optional bytes CertNoCert = 9;
  if (has_certnocert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->certnocert(), output);
  }
  
  // required int32 CurVersion = 10;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->curversion(), output);
  }
  
  // required string PlayEnable = 11;
  if (has_playenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->playenable(), output);
  }
  
  // required string DownloadUrl = 12;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->downloadurl(), output);
  }
  
  // optional string IfPreserve = 13;
  if (has_ifpreserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ifpreserve(), output);
  }
  
  // optional string PreserveMsg = 14;
  if (has_preservemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->preservemsg(), output);
  }
  
  // optional int32 DownloadReasion = 15;
  if (has_downloadreasion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->downloadreasion(), output);
  }
  
  // optional int32 GameId = 16;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gameid(), output);
  }
  
  // repeated .ThranJSSInfo JssList = 17;
  for (int i = 0; i < this->jsslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->jsslist(i), output);
  }
  
  // optional string IfSearch = 18;
  if (has_ifsearch()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->ifsearch(), output);
  }
  
  // repeated .OGBulletinInfo BulletinList = 19;
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->bulletinlist(i), output);
  }
  
  // optional string VersionInfo = 20;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->versioninfo(), output);
  }
  
  // repeated .OGRoomInfo MatchSvrList = 21;
  for (int i = 0; i < this->matchsvrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->matchsvrlist(i), output);
  }
  
  // optional int32 Sex = 22;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->sex(), output);
  }
  
  // repeated .OGRoomInfo RoomSvrList = 23;
  for (int i = 0; i < this->roomsvrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->roomsvrlist(i), output);
  }
  
  // optional int32 DdzActive = 24 [default = 0];
  if (has_ddzactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ddzactive(), output);
  }
  
  // optional string MsgUrl = 25;
  if (has_msgurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->msgurl(), output);
  }
  
  // optional int32 ErrorCode = 26 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->errorcode(), output);
  }
  
}

int ACKQuickConn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AckResult = 1;
    if (has_ackresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackresult());
    }
    
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string RoleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 YuanBaoCnt = 4;
    if (has_yuanbaocnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yuanbaocnt());
    }
    
    // required int64 CoinCnt = 5;
    if (has_coincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coincnt());
    }
    
    // optional bytes Cert = 8;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes CertNoCert = 9;
    if (has_certnocert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certnocert());
    }
    
    // required int32 CurVersion = 10;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curversion());
    }
    
    // required string PlayEnable = 11;
    if (has_playenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playenable());
    }
    
    // required string DownloadUrl = 12;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }
    
    // optional string IfPreserve = 13;
    if (has_ifpreserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifpreserve());
    }
    
    // optional string PreserveMsg = 14;
    if (has_preservemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preservemsg());
    }
    
    // optional int32 DownloadReasion = 15;
    if (has_downloadreasion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downloadreasion());
    }
    
    // optional int32 GameId = 16;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string IfSearch = 18;
    if (has_ifsearch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifsearch());
    }
    
    // optional string VersionInfo = 20;
    if (has_versioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versioninfo());
    }
    
    // optional int32 Sex = 22;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 DdzActive = 24 [default = 0];
    if (has_ddzactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ddzactive());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string MsgUrl = 25;
    if (has_msgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgurl());
    }
    
    // optional int32 ErrorCode = 26 [default = 0];
    if (has_errorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }
    
  }
  // repeated .OGRoomInfo RoomList = 6;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  // repeated .OGThranMatchInfo MatchRoomList = 7;
  total_size += 1 * this->matchroomlist_size();
  for (int i = 0; i < this->matchroomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchroomlist(i));
  }
  
  // repeated .ThranJSSInfo JssList = 17;
  total_size += 2 * this->jsslist_size();
  for (int i = 0; i < this->jsslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jsslist(i));
  }
  
  // repeated .OGBulletinInfo BulletinList = 19;
  total_size += 2 * this->bulletinlist_size();
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletinlist(i));
  }
  
  // repeated .OGRoomInfo MatchSvrList = 21;
  total_size += 2 * this->matchsvrlist_size();
  for (int i = 0; i < this->matchsvrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchsvrlist(i));
  }
  
  // repeated .OGRoomInfo RoomSvrList = 23;
  total_size += 2 * this->roomsvrlist_size();
  for (int i = 0; i < this->roomsvrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomsvrlist(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKQuickConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ACKQuickConn*>(&from));
}

void ACKQuickConn::MergeFrom(const ACKQuickConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  matchroomlist_.MergeFrom(from.matchroomlist_);
  jsslist_.MergeFrom(from.jsslist_);
  bulletinlist_.MergeFrom(from.bulletinlist_);
  matchsvrlist_.MergeFrom(from.matchsvrlist_);
  roomsvrlist_.MergeFrom(from.roomsvrlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackresult()) {
      set_ackresult(from.ackresult());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_yuanbaocnt()) {
      set_yuanbaocnt(from.yuanbaocnt());
    }
    if (from.has_coincnt()) {
      set_coincnt(from.coincnt());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_certnocert()) {
      set_certnocert(from.certnocert());
    }
    if (from.has_curversion()) {
      set_curversion(from.curversion());
    }
    if (from.has_playenable()) {
      set_playenable(from.playenable());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_ifpreserve()) {
      set_ifpreserve(from.ifpreserve());
    }
    if (from.has_preservemsg()) {
      set_preservemsg(from.preservemsg());
    }
    if (from.has_downloadreasion()) {
      set_downloadreasion(from.downloadreasion());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_ifsearch()) {
      set_ifsearch(from.ifsearch());
    }
    if (from.has_versioninfo()) {
      set_versioninfo(from.versioninfo());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_ddzactive()) {
      set_ddzactive(from.ddzactive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_msgurl()) {
      set_msgurl(from.msgurl());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
}

void ACKQuickConn::CopyFrom(const ACKQuickConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKQuickConn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000e1d) != 0x00000e1d) return false;
  
  for (int i = 0; i < roomlist_size(); i++) {
    if (!this->roomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchroomlist_size(); i++) {
    if (!this->matchroomlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchsvrlist_size(); i++) {
    if (!this->matchsvrlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < roomsvrlist_size(); i++) {
    if (!this->roomsvrlist(i).IsInitialized()) return false;
  }
  return true;
}

void ACKQuickConn::Swap(ACKQuickConn* other) {
  if (other != this) {
    std::swap(ackresult_, other->ackresult_);
    std::swap(username_, other->username_);
    std::swap(rolename_, other->rolename_);
    std::swap(yuanbaocnt_, other->yuanbaocnt_);
    std::swap(coincnt_, other->coincnt_);
    roomlist_.Swap(&other->roomlist_);
    matchroomlist_.Swap(&other->matchroomlist_);
    std::swap(cert_, other->cert_);
    std::swap(certnocert_, other->certnocert_);
    std::swap(curversion_, other->curversion_);
    std::swap(playenable_, other->playenable_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(ifpreserve_, other->ifpreserve_);
    std::swap(preservemsg_, other->preservemsg_);
    std::swap(downloadreasion_, other->downloadreasion_);
    std::swap(gameid_, other->gameid_);
    jsslist_.Swap(&other->jsslist_);
    std::swap(ifsearch_, other->ifsearch_);
    bulletinlist_.Swap(&other->bulletinlist_);
    std::swap(versioninfo_, other->versioninfo_);
    matchsvrlist_.Swap(&other->matchsvrlist_);
    std::swap(sex_, other->sex_);
    roomsvrlist_.Swap(&other->roomsvrlist_);
    std::swap(ddzactive_, other->ddzactive_);
    std::swap(msgurl_, other->msgurl_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ACKQuickConn::GetTypeName() const {
  return "ACKQuickConn";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
