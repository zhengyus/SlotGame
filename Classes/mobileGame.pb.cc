// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mobileGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ReqGameRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGameRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGameLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGameLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* OgRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OgRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JssInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JssInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OgBulletinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OgBulletinInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mobileGame_2eproto() {
  protobuf_AddDesc_mobileGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mobileGame.proto");
  GOOGLE_CHECK(file != NULL);
  ReqGameRegister_descriptor_ = file->message_type(0);
  static const int ReqGameRegister_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, devicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, comefrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, usernameapple_),
  };
  ReqGameRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGameRegister_descriptor_,
      ReqGameRegister::default_instance_,
      ReqGameRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGameRegister));
  AckGameRegister_descriptor_ = file->message_type(1);
  static const int AckGameRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameRegister, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameRegister, errormsg_),
  };
  AckGameRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameRegister_descriptor_,
      AckGameRegister::default_instance_,
      AckGameRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameRegister));
  ReqGameLogin_descriptor_ = file->message_type(2);
  static const int ReqGameLogin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, devicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, comefrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, token_),
  };
  ReqGameLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGameLogin_descriptor_,
      ReqGameLogin::default_instance_,
      ReqGameLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGameLogin));
  AckGameLogin_descriptor_ = file->message_type(3);
  static const int AckGameLogin_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, gamecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, certhaverole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, certnorole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, curversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, playenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, ifstopservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, stopservicemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, downloadreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, matchsvrlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, payjsslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, gamejsslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, ifdisplaysearch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, bulletinlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, versioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, usermsgurl_),
  };
  AckGameLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameLogin_descriptor_,
      AckGameLogin::default_instance_,
      AckGameLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameLogin));
  OgRoomInfo_descriptor_ = file->message_type(4);
  static const int OgRoomInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roommingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roommaxgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomminplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, roomname_),
  };
  OgRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OgRoomInfo_descriptor_,
      OgRoomInfo::default_instance_,
      OgRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OgRoomInfo));
  JssInfo_descriptor_ = file->message_type(5);
  static const int JssInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JssInfo, roomip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JssInfo, roomport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JssInfo, remark_),
  };
  JssInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JssInfo_descriptor_,
      JssInfo::default_instance_,
      JssInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JssInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JssInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JssInfo));
  OgBulletinInfo_descriptor_ = file->message_type(6);
  static const int OgBulletinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgBulletinInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgBulletinInfo, content_),
  };
  OgBulletinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OgBulletinInfo_descriptor_,
      OgBulletinInfo::default_instance_,
      OgBulletinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgBulletinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OgBulletinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OgBulletinInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mobileGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGameRegister_descriptor_, &ReqGameRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameRegister_descriptor_, &AckGameRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGameLogin_descriptor_, &ReqGameLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameLogin_descriptor_, &AckGameLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OgRoomInfo_descriptor_, &OgRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JssInfo_descriptor_, &JssInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OgBulletinInfo_descriptor_, &OgBulletinInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mobileGame_2eproto() {
  delete ReqGameRegister::default_instance_;
  delete ReqGameRegister_reflection_;
  delete AckGameRegister::default_instance_;
  delete AckGameRegister_reflection_;
  delete ReqGameLogin::default_instance_;
  delete ReqGameLogin_reflection_;
  delete AckGameLogin::default_instance_;
  delete AckGameLogin_reflection_;
  delete OgRoomInfo::default_instance_;
  delete OgRoomInfo_reflection_;
  delete JssInfo::default_instance_;
  delete JssInfo_reflection_;
  delete OgBulletinInfo::default_instance_;
  delete OgBulletinInfo_reflection_;
}

void protobuf_AddDesc_mobileGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020mobileGame.proto\"\245\001\n\017ReqGameRegister\022\020"
    "\n\010userName\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\020\n\010te"
    "rminal\030\003 \002(\005\022\024\n\014deviceNumber\030\004 \002(\t\022\016\n\006ga"
    "meId\030\005 \002(\005\022\020\n\010comeFrom\030\006 \002(\t\022\r\n\005token\030\007 "
    "\002(\t\022\025\n\ruserNameApple\030\010 \001(\t\"3\n\017AckGameReg"
    "ister\022\016\n\006result\030\001 \002(\005\022\020\n\010errorMsg\030\002 \001(\t\""
    "\213\001\n\014ReqGameLogin\022\020\n\010userName\030\001 \002(\t\022\020\n\010pa"
    "ssword\030\002 \002(\t\022\020\n\010terminal\030\003 \002(\005\022\024\n\014device"
    "Number\030\004 \002(\t\022\016\n\006gameId\030\005 \002(\005\022\020\n\010comeFrom"
    "\030\006 \002(\t\022\r\n\005token\030\007 \002(\t\"\366\003\n\014AckGameLogin\022\016"
    "\n\006result\030\001 \002(\005\022\020\n\010userName\030\002 \001(\t\022\020\n\010role"
    "Name\030\003 \001(\t\022\014\n\004coin\030\004 \001(\005\022\020\n\010gameCoin\030\005 \001"
    "(\005\022\024\n\014certHaveRole\030\006 \001(\014\022\022\n\ncertNoRole\030\007"
    " \001(\014\022\022\n\ncurVersion\030\010 \001(\005\022\022\n\nplayEnable\030\t"
    " \001(\t\022\023\n\013downloadUrl\030\n \001(\t\022\025\n\rifStopServi"
    "ce\030\013 \001(\t\022\026\n\016stopServiceMsg\030\014 \001(\t\022\026\n\016down"
    "loadReason\030\r \001(\005\022\016\n\006gameId\030\016 \001(\005\022!\n\014matc"
    "hSvrList\030\017 \003(\0132\013.OgRoomInfo\022\034\n\npayJssLis"
    "t\030\020 \003(\0132\010.JssInfo\022\035\n\013gameJssList\030\021 \003(\0132\010"
    ".JssInfo\022\013\n\003sex\030\022 \001(\005\022\027\n\017ifDisplaySearch"
    "\030\023 \001(\t\022%\n\014bulletinList\030\024 \003(\0132\017.OgBulleti"
    "nInfo\022\023\n\013versionInfo\030\025 \001(\t\022\022\n\nuserMsgUrl"
    "\030\026 \001(\t\"\360\001\n\nOgRoomInfo\022\016\n\006RoomId\030\001 \002(\t\022\020\n"
    "\010RoomRank\030\002 \002(\t\022\016\n\006RoomIp\030\003 \002(\t\022\020\n\010RoomP"
    "ort\030\004 \002(\t\022\022\n\nRoomStatus\030\005 \002(\t\022\023\n\013RoomMin"
    "Gold\030\006 \002(\t\022\023\n\013RoomMaxGold\030\007 \002(\t\022\023\n\013RoomM"
    "inPlay\030\010 \002(\t\022\020\n\010RoomType\030\t \001(\t\022\022\n\nServer"
    "Type\030\n \001(\t\022\023\n\013Description\030\013 \001(\t\022\020\n\010RoomN"
    "ame\030\014 \001(\t\";\n\007JssInfo\022\016\n\006roomIP\030\001 \001(\t\022\020\n\010"
    "roomPort\030\002 \001(\t\022\016\n\006remark\030\003 \001(\t\"0\n\016OgBull"
    "etinInfo\022\r\n\005title\030\001 \001(\t\022\017\n\007content\030\002 \001(\t"
    "B8\n*com.lianzhong.mobileplatform.game.pr"
    "otobufB\nMobileGame", 1298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mobileGame.proto", &protobuf_RegisterTypes);
  ReqGameRegister::default_instance_ = new ReqGameRegister();
  AckGameRegister::default_instance_ = new AckGameRegister();
  ReqGameLogin::default_instance_ = new ReqGameLogin();
  AckGameLogin::default_instance_ = new AckGameLogin();
  OgRoomInfo::default_instance_ = new OgRoomInfo();
  JssInfo::default_instance_ = new JssInfo();
  OgBulletinInfo::default_instance_ = new OgBulletinInfo();
  ReqGameRegister::default_instance_->InitAsDefaultInstance();
  AckGameRegister::default_instance_->InitAsDefaultInstance();
  ReqGameLogin::default_instance_->InitAsDefaultInstance();
  AckGameLogin::default_instance_->InitAsDefaultInstance();
  OgRoomInfo::default_instance_->InitAsDefaultInstance();
  JssInfo::default_instance_->InitAsDefaultInstance();
  OgBulletinInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mobileGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mobileGame_2eproto {
  StaticDescriptorInitializer_mobileGame_2eproto() {
    protobuf_AddDesc_mobileGame_2eproto();
  }
} static_descriptor_initializer_mobileGame_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqGameRegister::kUserNameFieldNumber;
const int ReqGameRegister::kPasswordFieldNumber;
const int ReqGameRegister::kTerminalFieldNumber;
const int ReqGameRegister::kDeviceNumberFieldNumber;
const int ReqGameRegister::kGameIdFieldNumber;
const int ReqGameRegister::kComeFromFieldNumber;
const int ReqGameRegister::kTokenFieldNumber;
const int ReqGameRegister::kUserNameAppleFieldNumber;
#endif  // !_MSC_VER

ReqGameRegister::ReqGameRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGameRegister::InitAsDefaultInstance() {
}

ReqGameRegister::ReqGameRegister(const ReqGameRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGameRegister::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  terminal_ = 0;
  devicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  comefrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernameapple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGameRegister::~ReqGameRegister() {
  SharedDtor();
}

void ReqGameRegister::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (devicenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete devicenumber_;
  }
  if (comefrom_ != &::google::protobuf::internal::kEmptyString) {
    delete comefrom_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (usernameapple_ != &::google::protobuf::internal::kEmptyString) {
    delete usernameapple_;
  }
  if (this != default_instance_) {
  }
}

void ReqGameRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGameRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGameRegister_descriptor_;
}

const ReqGameRegister& ReqGameRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

ReqGameRegister* ReqGameRegister::default_instance_ = NULL;

ReqGameRegister* ReqGameRegister::New() const {
  return new ReqGameRegister;
}

void ReqGameRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    terminal_ = 0;
    if (has_devicenumber()) {
      if (devicenumber_ != &::google::protobuf::internal::kEmptyString) {
        devicenumber_->clear();
      }
    }
    gameid_ = 0;
    if (has_comefrom()) {
      if (comefrom_ != &::google::protobuf::internal::kEmptyString) {
        comefrom_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_usernameapple()) {
      if (usernameapple_ != &::google::protobuf::internal::kEmptyString) {
        usernameapple_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGameRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terminal;
        break;
      }
      
      // required int32 terminal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminal_)));
          set_has_terminal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceNumber;
        break;
      }
      
      // required string deviceNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicenumber().data(), this->devicenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comeFrom;
        break;
      }
      
      // required string comeFrom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comeFrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comefrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comefrom().data(), this->comefrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }
      
      // required string token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_userNameApple;
        break;
      }
      
      // optional string userNameApple = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userNameApple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernameapple()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usernameapple().data(), this->usernameapple().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGameRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required int32 terminal = 3;
  if (has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->terminal(), output);
  }
  
  // required string deviceNumber = 4;
  if (has_devicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicenumber(), output);
  }
  
  // required int32 gameId = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }
  
  // required string comeFrom = 6;
  if (has_comefrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comefrom().data(), this->comefrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->comefrom(), output);
  }
  
  // required string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->token(), output);
  }
  
  // optional string userNameApple = 8;
  if (has_usernameapple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernameapple().data(), this->usernameapple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->usernameapple(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGameRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required int32 terminal = 3;
  if (has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->terminal(), target);
  }
  
  // required string deviceNumber = 4;
  if (has_devicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicenumber(), target);
  }
  
  // required int32 gameId = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }
  
  // required string comeFrom = 6;
  if (has_comefrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comefrom().data(), this->comefrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comefrom(), target);
  }
  
  // required string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }
  
  // optional string userNameApple = 8;
  if (has_usernameapple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernameapple().data(), this->usernameapple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->usernameapple(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGameRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required int32 terminal = 3;
    if (has_terminal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terminal());
    }
    
    // required string deviceNumber = 4;
    if (has_devicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicenumber());
    }
    
    // required int32 gameId = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string comeFrom = 6;
    if (has_comefrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comefrom());
    }
    
    // required string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string userNameApple = 8;
    if (has_usernameapple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernameapple());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGameRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGameRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGameRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGameRegister::MergeFrom(const ReqGameRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_terminal()) {
      set_terminal(from.terminal());
    }
    if (from.has_devicenumber()) {
      set_devicenumber(from.devicenumber());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_comefrom()) {
      set_comefrom(from.comefrom());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_usernameapple()) {
      set_usernameapple(from.usernameapple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGameRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGameRegister::CopyFrom(const ReqGameRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ReqGameRegister::Swap(ReqGameRegister* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(terminal_, other->terminal_);
    std::swap(devicenumber_, other->devicenumber_);
    std::swap(gameid_, other->gameid_);
    std::swap(comefrom_, other->comefrom_);
    std::swap(token_, other->token_);
    std::swap(usernameapple_, other->usernameapple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGameRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGameRegister_descriptor_;
  metadata.reflection = ReqGameRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameRegister::kResultFieldNumber;
const int AckGameRegister::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

AckGameRegister::AckGameRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameRegister::InitAsDefaultInstance() {
}

AckGameRegister::AckGameRegister(const AckGameRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameRegister::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameRegister::~AckGameRegister() {
  SharedDtor();
}

void AckGameRegister::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void AckGameRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameRegister_descriptor_;
}

const AckGameRegister& AckGameRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

AckGameRegister* AckGameRegister::default_instance_ = NULL;

AckGameRegister* AckGameRegister::New() const {
  return new AckGameRegister;
}

void AckGameRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string errorMsg = 2;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameRegister::MergeFrom(const AckGameRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameRegister::CopyFrom(const AckGameRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckGameRegister::Swap(AckGameRegister* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameRegister_descriptor_;
  metadata.reflection = AckGameRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGameLogin::kUserNameFieldNumber;
const int ReqGameLogin::kPasswordFieldNumber;
const int ReqGameLogin::kTerminalFieldNumber;
const int ReqGameLogin::kDeviceNumberFieldNumber;
const int ReqGameLogin::kGameIdFieldNumber;
const int ReqGameLogin::kComeFromFieldNumber;
const int ReqGameLogin::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqGameLogin::ReqGameLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGameLogin::InitAsDefaultInstance() {
}

ReqGameLogin::ReqGameLogin(const ReqGameLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGameLogin::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  terminal_ = 0;
  devicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  comefrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGameLogin::~ReqGameLogin() {
  SharedDtor();
}

void ReqGameLogin::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (devicenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete devicenumber_;
  }
  if (comefrom_ != &::google::protobuf::internal::kEmptyString) {
    delete comefrom_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqGameLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGameLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGameLogin_descriptor_;
}

const ReqGameLogin& ReqGameLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

ReqGameLogin* ReqGameLogin::default_instance_ = NULL;

ReqGameLogin* ReqGameLogin::New() const {
  return new ReqGameLogin;
}

void ReqGameLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    terminal_ = 0;
    if (has_devicenumber()) {
      if (devicenumber_ != &::google::protobuf::internal::kEmptyString) {
        devicenumber_->clear();
      }
    }
    gameid_ = 0;
    if (has_comefrom()) {
      if (comefrom_ != &::google::protobuf::internal::kEmptyString) {
        comefrom_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGameLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_terminal;
        break;
      }
      
      // required int32 terminal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminal_)));
          set_has_terminal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceNumber;
        break;
      }
      
      // required string deviceNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicenumber().data(), this->devicenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comeFrom;
        break;
      }
      
      // required string comeFrom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comeFrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comefrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comefrom().data(), this->comefrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }
      
      // required string token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGameLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required int32 terminal = 3;
  if (has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->terminal(), output);
  }
  
  // required string deviceNumber = 4;
  if (has_devicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicenumber(), output);
  }
  
  // required int32 gameId = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }
  
  // required string comeFrom = 6;
  if (has_comefrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comefrom().data(), this->comefrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->comefrom(), output);
  }
  
  // required string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGameLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required int32 terminal = 3;
  if (has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->terminal(), target);
  }
  
  // required string deviceNumber = 4;
  if (has_devicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicenumber(), target);
  }
  
  // required int32 gameId = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }
  
  // required string comeFrom = 6;
  if (has_comefrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comefrom().data(), this->comefrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comefrom(), target);
  }
  
  // required string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGameLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required int32 terminal = 3;
    if (has_terminal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terminal());
    }
    
    // required string deviceNumber = 4;
    if (has_devicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicenumber());
    }
    
    // required int32 gameId = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // required string comeFrom = 6;
    if (has_comefrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comefrom());
    }
    
    // required string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGameLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGameLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGameLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGameLogin::MergeFrom(const ReqGameLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_terminal()) {
      set_terminal(from.terminal());
    }
    if (from.has_devicenumber()) {
      set_devicenumber(from.devicenumber());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_comefrom()) {
      set_comefrom(from.comefrom());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGameLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGameLogin::CopyFrom(const ReqGameLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ReqGameLogin::Swap(ReqGameLogin* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(terminal_, other->terminal_);
    std::swap(devicenumber_, other->devicenumber_);
    std::swap(gameid_, other->gameid_);
    std::swap(comefrom_, other->comefrom_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGameLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGameLogin_descriptor_;
  metadata.reflection = ReqGameLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameLogin::kResultFieldNumber;
const int AckGameLogin::kUserNameFieldNumber;
const int AckGameLogin::kRoleNameFieldNumber;
const int AckGameLogin::kCoinFieldNumber;
const int AckGameLogin::kGameCoinFieldNumber;
const int AckGameLogin::kCertHaveRoleFieldNumber;
const int AckGameLogin::kCertNoRoleFieldNumber;
const int AckGameLogin::kCurVersionFieldNumber;
const int AckGameLogin::kPlayEnableFieldNumber;
const int AckGameLogin::kDownloadUrlFieldNumber;
const int AckGameLogin::kIfStopServiceFieldNumber;
const int AckGameLogin::kStopServiceMsgFieldNumber;
const int AckGameLogin::kDownloadReasonFieldNumber;
const int AckGameLogin::kGameIdFieldNumber;
const int AckGameLogin::kMatchSvrListFieldNumber;
const int AckGameLogin::kPayJssListFieldNumber;
const int AckGameLogin::kGameJssListFieldNumber;
const int AckGameLogin::kSexFieldNumber;
const int AckGameLogin::kIfDisplaySearchFieldNumber;
const int AckGameLogin::kBulletinListFieldNumber;
const int AckGameLogin::kVersionInfoFieldNumber;
const int AckGameLogin::kUserMsgUrlFieldNumber;
#endif  // !_MSC_VER

AckGameLogin::AckGameLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameLogin::InitAsDefaultInstance() {
}

AckGameLogin::AckGameLogin(const AckGameLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coin_ = 0;
  gamecoin_ = 0;
  certhaverole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  certnorole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curversion_ = 0;
  playenable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifstopservice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stopservicemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadreason_ = 0;
  gameid_ = 0;
  sex_ = 0;
  ifdisplaysearch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usermsgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameLogin::~AckGameLogin() {
  SharedDtor();
}

void AckGameLogin::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (certhaverole_ != &::google::protobuf::internal::kEmptyString) {
    delete certhaverole_;
  }
  if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
    delete certnorole_;
  }
  if (playenable_ != &::google::protobuf::internal::kEmptyString) {
    delete playenable_;
  }
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (ifstopservice_ != &::google::protobuf::internal::kEmptyString) {
    delete ifstopservice_;
  }
  if (stopservicemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete stopservicemsg_;
  }
  if (ifdisplaysearch_ != &::google::protobuf::internal::kEmptyString) {
    delete ifdisplaysearch_;
  }
  if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
    delete versioninfo_;
  }
  if (usermsgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete usermsgurl_;
  }
  if (this != default_instance_) {
  }
}

void AckGameLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameLogin_descriptor_;
}

const AckGameLogin& AckGameLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

AckGameLogin* AckGameLogin::default_instance_ = NULL;

AckGameLogin* AckGameLogin::New() const {
  return new AckGameLogin;
}

void AckGameLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    coin_ = 0;
    gamecoin_ = 0;
    if (has_certhaverole()) {
      if (certhaverole_ != &::google::protobuf::internal::kEmptyString) {
        certhaverole_->clear();
      }
    }
    if (has_certnorole()) {
      if (certnorole_ != &::google::protobuf::internal::kEmptyString) {
        certnorole_->clear();
      }
    }
    curversion_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playenable()) {
      if (playenable_ != &::google::protobuf::internal::kEmptyString) {
        playenable_->clear();
      }
    }
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    if (has_ifstopservice()) {
      if (ifstopservice_ != &::google::protobuf::internal::kEmptyString) {
        ifstopservice_->clear();
      }
    }
    if (has_stopservicemsg()) {
      if (stopservicemsg_ != &::google::protobuf::internal::kEmptyString) {
        stopservicemsg_->clear();
      }
    }
    downloadreason_ = 0;
    gameid_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    sex_ = 0;
    if (has_ifdisplaysearch()) {
      if (ifdisplaysearch_ != &::google::protobuf::internal::kEmptyString) {
        ifdisplaysearch_->clear();
      }
    }
    if (has_versioninfo()) {
      if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
        versioninfo_->clear();
      }
    }
    if (has_usermsgurl()) {
      if (usermsgurl_ != &::google::protobuf::internal::kEmptyString) {
        usermsgurl_->clear();
      }
    }
  }
  matchsvrlist_.Clear();
  payjsslist_.Clear();
  gamejsslist_.Clear();
  bulletinlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }
      
      // optional string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameCoin;
        break;
      }
      
      // optional int32 gameCoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecoin_)));
          set_has_gamecoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_certHaveRole;
        break;
      }
      
      // optional bytes certHaveRole = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certHaveRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certhaverole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_certNoRole;
        break;
      }
      
      // optional bytes certNoRole = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certNoRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certnorole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curVersion;
        break;
      }
      
      // optional int32 curVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curversion_)));
          set_has_curversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playEnable;
        break;
      }
      
      // optional string playEnable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playenable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playenable().data(), this->playenable().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_downloadUrl;
        break;
      }
      
      // optional string downloadUrl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ifStopService;
        break;
      }
      
      // optional string ifStopService = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ifStopService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifstopservice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ifstopservice().data(), this->ifstopservice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stopServiceMsg;
        break;
      }
      
      // optional string stopServiceMsg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stopServiceMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stopservicemsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stopservicemsg().data(), this->stopservicemsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_downloadReason;
        break;
      }
      
      // optional int32 downloadReason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downloadreason_)));
          set_has_downloadreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_matchSvrList;
        break;
      }
      
      // repeated .OgRoomInfo matchSvrList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchSvrList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchsvrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_matchSvrList;
        if (input->ExpectTag(130)) goto parse_payJssList;
        break;
      }
      
      // repeated .JssInfo payJssList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payJssList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_payjsslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_payJssList;
        if (input->ExpectTag(138)) goto parse_gameJssList;
        break;
      }
      
      // repeated .JssInfo gameJssList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameJssList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamejsslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_gameJssList;
        if (input->ExpectTag(144)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ifDisplaySearch;
        break;
      }
      
      // optional string ifDisplaySearch = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ifDisplaySearch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifdisplaysearch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ifdisplaysearch().data(), this->ifdisplaysearch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bulletinList;
        break;
      }
      
      // repeated .OgBulletinInfo bulletinList = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletinList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletinlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bulletinList;
        if (input->ExpectTag(170)) goto parse_versionInfo;
        break;
      }
      
      // optional string versionInfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versioninfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->versioninfo().data(), this->versioninfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_userMsgUrl;
        break;
      }
      
      // optional string userMsgUrl = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userMsgUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermsgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usermsgurl().data(), this->usermsgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  // optional int32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }
  
  // optional int32 gameCoin = 5;
  if (has_gamecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gamecoin(), output);
  }
  
  // optional bytes certHaveRole = 6;
  if (has_certhaverole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->certhaverole(), output);
  }
  
  // optional bytes certNoRole = 7;
  if (has_certnorole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->certnorole(), output);
  }
  
  // optional int32 curVersion = 8;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curversion(), output);
  }
  
  // optional string playEnable = 9;
  if (has_playenable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playenable().data(), this->playenable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->playenable(), output);
  }
  
  // optional string downloadUrl = 10;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->downloadurl(), output);
  }
  
  // optional string ifStopService = 11;
  if (has_ifstopservice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifstopservice().data(), this->ifstopservice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ifstopservice(), output);
  }
  
  // optional string stopServiceMsg = 12;
  if (has_stopservicemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stopservicemsg().data(), this->stopservicemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->stopservicemsg(), output);
  }
  
  // optional int32 downloadReason = 13;
  if (has_downloadreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->downloadreason(), output);
  }
  
  // optional int32 gameId = 14;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gameid(), output);
  }
  
  // repeated .OgRoomInfo matchSvrList = 15;
  for (int i = 0; i < this->matchsvrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->matchsvrlist(i), output);
  }
  
  // repeated .JssInfo payJssList = 16;
  for (int i = 0; i < this->payjsslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->payjsslist(i), output);
  }
  
  // repeated .JssInfo gameJssList = 17;
  for (int i = 0; i < this->gamejsslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->gamejsslist(i), output);
  }
  
  // optional int32 sex = 18;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sex(), output);
  }
  
  // optional string ifDisplaySearch = 19;
  if (has_ifdisplaysearch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifdisplaysearch().data(), this->ifdisplaysearch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->ifdisplaysearch(), output);
  }
  
  // repeated .OgBulletinInfo bulletinList = 20;
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bulletinlist(i), output);
  }
  
  // optional string versionInfo = 21;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->versioninfo(), output);
  }
  
  // optional string userMsgUrl = 22;
  if (has_usermsgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usermsgurl().data(), this->usermsgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->usermsgurl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }
  
  // optional int32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }
  
  // optional int32 gameCoin = 5;
  if (has_gamecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gamecoin(), target);
  }
  
  // optional bytes certHaveRole = 6;
  if (has_certhaverole()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->certhaverole(), target);
  }
  
  // optional bytes certNoRole = 7;
  if (has_certnorole()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->certnorole(), target);
  }
  
  // optional int32 curVersion = 8;
  if (has_curversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curversion(), target);
  }
  
  // optional string playEnable = 9;
  if (has_playenable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playenable().data(), this->playenable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->playenable(), target);
  }
  
  // optional string downloadUrl = 10;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->downloadurl(), target);
  }
  
  // optional string ifStopService = 11;
  if (has_ifstopservice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifstopservice().data(), this->ifstopservice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ifstopservice(), target);
  }
  
  // optional string stopServiceMsg = 12;
  if (has_stopservicemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stopservicemsg().data(), this->stopservicemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->stopservicemsg(), target);
  }
  
  // optional int32 downloadReason = 13;
  if (has_downloadreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->downloadreason(), target);
  }
  
  // optional int32 gameId = 14;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gameid(), target);
  }
  
  // repeated .OgRoomInfo matchSvrList = 15;
  for (int i = 0; i < this->matchsvrlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->matchsvrlist(i), target);
  }
  
  // repeated .JssInfo payJssList = 16;
  for (int i = 0; i < this->payjsslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->payjsslist(i), target);
  }
  
  // repeated .JssInfo gameJssList = 17;
  for (int i = 0; i < this->gamejsslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->gamejsslist(i), target);
  }
  
  // optional int32 sex = 18;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sex(), target);
  }
  
  // optional string ifDisplaySearch = 19;
  if (has_ifdisplaysearch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifdisplaysearch().data(), this->ifdisplaysearch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->ifdisplaysearch(), target);
  }
  
  // repeated .OgBulletinInfo bulletinList = 20;
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bulletinlist(i), target);
  }
  
  // optional string versionInfo = 21;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->versioninfo(), target);
  }
  
  // optional string userMsgUrl = 22;
  if (has_usermsgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usermsgurl().data(), this->usermsgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->usermsgurl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 gameCoin = 5;
    if (has_gamecoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecoin());
    }
    
    // optional bytes certHaveRole = 6;
    if (has_certhaverole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certhaverole());
    }
    
    // optional bytes certNoRole = 7;
    if (has_certnorole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certnorole());
    }
    
    // optional int32 curVersion = 8;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curversion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string playEnable = 9;
    if (has_playenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playenable());
    }
    
    // optional string downloadUrl = 10;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }
    
    // optional string ifStopService = 11;
    if (has_ifstopservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifstopservice());
    }
    
    // optional string stopServiceMsg = 12;
    if (has_stopservicemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stopservicemsg());
    }
    
    // optional int32 downloadReason = 13;
    if (has_downloadreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downloadreason());
    }
    
    // optional int32 gameId = 14;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 sex = 18;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string ifDisplaySearch = 19;
    if (has_ifdisplaysearch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifdisplaysearch());
    }
    
    // optional string versionInfo = 21;
    if (has_versioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versioninfo());
    }
    
    // optional string userMsgUrl = 22;
    if (has_usermsgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermsgurl());
    }
    
  }
  // repeated .OgRoomInfo matchSvrList = 15;
  total_size += 1 * this->matchsvrlist_size();
  for (int i = 0; i < this->matchsvrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchsvrlist(i));
  }
  
  // repeated .JssInfo payJssList = 16;
  total_size += 2 * this->payjsslist_size();
  for (int i = 0; i < this->payjsslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->payjsslist(i));
  }
  
  // repeated .JssInfo gameJssList = 17;
  total_size += 2 * this->gamejsslist_size();
  for (int i = 0; i < this->gamejsslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamejsslist(i));
  }
  
  // repeated .OgBulletinInfo bulletinList = 20;
  total_size += 2 * this->bulletinlist_size();
  for (int i = 0; i < this->bulletinlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletinlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameLogin::MergeFrom(const AckGameLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchsvrlist_.MergeFrom(from.matchsvrlist_);
  payjsslist_.MergeFrom(from.payjsslist_);
  gamejsslist_.MergeFrom(from.gamejsslist_);
  bulletinlist_.MergeFrom(from.bulletinlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_gamecoin()) {
      set_gamecoin(from.gamecoin());
    }
    if (from.has_certhaverole()) {
      set_certhaverole(from.certhaverole());
    }
    if (from.has_certnorole()) {
      set_certnorole(from.certnorole());
    }
    if (from.has_curversion()) {
      set_curversion(from.curversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playenable()) {
      set_playenable(from.playenable());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_ifstopservice()) {
      set_ifstopservice(from.ifstopservice());
    }
    if (from.has_stopservicemsg()) {
      set_stopservicemsg(from.stopservicemsg());
    }
    if (from.has_downloadreason()) {
      set_downloadreason(from.downloadreason());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_ifdisplaysearch()) {
      set_ifdisplaysearch(from.ifdisplaysearch());
    }
    if (from.has_versioninfo()) {
      set_versioninfo(from.versioninfo());
    }
    if (from.has_usermsgurl()) {
      set_usermsgurl(from.usermsgurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameLogin::CopyFrom(const AckGameLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < matchsvrlist_size(); i++) {
    if (!this->matchsvrlist(i).IsInitialized()) return false;
  }
  return true;
}

void AckGameLogin::Swap(AckGameLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(username_, other->username_);
    std::swap(rolename_, other->rolename_);
    std::swap(coin_, other->coin_);
    std::swap(gamecoin_, other->gamecoin_);
    std::swap(certhaverole_, other->certhaverole_);
    std::swap(certnorole_, other->certnorole_);
    std::swap(curversion_, other->curversion_);
    std::swap(playenable_, other->playenable_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(ifstopservice_, other->ifstopservice_);
    std::swap(stopservicemsg_, other->stopservicemsg_);
    std::swap(downloadreason_, other->downloadreason_);
    std::swap(gameid_, other->gameid_);
    matchsvrlist_.Swap(&other->matchsvrlist_);
    payjsslist_.Swap(&other->payjsslist_);
    gamejsslist_.Swap(&other->gamejsslist_);
    std::swap(sex_, other->sex_);
    std::swap(ifdisplaysearch_, other->ifdisplaysearch_);
    bulletinlist_.Swap(&other->bulletinlist_);
    std::swap(versioninfo_, other->versioninfo_);
    std::swap(usermsgurl_, other->usermsgurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameLogin_descriptor_;
  metadata.reflection = AckGameLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OgRoomInfo::kRoomIdFieldNumber;
const int OgRoomInfo::kRoomRankFieldNumber;
const int OgRoomInfo::kRoomIpFieldNumber;
const int OgRoomInfo::kRoomPortFieldNumber;
const int OgRoomInfo::kRoomStatusFieldNumber;
const int OgRoomInfo::kRoomMinGoldFieldNumber;
const int OgRoomInfo::kRoomMaxGoldFieldNumber;
const int OgRoomInfo::kRoomMinPlayFieldNumber;
const int OgRoomInfo::kRoomTypeFieldNumber;
const int OgRoomInfo::kServerTypeFieldNumber;
const int OgRoomInfo::kDescriptionFieldNumber;
const int OgRoomInfo::kRoomNameFieldNumber;
#endif  // !_MSC_VER

OgRoomInfo::OgRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OgRoomInfo::InitAsDefaultInstance() {
}

OgRoomInfo::OgRoomInfo(const OgRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OgRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roommingold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roommaxgold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomminplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OgRoomInfo::~OgRoomInfo() {
  SharedDtor();
}

void OgRoomInfo::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomrank_ != &::google::protobuf::internal::kEmptyString) {
    delete roomrank_;
  }
  if (roomip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomip_;
  }
  if (roomport_ != &::google::protobuf::internal::kEmptyString) {
    delete roomport_;
  }
  if (roomstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete roomstatus_;
  }
  if (roommingold_ != &::google::protobuf::internal::kEmptyString) {
    delete roommingold_;
  }
  if (roommaxgold_ != &::google::protobuf::internal::kEmptyString) {
    delete roommaxgold_;
  }
  if (roomminplay_ != &::google::protobuf::internal::kEmptyString) {
    delete roomminplay_;
  }
  if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
    delete roomtype_;
  }
  if (servertype_ != &::google::protobuf::internal::kEmptyString) {
    delete servertype_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

void OgRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OgRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OgRoomInfo_descriptor_;
}

const OgRoomInfo& OgRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

OgRoomInfo* OgRoomInfo::default_instance_ = NULL;

OgRoomInfo* OgRoomInfo::New() const {
  return new OgRoomInfo;
}

void OgRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_roomrank()) {
      if (roomrank_ != &::google::protobuf::internal::kEmptyString) {
        roomrank_->clear();
      }
    }
    if (has_roomip()) {
      if (roomip_ != &::google::protobuf::internal::kEmptyString) {
        roomip_->clear();
      }
    }
    if (has_roomport()) {
      if (roomport_ != &::google::protobuf::internal::kEmptyString) {
        roomport_->clear();
      }
    }
    if (has_roomstatus()) {
      if (roomstatus_ != &::google::protobuf::internal::kEmptyString) {
        roomstatus_->clear();
      }
    }
    if (has_roommingold()) {
      if (roommingold_ != &::google::protobuf::internal::kEmptyString) {
        roommingold_->clear();
      }
    }
    if (has_roommaxgold()) {
      if (roommaxgold_ != &::google::protobuf::internal::kEmptyString) {
        roommaxgold_->clear();
      }
    }
    if (has_roomminplay()) {
      if (roomminplay_ != &::google::protobuf::internal::kEmptyString) {
        roomminplay_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
        roomtype_->clear();
      }
    }
    if (has_servertype()) {
      if (servertype_ != &::google::protobuf::internal::kEmptyString) {
        servertype_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OgRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string RoomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomRank;
        break;
      }
      
      // required string RoomRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomrank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomrank().data(), this->roomrank().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoomIp;
        break;
      }
      
      // required string RoomIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomip().data(), this->roomip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomPort;
        break;
      }
      
      // required string RoomPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomport().data(), this->roomport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomStatus;
        break;
      }
      
      // required string RoomStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomstatus().data(), this->roomstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RoomMinGold;
        break;
      }
      
      // required string RoomMinGold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMinGold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roommingold()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roommingold().data(), this->roommingold().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RoomMaxGold;
        break;
      }
      
      // required string RoomMaxGold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMaxGold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roommaxgold()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roommaxgold().data(), this->roommaxgold().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoomMinPlay;
        break;
      }
      
      // required string RoomMinPlay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomMinPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomminplay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomminplay().data(), this->roomminplay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_RoomType;
        break;
      }
      
      // optional string RoomType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ServerType;
        break;
      }
      
      // optional string ServerType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servertype().data(), this->servertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Description;
        break;
      }
      
      // optional string Description = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_RoomName;
        break;
      }
      
      // optional string RoomName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OgRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }
  
  // required string RoomRank = 2;
  if (has_roomrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomrank().data(), this->roomrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomrank(), output);
  }
  
  // required string RoomIp = 3;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomip().data(), this->roomip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomip(), output);
  }
  
  // required string RoomPort = 4;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomport().data(), this->roomport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomport(), output);
  }
  
  // required string RoomStatus = 5;
  if (has_roomstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomstatus().data(), this->roomstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomstatus(), output);
  }
  
  // required string RoomMinGold = 6;
  if (has_roommingold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roommingold().data(), this->roommingold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->roommingold(), output);
  }
  
  // required string RoomMaxGold = 7;
  if (has_roommaxgold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roommaxgold().data(), this->roommaxgold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->roommaxgold(), output);
  }
  
  // required string RoomMinPlay = 8;
  if (has_roomminplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomminplay().data(), this->roomminplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->roomminplay(), output);
  }
  
  // optional string RoomType = 9;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->roomtype(), output);
  }
  
  // optional string ServerType = 10;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertype().data(), this->servertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->servertype(), output);
  }
  
  // optional string Description = 11;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->description(), output);
  }
  
  // optional string RoomName = 12;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->roomname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OgRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }
  
  // required string RoomRank = 2;
  if (has_roomrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomrank().data(), this->roomrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomrank(), target);
  }
  
  // required string RoomIp = 3;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomip().data(), this->roomip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomip(), target);
  }
  
  // required string RoomPort = 4;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomport().data(), this->roomport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomport(), target);
  }
  
  // required string RoomStatus = 5;
  if (has_roomstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomstatus().data(), this->roomstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomstatus(), target);
  }
  
  // required string RoomMinGold = 6;
  if (has_roommingold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roommingold().data(), this->roommingold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->roommingold(), target);
  }
  
  // required string RoomMaxGold = 7;
  if (has_roommaxgold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roommaxgold().data(), this->roommaxgold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roommaxgold(), target);
  }
  
  // required string RoomMinPlay = 8;
  if (has_roomminplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomminplay().data(), this->roomminplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->roomminplay(), target);
  }
  
  // optional string RoomType = 9;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->roomtype(), target);
  }
  
  // optional string ServerType = 10;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertype().data(), this->servertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->servertype(), target);
  }
  
  // optional string Description = 11;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->description(), target);
  }
  
  // optional string RoomName = 12;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->roomname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OgRoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }
    
    // required string RoomRank = 2;
    if (has_roomrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomrank());
    }
    
    // required string RoomIp = 3;
    if (has_roomip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }
    
    // required string RoomPort = 4;
    if (has_roomport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomport());
    }
    
    // required string RoomStatus = 5;
    if (has_roomstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomstatus());
    }
    
    // required string RoomMinGold = 6;
    if (has_roommingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roommingold());
    }
    
    // required string RoomMaxGold = 7;
    if (has_roommaxgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roommaxgold());
    }
    
    // required string RoomMinPlay = 8;
    if (has_roomminplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomminplay());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string RoomType = 9;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }
    
    // optional string ServerType = 10;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertype());
    }
    
    // optional string Description = 11;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional string RoomName = 12;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OgRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OgRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OgRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OgRoomInfo::MergeFrom(const OgRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomrank()) {
      set_roomrank(from.roomrank());
    }
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
    if (from.has_roomstatus()) {
      set_roomstatus(from.roomstatus());
    }
    if (from.has_roommingold()) {
      set_roommingold(from.roommingold());
    }
    if (from.has_roommaxgold()) {
      set_roommaxgold(from.roommaxgold());
    }
    if (from.has_roomminplay()) {
      set_roomminplay(from.roomminplay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OgRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OgRoomInfo::CopyFrom(const OgRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OgRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void OgRoomInfo::Swap(OgRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomrank_, other->roomrank_);
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(roomstatus_, other->roomstatus_);
    std::swap(roommingold_, other->roommingold_);
    std::swap(roommaxgold_, other->roommaxgold_);
    std::swap(roomminplay_, other->roomminplay_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(servertype_, other->servertype_);
    std::swap(description_, other->description_);
    std::swap(roomname_, other->roomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OgRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OgRoomInfo_descriptor_;
  metadata.reflection = OgRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JssInfo::kRoomIPFieldNumber;
const int JssInfo::kRoomPortFieldNumber;
const int JssInfo::kRemarkFieldNumber;
#endif  // !_MSC_VER

JssInfo::JssInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JssInfo::InitAsDefaultInstance() {
}

JssInfo::JssInfo(const JssInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JssInfo::SharedCtor() {
  _cached_size_ = 0;
  roomip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JssInfo::~JssInfo() {
  SharedDtor();
}

void JssInfo::SharedDtor() {
  if (roomip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomip_;
  }
  if (roomport_ != &::google::protobuf::internal::kEmptyString) {
    delete roomport_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void JssInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JssInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JssInfo_descriptor_;
}

const JssInfo& JssInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

JssInfo* JssInfo::default_instance_ = NULL;

JssInfo* JssInfo::New() const {
  return new JssInfo;
}

void JssInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomip()) {
      if (roomip_ != &::google::protobuf::internal::kEmptyString) {
        roomip_->clear();
      }
    }
    if (has_roomport()) {
      if (roomport_ != &::google::protobuf::internal::kEmptyString) {
        roomport_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JssInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomIP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomip().data(), this->roomip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomPort;
        break;
      }
      
      // optional string roomPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomport().data(), this->roomport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }
      
      // optional string remark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JssInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roomIP = 1;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomip().data(), this->roomip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomip(), output);
  }
  
  // optional string roomPort = 2;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomport().data(), this->roomport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomport(), output);
  }
  
  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JssInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roomIP = 1;
  if (has_roomip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomip().data(), this->roomip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomip(), target);
  }
  
  // optional string roomPort = 2;
  if (has_roomport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomport().data(), this->roomport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomport(), target);
  }
  
  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JssInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roomIP = 1;
    if (has_roomip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }
    
    // optional string roomPort = 2;
    if (has_roomport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomport());
    }
    
    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JssInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JssInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JssInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JssInfo::MergeFrom(const JssInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JssInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JssInfo::CopyFrom(const JssInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JssInfo::IsInitialized() const {
  
  return true;
}

void JssInfo::Swap(JssInfo* other) {
  if (other != this) {
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JssInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JssInfo_descriptor_;
  metadata.reflection = JssInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OgBulletinInfo::kTitleFieldNumber;
const int OgBulletinInfo::kContentFieldNumber;
#endif  // !_MSC_VER

OgBulletinInfo::OgBulletinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OgBulletinInfo::InitAsDefaultInstance() {
}

OgBulletinInfo::OgBulletinInfo(const OgBulletinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OgBulletinInfo::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OgBulletinInfo::~OgBulletinInfo() {
  SharedDtor();
}

void OgBulletinInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OgBulletinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OgBulletinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OgBulletinInfo_descriptor_;
}

const OgBulletinInfo& OgBulletinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobileGame_2eproto();  return *default_instance_;
}

OgBulletinInfo* OgBulletinInfo::default_instance_ = NULL;

OgBulletinInfo* OgBulletinInfo::New() const {
  return new OgBulletinInfo;
}

void OgBulletinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OgBulletinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OgBulletinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OgBulletinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OgBulletinInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OgBulletinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OgBulletinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OgBulletinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OgBulletinInfo::MergeFrom(const OgBulletinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OgBulletinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OgBulletinInfo::CopyFrom(const OgBulletinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OgBulletinInfo::IsInitialized() const {
  
  return true;
}

void OgBulletinInfo::Swap(OgBulletinInfo* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OgBulletinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OgBulletinInfo_descriptor_;
  metadata.reflection = OgBulletinInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
