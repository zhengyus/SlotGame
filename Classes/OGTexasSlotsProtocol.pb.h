// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OGTexasSlotsProtocol.proto

#ifndef PROTOBUF_OGTexasSlotsProtocol_2eproto__INCLUDED
#define PROTOBUF_OGTexasSlotsProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ourgame {
namespace texasSlots {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();

class OGReqTRLogin1;
class OGAckLinkServer;
class OGReqTRLogin2;
class OGAckRoleLoginMsg;
class OGAckRoleMsg;
class OGAckPetUpdatedMsg;
class OGAckGameServer;
class OGAckRoomList;
class OGAckRoomList_Room;
class OGReqJoinRoom;
class OGAckRoom;
class OGAckRoom_RoomBet;
class OGAckBoss;
class OGReqExitType;
class OGAckExit;
class OGReqStartGame;
class OGReqDoubleGame;
class OGAckGameResult;
class GameToJSupport;
class OGAckDoubleResult;
class OGReqDoubleGetGold;
class OGAckDoubleGetGold;
class GameLoseMoney;
class ReqJP;
class OGAckJP;
class OGAckRoleUpLev;
class OGReqReadDB;
class OGReqPool;
class OGReqMailsToPlayer;
class OGReqAddWhite;
class OGReqWhiteList;
class OGAckWhiteList;
class OGAckWhiteList_White;
class OGReqDelWhite;
class OGReqSelectWhite;
class OGAckSelectWhite;
class OGAckPet;
class OGReqPetList;
class OGAckPetList;
class OGAckPetList_Pet;
class OGReqPetReSet;
class OGReqPetJoinFight;
class OGReqPetChange;
class OGAckPetChange;
class OGReqItemChange;
class OGReqItemChangeData;
class OGAckItemChangeData;
class OGAckItemChangeData_Change;
class OGReqPetChangeData;
class OGAckPetChangeData;
class OGAckPetChangeData_ChangeData;
class OGAckItemChange;
class OGAckPetReSet;
class OGAckPetGridOnList;
class OGAckPetGridOnList_PetGrid;
class OGReqPetGrid;
class OGAckPage;
class OGReqPetFight;
class OGAckPetFightResult;
class OGReqPetFlee;
class OGReqPetGetAward;
class OGAckPetGetAward;
class OGAckPetGetAward_Award;
class OGAckRankList;
class OGAckRankList_Rank;
class OGAckRank;
class OGAckRank_Rank;
class OGReqRank;
class OGReqRankToJS;
class OGReqNotice;
class OGGuangGao;
class OGAckMessage;
class OGAckStopGame;
class OGAckMails;
class OGAckMails_Mail;
class OGReqHandleMails;
class OGReqMails;
class OGAckMail;
class OGAckUnreadMail;
class OGAckItems;
class OGAckItems_Item;
class OGAckShopItemInfo;
class OGAckShopItemInfo_ItemInfo;
class OGReqShopItem;
class OGAckCutItems;
class OGAckCutItems_Item;
class OGAckErrorMsg;
class OGReqBuyItem;
class OGReqNewHandOver;
class OGReqNewHandAward;
class OGAckNewHandAward;
class OGAckPlayerLogot;
class OGAckRankHour;
class OGReqJpRecord;
class OGReqJpStar;
class OGAckJpRecord;
class OGAckJpRecord_JpRecord;
class OGAckLoginJpMsg;
class OGReqLoginGetAward;
class OGAckLoginGetAward;
class OGAckLoginAwardList;
class OGAckLoginAwardList_Award;
class OGReqDoubleJpResult;
class OGAckDoubleJpResult;
class OGAckDoublePlus;
class OGAckDoublePlus_DoublePlus;
class OGReqGetPlayer;
class OGReqChangePutGold;
class OGReqPetReturnAward;
class OGAckPetReturnAward;
class OGReqGetPutGoldAward;
class OGAckReSetFeed;
class OGAckReSetFeed_PlayerFeed;
class OGReqJpStart;
class OGAckJpStart;
class OGReqBindPhone;
class OGAckBindPhone;
class OGReqGetPhoneCode;
class OGAckGetPhoneCode;
class OGReqGetPhoneAward;
class OGAckGetPhoneAward;
class OGAckAddJpNum;
class OGAckJpHall;
class OGAckJpHall_HallContent;
class OGAckAd;
class OGAckLeaveGame;
class OGAckYDFreeTimes;

enum OGAckLinkServer_E_ErrorType {
  OGAckLinkServer_E_ErrorType_ET_UNKNOWN = 0,
  OGAckLinkServer_E_ErrorType_ET_TYPE1 = 1
};
bool OGAckLinkServer_E_ErrorType_IsValid(int value);
const OGAckLinkServer_E_ErrorType OGAckLinkServer_E_ErrorType_E_ErrorType_MIN = OGAckLinkServer_E_ErrorType_ET_UNKNOWN;
const OGAckLinkServer_E_ErrorType OGAckLinkServer_E_ErrorType_E_ErrorType_MAX = OGAckLinkServer_E_ErrorType_ET_TYPE1;
const int OGAckLinkServer_E_ErrorType_E_ErrorType_ARRAYSIZE = OGAckLinkServer_E_ErrorType_E_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_ErrorType_descriptor();
inline const ::std::string& OGAckLinkServer_E_ErrorType_Name(OGAckLinkServer_E_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckLinkServer_E_ErrorType_descriptor(), value);
}
inline bool OGAckLinkServer_E_ErrorType_Parse(
    const ::std::string& name, OGAckLinkServer_E_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckLinkServer_E_ErrorType>(
    OGAckLinkServer_E_ErrorType_descriptor(), name, value);
}
enum OGAckLinkServer_E_TRResult {
  OGAckLinkServer_E_TRResult_ET_SUCCESS = 0,
  OGAckLinkServer_E_TRResult_ET_FAILED = 1
};
bool OGAckLinkServer_E_TRResult_IsValid(int value);
const OGAckLinkServer_E_TRResult OGAckLinkServer_E_TRResult_E_TRResult_MIN = OGAckLinkServer_E_TRResult_ET_SUCCESS;
const OGAckLinkServer_E_TRResult OGAckLinkServer_E_TRResult_E_TRResult_MAX = OGAckLinkServer_E_TRResult_ET_FAILED;
const int OGAckLinkServer_E_TRResult_E_TRResult_ARRAYSIZE = OGAckLinkServer_E_TRResult_E_TRResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_TRResult_descriptor();
inline const ::std::string& OGAckLinkServer_E_TRResult_Name(OGAckLinkServer_E_TRResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckLinkServer_E_TRResult_descriptor(), value);
}
inline bool OGAckLinkServer_E_TRResult_Parse(
    const ::std::string& name, OGAckLinkServer_E_TRResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckLinkServer_E_TRResult>(
    OGAckLinkServer_E_TRResult_descriptor(), name, value);
}
enum OGAckRoleLoginMsg_E_ErrorType {
  OGAckRoleLoginMsg_E_ErrorType_ET_UNKNOWN = 0,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE1 = 1,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE2 = 2,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE3 = 3,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE4 = 4,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE5 = 5,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE6 = 6,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE7 = 7,
  OGAckRoleLoginMsg_E_ErrorType_ET_TYPE8 = 8
};
bool OGAckRoleLoginMsg_E_ErrorType_IsValid(int value);
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_MIN = OGAckRoleLoginMsg_E_ErrorType_ET_UNKNOWN;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_MAX = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE8;
const int OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_ARRAYSIZE = OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_ErrorType_descriptor();
inline const ::std::string& OGAckRoleLoginMsg_E_ErrorType_Name(OGAckRoleLoginMsg_E_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckRoleLoginMsg_E_ErrorType_descriptor(), value);
}
inline bool OGAckRoleLoginMsg_E_ErrorType_Parse(
    const ::std::string& name, OGAckRoleLoginMsg_E_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckRoleLoginMsg_E_ErrorType>(
    OGAckRoleLoginMsg_E_ErrorType_descriptor(), name, value);
}
enum OGAckRoleLoginMsg_E_TRResult {
  OGAckRoleLoginMsg_E_TRResult_ET_SUCCESS = 0,
  OGAckRoleLoginMsg_E_TRResult_ET_FAILED = 1
};
bool OGAckRoleLoginMsg_E_TRResult_IsValid(int value);
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg_E_TRResult_E_TRResult_MIN = OGAckRoleLoginMsg_E_TRResult_ET_SUCCESS;
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg_E_TRResult_E_TRResult_MAX = OGAckRoleLoginMsg_E_TRResult_ET_FAILED;
const int OGAckRoleLoginMsg_E_TRResult_E_TRResult_ARRAYSIZE = OGAckRoleLoginMsg_E_TRResult_E_TRResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_TRResult_descriptor();
inline const ::std::string& OGAckRoleLoginMsg_E_TRResult_Name(OGAckRoleLoginMsg_E_TRResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckRoleLoginMsg_E_TRResult_descriptor(), value);
}
inline bool OGAckRoleLoginMsg_E_TRResult_Parse(
    const ::std::string& name, OGAckRoleLoginMsg_E_TRResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckRoleLoginMsg_E_TRResult>(
    OGAckRoleLoginMsg_E_TRResult_descriptor(), name, value);
}
enum OGAckRoom_E_ErrorType {
  OGAckRoom_E_ErrorType_ET_UNKNOWN = 0,
  OGAckRoom_E_ErrorType_ET_TYPE1 = 1,
  OGAckRoom_E_ErrorType_ET_TYPE2 = 2,
  OGAckRoom_E_ErrorType_ET_TYPE3 = 3,
  OGAckRoom_E_ErrorType_ET_TYPE4 = 4
};
bool OGAckRoom_E_ErrorType_IsValid(int value);
const OGAckRoom_E_ErrorType OGAckRoom_E_ErrorType_E_ErrorType_MIN = OGAckRoom_E_ErrorType_ET_UNKNOWN;
const OGAckRoom_E_ErrorType OGAckRoom_E_ErrorType_E_ErrorType_MAX = OGAckRoom_E_ErrorType_ET_TYPE4;
const int OGAckRoom_E_ErrorType_E_ErrorType_ARRAYSIZE = OGAckRoom_E_ErrorType_E_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckRoom_E_ErrorType_descriptor();
inline const ::std::string& OGAckRoom_E_ErrorType_Name(OGAckRoom_E_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckRoom_E_ErrorType_descriptor(), value);
}
inline bool OGAckRoom_E_ErrorType_Parse(
    const ::std::string& name, OGAckRoom_E_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckRoom_E_ErrorType>(
    OGAckRoom_E_ErrorType_descriptor(), name, value);
}
enum OGAckRoom_E_TRResult {
  OGAckRoom_E_TRResult_ET_SUCCESS = 0,
  OGAckRoom_E_TRResult_ET_FAILED = 1
};
bool OGAckRoom_E_TRResult_IsValid(int value);
const OGAckRoom_E_TRResult OGAckRoom_E_TRResult_E_TRResult_MIN = OGAckRoom_E_TRResult_ET_SUCCESS;
const OGAckRoom_E_TRResult OGAckRoom_E_TRResult_E_TRResult_MAX = OGAckRoom_E_TRResult_ET_FAILED;
const int OGAckRoom_E_TRResult_E_TRResult_ARRAYSIZE = OGAckRoom_E_TRResult_E_TRResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckRoom_E_TRResult_descriptor();
inline const ::std::string& OGAckRoom_E_TRResult_Name(OGAckRoom_E_TRResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckRoom_E_TRResult_descriptor(), value);
}
inline bool OGAckRoom_E_TRResult_Parse(
    const ::std::string& name, OGAckRoom_E_TRResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckRoom_E_TRResult>(
    OGAckRoom_E_TRResult_descriptor(), name, value);
}
enum OGReqExitType_E_MsgType {
  OGReqExitType_E_MsgType_ET_TYPE1 = 1,
  OGReqExitType_E_MsgType_ET_TYPE2 = 2,
  OGReqExitType_E_MsgType_ET_TYPE3 = 3,
  OGReqExitType_E_MsgType_ET_TYPE4 = 4
};
bool OGReqExitType_E_MsgType_IsValid(int value);
const OGReqExitType_E_MsgType OGReqExitType_E_MsgType_E_MsgType_MIN = OGReqExitType_E_MsgType_ET_TYPE1;
const OGReqExitType_E_MsgType OGReqExitType_E_MsgType_E_MsgType_MAX = OGReqExitType_E_MsgType_ET_TYPE4;
const int OGReqExitType_E_MsgType_E_MsgType_ARRAYSIZE = OGReqExitType_E_MsgType_E_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGReqExitType_E_MsgType_descriptor();
inline const ::std::string& OGReqExitType_E_MsgType_Name(OGReqExitType_E_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGReqExitType_E_MsgType_descriptor(), value);
}
inline bool OGReqExitType_E_MsgType_Parse(
    const ::std::string& name, OGReqExitType_E_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGReqExitType_E_MsgType>(
    OGReqExitType_E_MsgType_descriptor(), name, value);
}
enum OGAckExit_E_MsgType {
  OGAckExit_E_MsgType_ET_TYPE1 = 1,
  OGAckExit_E_MsgType_ET_TYPE2 = 2,
  OGAckExit_E_MsgType_ET_TYPE3 = 3,
  OGAckExit_E_MsgType_ET_TYPE4 = 4
};
bool OGAckExit_E_MsgType_IsValid(int value);
const OGAckExit_E_MsgType OGAckExit_E_MsgType_E_MsgType_MIN = OGAckExit_E_MsgType_ET_TYPE1;
const OGAckExit_E_MsgType OGAckExit_E_MsgType_E_MsgType_MAX = OGAckExit_E_MsgType_ET_TYPE4;
const int OGAckExit_E_MsgType_E_MsgType_ARRAYSIZE = OGAckExit_E_MsgType_E_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckExit_E_MsgType_descriptor();
inline const ::std::string& OGAckExit_E_MsgType_Name(OGAckExit_E_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckExit_E_MsgType_descriptor(), value);
}
inline bool OGAckExit_E_MsgType_Parse(
    const ::std::string& name, OGAckExit_E_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckExit_E_MsgType>(
    OGAckExit_E_MsgType_descriptor(), name, value);
}
enum OGReqDoubleGame_E_TIMES {
  OGReqDoubleGame_E_TIMES_ET_TIMES1 = 1,
  OGReqDoubleGame_E_TIMES_ET_TIMES2 = 2,
  OGReqDoubleGame_E_TIMES_ET_TIMES3 = 3,
  OGReqDoubleGame_E_TIMES_ET_TIMES5 = 5
};
bool OGReqDoubleGame_E_TIMES_IsValid(int value);
const OGReqDoubleGame_E_TIMES OGReqDoubleGame_E_TIMES_E_TIMES_MIN = OGReqDoubleGame_E_TIMES_ET_TIMES1;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame_E_TIMES_E_TIMES_MAX = OGReqDoubleGame_E_TIMES_ET_TIMES5;
const int OGReqDoubleGame_E_TIMES_E_TIMES_ARRAYSIZE = OGReqDoubleGame_E_TIMES_E_TIMES_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_TIMES_descriptor();
inline const ::std::string& OGReqDoubleGame_E_TIMES_Name(OGReqDoubleGame_E_TIMES value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGReqDoubleGame_E_TIMES_descriptor(), value);
}
inline bool OGReqDoubleGame_E_TIMES_Parse(
    const ::std::string& name, OGReqDoubleGame_E_TIMES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGReqDoubleGame_E_TIMES>(
    OGReqDoubleGame_E_TIMES_descriptor(), name, value);
}
enum OGReqDoubleGame_E_COLOUR {
  OGReqDoubleGame_E_COLOUR_ET_COLOUR1 = 1,
  OGReqDoubleGame_E_COLOUR_ET_COLOUR2 = 2,
  OGReqDoubleGame_E_COLOUR_ET_COLOUR3 = 3,
  OGReqDoubleGame_E_COLOUR_ET_COLOUR4 = 4,
  OGReqDoubleGame_E_COLOUR_ET_COLOUR5 = 5,
  OGReqDoubleGame_E_COLOUR_ET_COLOUR6 = 6
};
bool OGReqDoubleGame_E_COLOUR_IsValid(int value);
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame_E_COLOUR_E_COLOUR_MIN = OGReqDoubleGame_E_COLOUR_ET_COLOUR1;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame_E_COLOUR_E_COLOUR_MAX = OGReqDoubleGame_E_COLOUR_ET_COLOUR6;
const int OGReqDoubleGame_E_COLOUR_E_COLOUR_ARRAYSIZE = OGReqDoubleGame_E_COLOUR_E_COLOUR_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_COLOUR_descriptor();
inline const ::std::string& OGReqDoubleGame_E_COLOUR_Name(OGReqDoubleGame_E_COLOUR value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGReqDoubleGame_E_COLOUR_descriptor(), value);
}
inline bool OGReqDoubleGame_E_COLOUR_Parse(
    const ::std::string& name, OGReqDoubleGame_E_COLOUR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGReqDoubleGame_E_COLOUR>(
    OGReqDoubleGame_E_COLOUR_descriptor(), name, value);
}
enum OGAckDoubleResult_E_Result {
  OGAckDoubleResult_E_Result_ET_SUCCESS = 0,
  OGAckDoubleResult_E_Result_ET_FAILED = 1
};
bool OGAckDoubleResult_E_Result_IsValid(int value);
const OGAckDoubleResult_E_Result OGAckDoubleResult_E_Result_E_Result_MIN = OGAckDoubleResult_E_Result_ET_SUCCESS;
const OGAckDoubleResult_E_Result OGAckDoubleResult_E_Result_E_Result_MAX = OGAckDoubleResult_E_Result_ET_FAILED;
const int OGAckDoubleResult_E_Result_E_Result_ARRAYSIZE = OGAckDoubleResult_E_Result_E_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckDoubleResult_E_Result_descriptor();
inline const ::std::string& OGAckDoubleResult_E_Result_Name(OGAckDoubleResult_E_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckDoubleResult_E_Result_descriptor(), value);
}
inline bool OGAckDoubleResult_E_Result_Parse(
    const ::std::string& name, OGAckDoubleResult_E_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckDoubleResult_E_Result>(
    OGAckDoubleResult_E_Result_descriptor(), name, value);
}
enum OGAckStopGame_E_Status {
  OGAckStopGame_E_Status_ET_STOPS = 1,
  OGAckStopGame_E_Status_ET_CARRYCAPS = 2
};
bool OGAckStopGame_E_Status_IsValid(int value);
const OGAckStopGame_E_Status OGAckStopGame_E_Status_E_Status_MIN = OGAckStopGame_E_Status_ET_STOPS;
const OGAckStopGame_E_Status OGAckStopGame_E_Status_E_Status_MAX = OGAckStopGame_E_Status_ET_CARRYCAPS;
const int OGAckStopGame_E_Status_E_Status_ARRAYSIZE = OGAckStopGame_E_Status_E_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* OGAckStopGame_E_Status_descriptor();
inline const ::std::string& OGAckStopGame_E_Status_Name(OGAckStopGame_E_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    OGAckStopGame_E_Status_descriptor(), value);
}
inline bool OGAckStopGame_E_Status_Parse(
    const ::std::string& name, OGAckStopGame_E_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OGAckStopGame_E_Status>(
    OGAckStopGame_E_Status_descriptor(), name, value);
}
enum E_TRCardColorType {
  TR_CARD_COLOR_TYPE_DIAMOND = 1,
  TR_CARD_COLOR_TYPE_CLUB = 2,
  TR_CARD_COLOR_TYPE_HEART = 3,
  TR_CARD_COLOR_TYPE_SPADE = 4
};
bool E_TRCardColorType_IsValid(int value);
const E_TRCardColorType E_TRCardColorType_MIN = TR_CARD_COLOR_TYPE_DIAMOND;
const E_TRCardColorType E_TRCardColorType_MAX = TR_CARD_COLOR_TYPE_SPADE;
const int E_TRCardColorType_ARRAYSIZE = E_TRCardColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_TRCardColorType_descriptor();
inline const ::std::string& E_TRCardColorType_Name(E_TRCardColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_TRCardColorType_descriptor(), value);
}
inline bool E_TRCardColorType_Parse(
    const ::std::string& name, E_TRCardColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_TRCardColorType>(
    E_TRCardColorType_descriptor(), name, value);
}
enum E_TRCardNumber {
  TR_CARD_NUMBER_A = 1,
  TR_CARD_NUMBER_2 = 2,
  TR_CARD_NUMBER_3 = 3,
  TR_CARD_NUMBER_4 = 4,
  TR_CARD_NUMBER_5 = 5,
  TR_CARD_NUMBER_6 = 6,
  TR_CARD_NUMBER_7 = 7,
  TR_CARD_NUMBER_8 = 8,
  TR_CARD_NUMBER_9 = 9,
  TR_CARD_NUMBER_10 = 10,
  TR_CARD_NUMBER_J = 11,
  TR_CARD_NUMBER_Q = 12,
  TR_CARD_NUMBER_K = 13
};
bool E_TRCardNumber_IsValid(int value);
const E_TRCardNumber E_TRCardNumber_MIN = TR_CARD_NUMBER_A;
const E_TRCardNumber E_TRCardNumber_MAX = TR_CARD_NUMBER_K;
const int E_TRCardNumber_ARRAYSIZE = E_TRCardNumber_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_TRCardNumber_descriptor();
inline const ::std::string& E_TRCardNumber_Name(E_TRCardNumber value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_TRCardNumber_descriptor(), value);
}
inline bool E_TRCardNumber_Parse(
    const ::std::string& name, E_TRCardNumber* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_TRCardNumber>(
    E_TRCardNumber_descriptor(), name, value);
}
// ===================================================================

class OGReqTRLogin1 : public ::google::protobuf::Message {
 public:
  OGReqTRLogin1();
  virtual ~OGReqTRLogin1();
  
  OGReqTRLogin1(const OGReqTRLogin1& from);
  
  inline OGReqTRLogin1& operator=(const OGReqTRLogin1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqTRLogin1& default_instance();
  
  void Swap(OGReqTRLogin1* other);
  
  // implements Message ----------------------------------------------
  
  OGReqTRLogin1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqTRLogin1& from);
  void MergeFrom(const OGReqTRLogin1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string UserId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqTRLogin1)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqTRLogin1* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLinkServer : public ::google::protobuf::Message {
 public:
  OGAckLinkServer();
  virtual ~OGAckLinkServer();
  
  OGAckLinkServer(const OGAckLinkServer& from);
  
  inline OGAckLinkServer& operator=(const OGAckLinkServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLinkServer& default_instance();
  
  void Swap(OGAckLinkServer* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLinkServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLinkServer& from);
  void MergeFrom(const OGAckLinkServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckLinkServer_E_ErrorType E_ErrorType;
  static const E_ErrorType ET_UNKNOWN = OGAckLinkServer_E_ErrorType_ET_UNKNOWN;
  static const E_ErrorType ET_TYPE1 = OGAckLinkServer_E_ErrorType_ET_TYPE1;
  static inline bool E_ErrorType_IsValid(int value) {
    return OGAckLinkServer_E_ErrorType_IsValid(value);
  }
  static const E_ErrorType E_ErrorType_MIN =
    OGAckLinkServer_E_ErrorType_E_ErrorType_MIN;
  static const E_ErrorType E_ErrorType_MAX =
    OGAckLinkServer_E_ErrorType_E_ErrorType_MAX;
  static const int E_ErrorType_ARRAYSIZE =
    OGAckLinkServer_E_ErrorType_E_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_ErrorType_descriptor() {
    return OGAckLinkServer_E_ErrorType_descriptor();
  }
  static inline const ::std::string& E_ErrorType_Name(E_ErrorType value) {
    return OGAckLinkServer_E_ErrorType_Name(value);
  }
  static inline bool E_ErrorType_Parse(const ::std::string& name,
      E_ErrorType* value) {
    return OGAckLinkServer_E_ErrorType_Parse(name, value);
  }
  
  typedef OGAckLinkServer_E_TRResult E_TRResult;
  static const E_TRResult ET_SUCCESS = OGAckLinkServer_E_TRResult_ET_SUCCESS;
  static const E_TRResult ET_FAILED = OGAckLinkServer_E_TRResult_ET_FAILED;
  static inline bool E_TRResult_IsValid(int value) {
    return OGAckLinkServer_E_TRResult_IsValid(value);
  }
  static const E_TRResult E_TRResult_MIN =
    OGAckLinkServer_E_TRResult_E_TRResult_MIN;
  static const E_TRResult E_TRResult_MAX =
    OGAckLinkServer_E_TRResult_E_TRResult_MAX;
  static const int E_TRResult_ARRAYSIZE =
    OGAckLinkServer_E_TRResult_E_TRResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_TRResult_descriptor() {
    return OGAckLinkServer_E_TRResult_descriptor();
  }
  static inline const ::std::string& E_TRResult_Name(E_TRResult value) {
    return OGAckLinkServer_E_TRResult_Name(value);
  }
  static inline bool E_TRResult_Parse(const ::std::string& name,
      E_TRResult* value) {
    return OGAckLinkServer_E_TRResult_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult result() const;
  inline void set_result(::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult value);
  
  // optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType reason() const;
  inline void set_reason(::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType value);
  
  // optional string LinkIp = 3;
  inline bool has_linkip() const;
  inline void clear_linkip();
  static const int kLinkIpFieldNumber = 3;
  inline const ::std::string& linkip() const;
  inline void set_linkip(const ::std::string& value);
  inline void set_linkip(const char* value);
  inline void set_linkip(const char* value, size_t size);
  inline ::std::string* mutable_linkip();
  inline ::std::string* release_linkip();
  
  // optional int32 LinkPort = 4;
  inline bool has_linkport() const;
  inline void clear_linkport();
  static const int kLinkPortFieldNumber = 4;
  inline ::google::protobuf::int32 linkport() const;
  inline void set_linkport(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLinkServer)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_linkip();
  inline void clear_has_linkip();
  inline void set_has_linkport();
  inline void clear_has_linkport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int result_;
  int reason_;
  ::std::string* linkip_;
  ::google::protobuf::int32 linkport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLinkServer* default_instance_;
};
// -------------------------------------------------------------------

class OGReqTRLogin2 : public ::google::protobuf::Message {
 public:
  OGReqTRLogin2();
  virtual ~OGReqTRLogin2();
  
  OGReqTRLogin2(const OGReqTRLogin2& from);
  
  inline OGReqTRLogin2& operator=(const OGReqTRLogin2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqTRLogin2& default_instance();
  
  void Swap(OGReqTRLogin2* other);
  
  // implements Message ----------------------------------------------
  
  OGReqTRLogin2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqTRLogin2& from);
  void MergeFrom(const OGReqTRLogin2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string UserId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional string Cert = 2;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 2;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const char* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  
  // optional int32 gameId = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);
  
  // optional int32 comfromId = 4;
  inline bool has_comfromid() const;
  inline void clear_comfromid();
  static const int kComfromIdFieldNumber = 4;
  inline ::google::protobuf::int32 comfromid() const;
  inline void set_comfromid(::google::protobuf::int32 value);
  
  // optional string userName = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string nickName = 6;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  
  // optional string entrance = 7;
  inline bool has_entrance() const;
  inline void clear_entrance();
  static const int kEntranceFieldNumber = 7;
  inline const ::std::string& entrance() const;
  inline void set_entrance(const ::std::string& value);
  inline void set_entrance(const char* value);
  inline void set_entrance(const char* value, size_t size);
  inline ::std::string* mutable_entrance();
  inline ::std::string* release_entrance();
  
  // optional string come = 8;
  inline bool has_come() const;
  inline void clear_come();
  static const int kComeFieldNumber = 8;
  inline const ::std::string& come() const;
  inline void set_come(const ::std::string& value);
  inline void set_come(const char* value);
  inline void set_come(const char* value, size_t size);
  inline ::std::string* mutable_come();
  inline ::std::string* release_come();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqTRLogin2)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_comfromid();
  inline void clear_has_comfromid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_entrance();
  inline void clear_has_entrance();
  inline void set_has_come();
  inline void clear_has_come();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  ::std::string* cert_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 comfromid_;
  ::std::string* username_;
  ::std::string* nickname_;
  ::std::string* entrance_;
  ::std::string* come_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqTRLogin2* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoleLoginMsg : public ::google::protobuf::Message {
 public:
  OGAckRoleLoginMsg();
  virtual ~OGAckRoleLoginMsg();
  
  OGAckRoleLoginMsg(const OGAckRoleLoginMsg& from);
  
  inline OGAckRoleLoginMsg& operator=(const OGAckRoleLoginMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoleLoginMsg& default_instance();
  
  void Swap(OGAckRoleLoginMsg* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoleLoginMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoleLoginMsg& from);
  void MergeFrom(const OGAckRoleLoginMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckRoleLoginMsg_E_ErrorType E_ErrorType;
  static const E_ErrorType ET_UNKNOWN = OGAckRoleLoginMsg_E_ErrorType_ET_UNKNOWN;
  static const E_ErrorType ET_TYPE1 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE1;
  static const E_ErrorType ET_TYPE2 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE2;
  static const E_ErrorType ET_TYPE3 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE3;
  static const E_ErrorType ET_TYPE4 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE4;
  static const E_ErrorType ET_TYPE5 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE5;
  static const E_ErrorType ET_TYPE6 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE6;
  static const E_ErrorType ET_TYPE7 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE7;
  static const E_ErrorType ET_TYPE8 = OGAckRoleLoginMsg_E_ErrorType_ET_TYPE8;
  static inline bool E_ErrorType_IsValid(int value) {
    return OGAckRoleLoginMsg_E_ErrorType_IsValid(value);
  }
  static const E_ErrorType E_ErrorType_MIN =
    OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_MIN;
  static const E_ErrorType E_ErrorType_MAX =
    OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_MAX;
  static const int E_ErrorType_ARRAYSIZE =
    OGAckRoleLoginMsg_E_ErrorType_E_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_ErrorType_descriptor() {
    return OGAckRoleLoginMsg_E_ErrorType_descriptor();
  }
  static inline const ::std::string& E_ErrorType_Name(E_ErrorType value) {
    return OGAckRoleLoginMsg_E_ErrorType_Name(value);
  }
  static inline bool E_ErrorType_Parse(const ::std::string& name,
      E_ErrorType* value) {
    return OGAckRoleLoginMsg_E_ErrorType_Parse(name, value);
  }
  
  typedef OGAckRoleLoginMsg_E_TRResult E_TRResult;
  static const E_TRResult ET_SUCCESS = OGAckRoleLoginMsg_E_TRResult_ET_SUCCESS;
  static const E_TRResult ET_FAILED = OGAckRoleLoginMsg_E_TRResult_ET_FAILED;
  static inline bool E_TRResult_IsValid(int value) {
    return OGAckRoleLoginMsg_E_TRResult_IsValid(value);
  }
  static const E_TRResult E_TRResult_MIN =
    OGAckRoleLoginMsg_E_TRResult_E_TRResult_MIN;
  static const E_TRResult E_TRResult_MAX =
    OGAckRoleLoginMsg_E_TRResult_E_TRResult_MAX;
  static const int E_TRResult_ARRAYSIZE =
    OGAckRoleLoginMsg_E_TRResult_E_TRResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_TRResult_descriptor() {
    return OGAckRoleLoginMsg_E_TRResult_descriptor();
  }
  static inline const ::std::string& E_TRResult_Name(E_TRResult value) {
    return OGAckRoleLoginMsg_E_TRResult_Name(value);
  }
  static inline bool E_TRResult_Parse(const ::std::string& name,
      E_TRResult* value) {
    return OGAckRoleLoginMsg_E_TRResult_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult result() const;
  inline void set_result(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult value);
  
  // optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType reason() const;
  inline void set_reason(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType value);
  
  // optional string userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional string roleName = 4;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int64 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional int32 reqExp = 8;
  inline bool has_reqexp() const;
  inline void clear_reqexp();
  static const int kReqExpFieldNumber = 8;
  inline ::google::protobuf::int32 reqexp() const;
  inline void set_reqexp(::google::protobuf::int32 value);
  
  // optional string pic = 9;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 9;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional int32 gridNum = 10;
  inline bool has_gridnum() const;
  inline void clear_gridnum();
  static const int kGridNumFieldNumber = 10;
  inline ::google::protobuf::int32 gridnum() const;
  inline void set_gridnum(::google::protobuf::int32 value);
  
  // optional bool newHand = 11;
  inline bool has_newhand() const;
  inline void clear_newhand();
  static const int kNewHandFieldNumber = 11;
  inline bool newhand() const;
  inline void set_newhand(bool value);
  
  // optional int32 mailNum = 12;
  inline bool has_mailnum() const;
  inline void clear_mailnum();
  static const int kMailNumFieldNumber = 12;
  inline ::google::protobuf::int32 mailnum() const;
  inline void set_mailnum(::google::protobuf::int32 value);
  
  // optional bool newHandAward = 13;
  inline bool has_newhandaward() const;
  inline void clear_newhandaward();
  static const int kNewHandAwardFieldNumber = 13;
  inline bool newhandaward() const;
  inline void set_newhandaward(bool value);
  
  // optional int32 petFightAward = 14;
  inline bool has_petfightaward() const;
  inline void clear_petfightaward();
  static const int kPetFightAwardFieldNumber = 14;
  inline ::google::protobuf::int32 petfightaward() const;
  inline void set_petfightaward(::google::protobuf::int32 value);
  
  // optional int32 freeNum = 15;
  inline bool has_freenum() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 15;
  inline ::google::protobuf::int32 freenum() const;
  inline void set_freenum(::google::protobuf::int32 value);
  
  // optional int32 loginnum = 16;
  inline bool has_loginnum() const;
  inline void clear_loginnum();
  static const int kLoginnumFieldNumber = 16;
  inline ::google::protobuf::int32 loginnum() const;
  inline void set_loginnum(::google::protobuf::int32 value);
  
  // optional int32 loginawardnum = 17;
  inline bool has_loginawardnum() const;
  inline void clear_loginawardnum();
  static const int kLoginawardnumFieldNumber = 17;
  inline ::google::protobuf::int32 loginawardnum() const;
  inline void set_loginawardnum(::google::protobuf::int32 value);
  
  // optional int32 comeFromId = 18;
  inline bool has_comefromid() const;
  inline void clear_comefromid();
  static const int kComeFromIdFieldNumber = 18;
  inline ::google::protobuf::int32 comefromid() const;
  inline void set_comefromid(::google::protobuf::int32 value);
  
  // optional string topRankTip = 19;
  inline bool has_topranktip() const;
  inline void clear_topranktip();
  static const int kTopRankTipFieldNumber = 19;
  inline const ::std::string& topranktip() const;
  inline void set_topranktip(const ::std::string& value);
  inline void set_topranktip(const char* value);
  inline void set_topranktip(const char* value, size_t size);
  inline ::std::string* mutable_topranktip();
  inline ::std::string* release_topranktip();
  
  // optional int64 doubleUse = 20;
  inline bool has_doubleuse() const;
  inline void clear_doubleuse();
  static const int kDoubleUseFieldNumber = 20;
  inline ::google::protobuf::int64 doubleuse() const;
  inline void set_doubleuse(::google::protobuf::int64 value);
  
  // optional int32 feed = 21;
  inline bool has_feed() const;
  inline void clear_feed();
  static const int kFeedFieldNumber = 21;
  inline ::google::protobuf::int32 feed() const;
  inline void set_feed(::google::protobuf::int32 value);
  
  // optional int32 fondle = 22;
  inline bool has_fondle() const;
  inline void clear_fondle();
  static const int kFondleFieldNumber = 22;
  inline ::google::protobuf::int32 fondle() const;
  inline void set_fondle(::google::protobuf::int32 value);
  
  // optional int32 fourTimesOn = 23;
  inline bool has_fourtimeson() const;
  inline void clear_fourtimeson();
  static const int kFourTimesOnFieldNumber = 23;
  inline ::google::protobuf::int32 fourtimeson() const;
  inline void set_fourtimeson(::google::protobuf::int32 value);
  
  // optional int64 newGold = 24;
  inline bool has_newgold() const;
  inline void clear_newgold();
  static const int kNewGoldFieldNumber = 24;
  inline ::google::protobuf::int64 newgold() const;
  inline void set_newgold(::google::protobuf::int64 value);
  
  // optional string content = 25;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 25;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoleLoginMsg)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_reqexp();
  inline void clear_has_reqexp();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_gridnum();
  inline void clear_has_gridnum();
  inline void set_has_newhand();
  inline void clear_has_newhand();
  inline void set_has_mailnum();
  inline void clear_has_mailnum();
  inline void set_has_newhandaward();
  inline void clear_has_newhandaward();
  inline void set_has_petfightaward();
  inline void clear_has_petfightaward();
  inline void set_has_freenum();
  inline void clear_has_freenum();
  inline void set_has_loginnum();
  inline void clear_has_loginnum();
  inline void set_has_loginawardnum();
  inline void clear_has_loginawardnum();
  inline void set_has_comefromid();
  inline void clear_has_comefromid();
  inline void set_has_topranktip();
  inline void clear_has_topranktip();
  inline void set_has_doubleuse();
  inline void clear_has_doubleuse();
  inline void set_has_feed();
  inline void clear_has_feed();
  inline void set_has_fondle();
  inline void clear_has_fondle();
  inline void set_has_fourtimeson();
  inline void clear_has_fourtimeson();
  inline void set_has_newgold();
  inline void clear_has_newgold();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int result_;
  int reason_;
  ::std::string* userid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int64 gold_;
  ::std::string* pic_;
  ::google::protobuf::int32 reqexp_;
  ::google::protobuf::int32 gridnum_;
  ::google::protobuf::int32 mailnum_;
  bool newhand_;
  bool newhandaward_;
  ::google::protobuf::int32 petfightaward_;
  ::google::protobuf::int32 freenum_;
  ::google::protobuf::int32 loginnum_;
  ::google::protobuf::int32 loginawardnum_;
  ::std::string* topranktip_;
  ::google::protobuf::int32 comefromid_;
  ::google::protobuf::int32 feed_;
  ::google::protobuf::int64 doubleuse_;
  ::google::protobuf::int32 fondle_;
  ::google::protobuf::int32 fourtimeson_;
  ::google::protobuf::int64 newgold_;
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoleLoginMsg* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoleMsg : public ::google::protobuf::Message {
 public:
  OGAckRoleMsg();
  virtual ~OGAckRoleMsg();
  
  OGAckRoleMsg(const OGAckRoleMsg& from);
  
  inline OGAckRoleMsg& operator=(const OGAckRoleMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoleMsg& default_instance();
  
  void Swap(OGAckRoleMsg* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoleMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoleMsg& from);
  void MergeFrom(const OGAckRoleMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional int32 reqExp = 4;
  inline bool has_reqexp() const;
  inline void clear_reqexp();
  static const int kReqExpFieldNumber = 4;
  inline ::google::protobuf::int32 reqexp() const;
  inline void set_reqexp(::google::protobuf::int32 value);
  
  // optional int32 gridNum = 5;
  inline bool has_gridnum() const;
  inline void clear_gridnum();
  static const int kGridNumFieldNumber = 5;
  inline ::google::protobuf::int32 gridnum() const;
  inline void set_gridnum(::google::protobuf::int32 value);
  
  // optional int32 freeNum = 6;
  inline bool has_freenum() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 6;
  inline ::google::protobuf::int32 freenum() const;
  inline void set_freenum(::google::protobuf::int32 value);
  
  // optional int32 loginawardnum = 7;
  inline bool has_loginawardnum() const;
  inline void clear_loginawardnum();
  static const int kLoginawardnumFieldNumber = 7;
  inline ::google::protobuf::int32 loginawardnum() const;
  inline void set_loginawardnum(::google::protobuf::int32 value);
  
  // optional int32 feed = 8;
  inline bool has_feed() const;
  inline void clear_feed();
  static const int kFeedFieldNumber = 8;
  inline ::google::protobuf::int32 feed() const;
  inline void set_feed(::google::protobuf::int32 value);
  
  // optional int32 fondle = 9;
  inline bool has_fondle() const;
  inline void clear_fondle();
  static const int kFondleFieldNumber = 9;
  inline ::google::protobuf::int32 fondle() const;
  inline void set_fondle(::google::protobuf::int32 value);
  
  // optional int64 newGold = 10;
  inline bool has_newgold() const;
  inline void clear_newgold();
  static const int kNewGoldFieldNumber = 10;
  inline ::google::protobuf::int64 newgold() const;
  inline void set_newgold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoleMsg)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_reqexp();
  inline void clear_has_reqexp();
  inline void set_has_gridnum();
  inline void clear_has_gridnum();
  inline void set_has_freenum();
  inline void clear_has_freenum();
  inline void set_has_loginawardnum();
  inline void clear_has_loginawardnum();
  inline void set_has_feed();
  inline void clear_has_feed();
  inline void set_has_fondle();
  inline void clear_has_fondle();
  inline void set_has_newgold();
  inline void clear_has_newgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 reqexp_;
  ::google::protobuf::int32 gridnum_;
  ::google::protobuf::int32 freenum_;
  ::google::protobuf::int32 loginawardnum_;
  ::google::protobuf::int32 feed_;
  ::google::protobuf::int32 fondle_;
  ::google::protobuf::int64 newgold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoleMsg* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetUpdatedMsg : public ::google::protobuf::Message {
 public:
  OGAckPetUpdatedMsg();
  virtual ~OGAckPetUpdatedMsg();
  
  OGAckPetUpdatedMsg(const OGAckPetUpdatedMsg& from);
  
  inline OGAckPetUpdatedMsg& operator=(const OGAckPetUpdatedMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetUpdatedMsg& default_instance();
  
  void Swap(OGAckPetUpdatedMsg* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetUpdatedMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetUpdatedMsg& from);
  void MergeFrom(const OGAckPetUpdatedMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 petId = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // optional int32 bloodPlus = 2;
  inline bool has_bloodplus() const;
  inline void clear_bloodplus();
  static const int kBloodPlusFieldNumber = 2;
  inline ::google::protobuf::int32 bloodplus() const;
  inline void set_bloodplus(::google::protobuf::int32 value);
  
  // optional int32 attackPlus = 3;
  inline bool has_attackplus() const;
  inline void clear_attackplus();
  static const int kAttackPlusFieldNumber = 3;
  inline ::google::protobuf::int32 attackplus() const;
  inline void set_attackplus(::google::protobuf::int32 value);
  
  // optional int32 awardPlus = 4;
  inline bool has_awardplus() const;
  inline void clear_awardplus();
  static const int kAwardPlusFieldNumber = 4;
  inline ::google::protobuf::int32 awardplus() const;
  inline void set_awardplus(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 reqexp = 7;
  inline bool has_reqexp() const;
  inline void clear_reqexp();
  static const int kReqexpFieldNumber = 7;
  inline ::google::protobuf::int32 reqexp() const;
  inline void set_reqexp(::google::protobuf::int32 value);
  
  // optional int32 flg = 8;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 8;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetUpdatedMsg)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_bloodplus();
  inline void clear_has_bloodplus();
  inline void set_has_attackplus();
  inline void clear_has_attackplus();
  inline void set_has_awardplus();
  inline void clear_has_awardplus();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_reqexp();
  inline void clear_has_reqexp();
  inline void set_has_flg();
  inline void clear_has_flg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 bloodplus_;
  ::google::protobuf::int32 attackplus_;
  ::google::protobuf::int32 awardplus_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 reqexp_;
  ::google::protobuf::int32 flg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetUpdatedMsg* default_instance_;
};
// -------------------------------------------------------------------

class OGAckGameServer : public ::google::protobuf::Message {
 public:
  OGAckGameServer();
  virtual ~OGAckGameServer();
  
  OGAckGameServer(const OGAckGameServer& from);
  
  inline OGAckGameServer& operator=(const OGAckGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckGameServer& default_instance();
  
  void Swap(OGAckGameServer* other);
  
  // implements Message ----------------------------------------------
  
  OGAckGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckGameServer& from);
  void MergeFrom(const OGAckGameServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 client_port = 1;
  inline bool has_client_port() const;
  inline void clear_client_port();
  static const int kClientPortFieldNumber = 1;
  inline ::google::protobuf::int32 client_port() const;
  inline void set_client_port(::google::protobuf::int32 value);
  
  // optional string LinkIp = 2;
  inline bool has_linkip() const;
  inline void clear_linkip();
  static const int kLinkIpFieldNumber = 2;
  inline const ::std::string& linkip() const;
  inline void set_linkip(const ::std::string& value);
  inline void set_linkip(const char* value);
  inline void set_linkip(const char* value, size_t size);
  inline ::std::string* mutable_linkip();
  inline ::std::string* release_linkip();
  
  // optional int32 LinkPort = 3;
  inline bool has_linkport() const;
  inline void clear_linkport();
  static const int kLinkPortFieldNumber = 3;
  inline ::google::protobuf::int32 linkport() const;
  inline void set_linkport(::google::protobuf::int32 value);
  
  // optional string gameId = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 4;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckGameServer)
 private:
  inline void set_has_client_port();
  inline void clear_has_client_port();
  inline void set_has_linkip();
  inline void clear_has_linkip();
  inline void set_has_linkport();
  inline void clear_has_linkport();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* linkip_;
  ::google::protobuf::int32 client_port_;
  ::google::protobuf::int32 linkport_;
  ::std::string* gameid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckGameServer* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoomList_Room : public ::google::protobuf::Message {
 public:
  OGAckRoomList_Room();
  virtual ~OGAckRoomList_Room();
  
  OGAckRoomList_Room(const OGAckRoomList_Room& from);
  
  inline OGAckRoomList_Room& operator=(const OGAckRoomList_Room& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoomList_Room& default_instance();
  
  void Swap(OGAckRoomList_Room* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoomList_Room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoomList_Room& from);
  void MergeFrom(const OGAckRoomList_Room& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 roomId = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // optional string roomName = 2;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  
  // optional int32 roomLevel = 3;
  inline bool has_roomlevel() const;
  inline void clear_roomlevel();
  static const int kRoomLevelFieldNumber = 3;
  inline ::google::protobuf::int32 roomlevel() const;
  inline void set_roomlevel(::google::protobuf::int32 value);
  
  // optional int64 roomGold = 4;
  inline bool has_roomgold() const;
  inline void clear_roomgold();
  static const int kRoomGoldFieldNumber = 4;
  inline ::google::protobuf::int64 roomgold() const;
  inline void set_roomgold(::google::protobuf::int64 value);
  
  // optional string roomTip = 5;
  inline bool has_roomtip() const;
  inline void clear_roomtip();
  static const int kRoomTipFieldNumber = 5;
  inline const ::std::string& roomtip() const;
  inline void set_roomtip(const ::std::string& value);
  inline void set_roomtip(const char* value);
  inline void set_roomtip(const char* value, size_t size);
  inline ::std::string* mutable_roomtip();
  inline ::std::string* release_roomtip();
  
  // optional int32 roomOn = 6;
  inline bool has_roomon() const;
  inline void clear_roomon();
  static const int kRoomOnFieldNumber = 6;
  inline ::google::protobuf::int32 roomon() const;
  inline void set_roomon(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoomList.Room)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_roomlevel();
  inline void clear_has_roomlevel();
  inline void set_has_roomgold();
  inline void clear_has_roomgold();
  inline void set_has_roomtip();
  inline void clear_has_roomtip();
  inline void set_has_roomon();
  inline void clear_has_roomon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* roomname_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roomlevel_;
  ::google::protobuf::int64 roomgold_;
  ::std::string* roomtip_;
  ::google::protobuf::int32 roomon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoomList_Room* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoomList : public ::google::protobuf::Message {
 public:
  OGAckRoomList();
  virtual ~OGAckRoomList();
  
  OGAckRoomList(const OGAckRoomList& from);
  
  inline OGAckRoomList& operator=(const OGAckRoomList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoomList& default_instance();
  
  void Swap(OGAckRoomList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoomList& from);
  void MergeFrom(const OGAckRoomList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckRoomList_Room Room;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
  inline int roomlist_size() const;
  inline void clear_roomlist();
  static const int kRoomListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckRoomList_Room& roomlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRoomList_Room* mutable_roomlist(int index);
  inline ::com::ourgame::texasSlots::OGAckRoomList_Room* add_roomlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoomList_Room >&
      roomlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoomList_Room >*
      mutable_roomlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoomList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoomList_Room > roomlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoomList* default_instance_;
};
// -------------------------------------------------------------------

class OGReqJoinRoom : public ::google::protobuf::Message {
 public:
  OGReqJoinRoom();
  virtual ~OGReqJoinRoom();
  
  OGReqJoinRoom(const OGReqJoinRoom& from);
  
  inline OGReqJoinRoom& operator=(const OGReqJoinRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqJoinRoom& default_instance();
  
  void Swap(OGReqJoinRoom* other);
  
  // implements Message ----------------------------------------------
  
  OGReqJoinRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqJoinRoom& from);
  void MergeFrom(const OGReqJoinRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 roomId = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqJoinRoom)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 roomid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqJoinRoom* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoom_RoomBet : public ::google::protobuf::Message {
 public:
  OGAckRoom_RoomBet();
  virtual ~OGAckRoom_RoomBet();
  
  OGAckRoom_RoomBet(const OGAckRoom_RoomBet& from);
  
  inline OGAckRoom_RoomBet& operator=(const OGAckRoom_RoomBet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoom_RoomBet& default_instance();
  
  void Swap(OGAckRoom_RoomBet* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoom_RoomBet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoom_RoomBet& from);
  void MergeFrom(const OGAckRoom_RoomBet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline ::google::protobuf::int64 min() const;
  inline void set_min(::google::protobuf::int64 value);
  
  // optional int64 max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline ::google::protobuf::int64 max() const;
  inline void set_max(::google::protobuf::int64 value);
  
  // optional int32 bet = 3;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 3;
  inline ::google::protobuf::int32 bet() const;
  inline void set_bet(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoom.RoomBet)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_bet();
  inline void clear_has_bet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 min_;
  ::google::protobuf::int64 max_;
  ::google::protobuf::int32 bet_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoom_RoomBet* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoom : public ::google::protobuf::Message {
 public:
  OGAckRoom();
  virtual ~OGAckRoom();
  
  OGAckRoom(const OGAckRoom& from);
  
  inline OGAckRoom& operator=(const OGAckRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoom& default_instance();
  
  void Swap(OGAckRoom* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoom& from);
  void MergeFrom(const OGAckRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckRoom_RoomBet RoomBet;
  
  typedef OGAckRoom_E_ErrorType E_ErrorType;
  static const E_ErrorType ET_UNKNOWN = OGAckRoom_E_ErrorType_ET_UNKNOWN;
  static const E_ErrorType ET_TYPE1 = OGAckRoom_E_ErrorType_ET_TYPE1;
  static const E_ErrorType ET_TYPE2 = OGAckRoom_E_ErrorType_ET_TYPE2;
  static const E_ErrorType ET_TYPE3 = OGAckRoom_E_ErrorType_ET_TYPE3;
  static const E_ErrorType ET_TYPE4 = OGAckRoom_E_ErrorType_ET_TYPE4;
  static inline bool E_ErrorType_IsValid(int value) {
    return OGAckRoom_E_ErrorType_IsValid(value);
  }
  static const E_ErrorType E_ErrorType_MIN =
    OGAckRoom_E_ErrorType_E_ErrorType_MIN;
  static const E_ErrorType E_ErrorType_MAX =
    OGAckRoom_E_ErrorType_E_ErrorType_MAX;
  static const int E_ErrorType_ARRAYSIZE =
    OGAckRoom_E_ErrorType_E_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_ErrorType_descriptor() {
    return OGAckRoom_E_ErrorType_descriptor();
  }
  static inline const ::std::string& E_ErrorType_Name(E_ErrorType value) {
    return OGAckRoom_E_ErrorType_Name(value);
  }
  static inline bool E_ErrorType_Parse(const ::std::string& name,
      E_ErrorType* value) {
    return OGAckRoom_E_ErrorType_Parse(name, value);
  }
  
  typedef OGAckRoom_E_TRResult E_TRResult;
  static const E_TRResult ET_SUCCESS = OGAckRoom_E_TRResult_ET_SUCCESS;
  static const E_TRResult ET_FAILED = OGAckRoom_E_TRResult_ET_FAILED;
  static inline bool E_TRResult_IsValid(int value) {
    return OGAckRoom_E_TRResult_IsValid(value);
  }
  static const E_TRResult E_TRResult_MIN =
    OGAckRoom_E_TRResult_E_TRResult_MIN;
  static const E_TRResult E_TRResult_MAX =
    OGAckRoom_E_TRResult_E_TRResult_MAX;
  static const int E_TRResult_ARRAYSIZE =
    OGAckRoom_E_TRResult_E_TRResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_TRResult_descriptor() {
    return OGAckRoom_E_TRResult_descriptor();
  }
  static inline const ::std::string& E_TRResult_Name(E_TRResult value) {
    return OGAckRoom_E_TRResult_Name(value);
  }
  static inline bool E_TRResult_Parse(const ::std::string& name,
      E_TRResult* value) {
    return OGAckRoom_E_TRResult_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGAckRoom_E_TRResult result() const;
  inline void set_result(::com::ourgame::texasSlots::OGAckRoom_E_TRResult value);
  
  // optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType reason() const;
  inline void set_reason(::com::ourgame::texasSlots::OGAckRoom_E_ErrorType value);
  
  // optional int32 roomId = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // optional string roomName = 4;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  
  // optional int32 roomMaxLine = 5;
  inline bool has_roommaxline() const;
  inline void clear_roommaxline();
  static const int kRoomMaxLineFieldNumber = 5;
  inline ::google::protobuf::int32 roommaxline() const;
  inline void set_roommaxline(::google::protobuf::int32 value);
  
  // optional int32 roomMaxTimes = 6;
  inline bool has_roommaxtimes() const;
  inline void clear_roommaxtimes();
  static const int kRoomMaxTimesFieldNumber = 6;
  inline ::google::protobuf::int32 roommaxtimes() const;
  inline void set_roommaxtimes(::google::protobuf::int32 value);
  
  // optional int64 roomBaseGold = 7;
  inline bool has_roombasegold() const;
  inline void clear_roombasegold();
  static const int kRoomBaseGoldFieldNumber = 7;
  inline ::google::protobuf::int64 roombasegold() const;
  inline void set_roombasegold(::google::protobuf::int64 value);
  
  // optional int32 roomPic = 8;
  inline bool has_roompic() const;
  inline void clear_roompic();
  static const int kRoomPicFieldNumber = 8;
  inline ::google::protobuf::int32 roompic() const;
  inline void set_roompic(::google::protobuf::int32 value);
  
  // optional int32 roomDoubleOn = 9;
  inline bool has_roomdoubleon() const;
  inline void clear_roomdoubleon();
  static const int kRoomDoubleOnFieldNumber = 9;
  inline ::google::protobuf::int32 roomdoubleon() const;
  inline void set_roomdoubleon(::google::protobuf::int32 value);
  
  // optional int32 freeOn = 10;
  inline bool has_freeon() const;
  inline void clear_freeon();
  static const int kFreeOnFieldNumber = 10;
  inline ::google::protobuf::int32 freeon() const;
  inline void set_freeon(::google::protobuf::int32 value);
  
  // optional int32 fourTimesOn = 11;
  inline bool has_fourtimeson() const;
  inline void clear_fourtimeson();
  static const int kFourTimesOnFieldNumber = 11;
  inline ::google::protobuf::int32 fourtimeson() const;
  inline void set_fourtimeson(::google::protobuf::int32 value);
  
  // repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
  inline int betlist_size() const;
  inline void clear_betlist();
  static const int kBetListFieldNumber = 12;
  inline const ::com::ourgame::texasSlots::OGAckRoom_RoomBet& betlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRoom_RoomBet* mutable_betlist(int index);
  inline ::com::ourgame::texasSlots::OGAckRoom_RoomBet* add_betlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoom_RoomBet >&
      betlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoom_RoomBet >*
      mutable_betlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoom)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_roommaxline();
  inline void clear_has_roommaxline();
  inline void set_has_roommaxtimes();
  inline void clear_has_roommaxtimes();
  inline void set_has_roombasegold();
  inline void clear_has_roombasegold();
  inline void set_has_roompic();
  inline void clear_has_roompic();
  inline void set_has_roomdoubleon();
  inline void clear_has_roomdoubleon();
  inline void set_has_freeon();
  inline void clear_has_freeon();
  inline void set_has_fourtimeson();
  inline void clear_has_fourtimeson();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int result_;
  int reason_;
  ::std::string* roomname_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roommaxline_;
  ::google::protobuf::int64 roombasegold_;
  ::google::protobuf::int32 roommaxtimes_;
  ::google::protobuf::int32 roompic_;
  ::google::protobuf::int32 roomdoubleon_;
  ::google::protobuf::int32 freeon_;
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoom_RoomBet > betlist_;
  ::google::protobuf::int32 fourtimeson_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoom* default_instance_;
};
// -------------------------------------------------------------------

class OGAckBoss : public ::google::protobuf::Message {
 public:
  OGAckBoss();
  virtual ~OGAckBoss();
  
  OGAckBoss(const OGAckBoss& from);
  
  inline OGAckBoss& operator=(const OGAckBoss& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckBoss& default_instance();
  
  void Swap(OGAckBoss* other);
  
  // implements Message ----------------------------------------------
  
  OGAckBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckBoss& from);
  void MergeFrom(const OGAckBoss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int64 bossNeedGold = 2;
  inline bool has_bossneedgold() const;
  inline void clear_bossneedgold();
  static const int kBossNeedGoldFieldNumber = 2;
  inline ::google::protobuf::int64 bossneedgold() const;
  inline void set_bossneedgold(::google::protobuf::int64 value);
  
  // optional int32 roomPic = 3;
  inline bool has_roompic() const;
  inline void clear_roompic();
  static const int kRoomPicFieldNumber = 3;
  inline ::google::protobuf::int32 roompic() const;
  inline void set_roompic(::google::protobuf::int32 value);
  
  // optional int32 bossPic = 4;
  inline bool has_bosspic() const;
  inline void clear_bosspic();
  static const int kBossPicFieldNumber = 4;
  inline ::google::protobuf::int32 bosspic() const;
  inline void set_bosspic(::google::protobuf::int32 value);
  
  // optional int64 petCurrGold = 5;
  inline bool has_petcurrgold() const;
  inline void clear_petcurrgold();
  static const int kPetCurrGoldFieldNumber = 5;
  inline ::google::protobuf::int64 petcurrgold() const;
  inline void set_petcurrgold(::google::protobuf::int64 value);
  
  // optional int32 freeNum = 6;
  inline bool has_freenum() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 6;
  inline ::google::protobuf::int32 freenum() const;
  inline void set_freenum(::google::protobuf::int32 value);
  
  // optional int64 needGold = 7;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 7;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // optional int32 bossBlood = 8;
  inline bool has_bossblood() const;
  inline void clear_bossblood();
  static const int kBossBloodFieldNumber = 8;
  inline ::google::protobuf::int32 bossblood() const;
  inline void set_bossblood(::google::protobuf::int32 value);
  
  // optional int32 bossBloodMax = 9;
  inline bool has_bossbloodmax() const;
  inline void clear_bossbloodmax();
  static const int kBossBloodMaxFieldNumber = 9;
  inline ::google::protobuf::int32 bossbloodmax() const;
  inline void set_bossbloodmax(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckBoss)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_bossneedgold();
  inline void clear_has_bossneedgold();
  inline void set_has_roompic();
  inline void clear_has_roompic();
  inline void set_has_bosspic();
  inline void clear_has_bosspic();
  inline void set_has_petcurrgold();
  inline void clear_has_petcurrgold();
  inline void set_has_freenum();
  inline void clear_has_freenum();
  inline void set_has_needgold();
  inline void clear_has_needgold();
  inline void set_has_bossblood();
  inline void clear_has_bossblood();
  inline void set_has_bossbloodmax();
  inline void clear_has_bossbloodmax();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 bossneedgold_;
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 roompic_;
  ::google::protobuf::int64 petcurrgold_;
  ::google::protobuf::int32 bosspic_;
  ::google::protobuf::int32 freenum_;
  ::google::protobuf::int64 needgold_;
  ::google::protobuf::int32 bossblood_;
  ::google::protobuf::int32 bossbloodmax_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckBoss* default_instance_;
};
// -------------------------------------------------------------------

class OGReqExitType : public ::google::protobuf::Message {
 public:
  OGReqExitType();
  virtual ~OGReqExitType();
  
  OGReqExitType(const OGReqExitType& from);
  
  inline OGReqExitType& operator=(const OGReqExitType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqExitType& default_instance();
  
  void Swap(OGReqExitType* other);
  
  // implements Message ----------------------------------------------
  
  OGReqExitType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqExitType& from);
  void MergeFrom(const OGReqExitType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGReqExitType_E_MsgType E_MsgType;
  static const E_MsgType ET_TYPE1 = OGReqExitType_E_MsgType_ET_TYPE1;
  static const E_MsgType ET_TYPE2 = OGReqExitType_E_MsgType_ET_TYPE2;
  static const E_MsgType ET_TYPE3 = OGReqExitType_E_MsgType_ET_TYPE3;
  static const E_MsgType ET_TYPE4 = OGReqExitType_E_MsgType_ET_TYPE4;
  static inline bool E_MsgType_IsValid(int value) {
    return OGReqExitType_E_MsgType_IsValid(value);
  }
  static const E_MsgType E_MsgType_MIN =
    OGReqExitType_E_MsgType_E_MsgType_MIN;
  static const E_MsgType E_MsgType_MAX =
    OGReqExitType_E_MsgType_E_MsgType_MAX;
  static const int E_MsgType_ARRAYSIZE =
    OGReqExitType_E_MsgType_E_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_MsgType_descriptor() {
    return OGReqExitType_E_MsgType_descriptor();
  }
  static inline const ::std::string& E_MsgType_Name(E_MsgType value) {
    return OGReqExitType_E_MsgType_Name(value);
  }
  static inline bool E_MsgType_Parse(const ::std::string& name,
      E_MsgType* value) {
    return OGReqExitType_E_MsgType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGReqExitType_E_MsgType msgtype() const;
  inline void set_msgtype(::com::ourgame::texasSlots::OGReqExitType_E_MsgType value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqExitType)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgtype_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqExitType* default_instance_;
};
// -------------------------------------------------------------------

class OGAckExit : public ::google::protobuf::Message {
 public:
  OGAckExit();
  virtual ~OGAckExit();
  
  OGAckExit(const OGAckExit& from);
  
  inline OGAckExit& operator=(const OGAckExit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckExit& default_instance();
  
  void Swap(OGAckExit* other);
  
  // implements Message ----------------------------------------------
  
  OGAckExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckExit& from);
  void MergeFrom(const OGAckExit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckExit_E_MsgType E_MsgType;
  static const E_MsgType ET_TYPE1 = OGAckExit_E_MsgType_ET_TYPE1;
  static const E_MsgType ET_TYPE2 = OGAckExit_E_MsgType_ET_TYPE2;
  static const E_MsgType ET_TYPE3 = OGAckExit_E_MsgType_ET_TYPE3;
  static const E_MsgType ET_TYPE4 = OGAckExit_E_MsgType_ET_TYPE4;
  static inline bool E_MsgType_IsValid(int value) {
    return OGAckExit_E_MsgType_IsValid(value);
  }
  static const E_MsgType E_MsgType_MIN =
    OGAckExit_E_MsgType_E_MsgType_MIN;
  static const E_MsgType E_MsgType_MAX =
    OGAckExit_E_MsgType_E_MsgType_MAX;
  static const int E_MsgType_ARRAYSIZE =
    OGAckExit_E_MsgType_E_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_MsgType_descriptor() {
    return OGAckExit_E_MsgType_descriptor();
  }
  static inline const ::std::string& E_MsgType_Name(E_MsgType value) {
    return OGAckExit_E_MsgType_Name(value);
  }
  static inline bool E_MsgType_Parse(const ::std::string& name,
      E_MsgType* value) {
    return OGAckExit_E_MsgType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGAckExit_E_MsgType msgtype() const;
  inline void set_msgtype(::com::ourgame::texasSlots::OGAckExit_E_MsgType value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckExit)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msgtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckExit* default_instance_;
};
// -------------------------------------------------------------------

class OGReqStartGame : public ::google::protobuf::Message {
 public:
  OGReqStartGame();
  virtual ~OGReqStartGame();
  
  OGReqStartGame(const OGReqStartGame& from);
  
  inline OGReqStartGame& operator=(const OGReqStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqStartGame& default_instance();
  
  void Swap(OGReqStartGame* other);
  
  // implements Message ----------------------------------------------
  
  OGReqStartGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqStartGame& from);
  void MergeFrom(const OGReqStartGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 line = 1;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 1;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional bool auto = 3;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 3;
  inline bool auto_() const;
  inline void set_auto_(bool value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqStartGame)
 private:
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 times_;
  bool auto__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqStartGame* default_instance_;
};
// -------------------------------------------------------------------

class OGReqDoubleGame : public ::google::protobuf::Message {
 public:
  OGReqDoubleGame();
  virtual ~OGReqDoubleGame();
  
  OGReqDoubleGame(const OGReqDoubleGame& from);
  
  inline OGReqDoubleGame& operator=(const OGReqDoubleGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqDoubleGame& default_instance();
  
  void Swap(OGReqDoubleGame* other);
  
  // implements Message ----------------------------------------------
  
  OGReqDoubleGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqDoubleGame& from);
  void MergeFrom(const OGReqDoubleGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGReqDoubleGame_E_TIMES E_TIMES;
  static const E_TIMES ET_TIMES1 = OGReqDoubleGame_E_TIMES_ET_TIMES1;
  static const E_TIMES ET_TIMES2 = OGReqDoubleGame_E_TIMES_ET_TIMES2;
  static const E_TIMES ET_TIMES3 = OGReqDoubleGame_E_TIMES_ET_TIMES3;
  static const E_TIMES ET_TIMES5 = OGReqDoubleGame_E_TIMES_ET_TIMES5;
  static inline bool E_TIMES_IsValid(int value) {
    return OGReqDoubleGame_E_TIMES_IsValid(value);
  }
  static const E_TIMES E_TIMES_MIN =
    OGReqDoubleGame_E_TIMES_E_TIMES_MIN;
  static const E_TIMES E_TIMES_MAX =
    OGReqDoubleGame_E_TIMES_E_TIMES_MAX;
  static const int E_TIMES_ARRAYSIZE =
    OGReqDoubleGame_E_TIMES_E_TIMES_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_TIMES_descriptor() {
    return OGReqDoubleGame_E_TIMES_descriptor();
  }
  static inline const ::std::string& E_TIMES_Name(E_TIMES value) {
    return OGReqDoubleGame_E_TIMES_Name(value);
  }
  static inline bool E_TIMES_Parse(const ::std::string& name,
      E_TIMES* value) {
    return OGReqDoubleGame_E_TIMES_Parse(name, value);
  }
  
  typedef OGReqDoubleGame_E_COLOUR E_COLOUR;
  static const E_COLOUR ET_COLOUR1 = OGReqDoubleGame_E_COLOUR_ET_COLOUR1;
  static const E_COLOUR ET_COLOUR2 = OGReqDoubleGame_E_COLOUR_ET_COLOUR2;
  static const E_COLOUR ET_COLOUR3 = OGReqDoubleGame_E_COLOUR_ET_COLOUR3;
  static const E_COLOUR ET_COLOUR4 = OGReqDoubleGame_E_COLOUR_ET_COLOUR4;
  static const E_COLOUR ET_COLOUR5 = OGReqDoubleGame_E_COLOUR_ET_COLOUR5;
  static const E_COLOUR ET_COLOUR6 = OGReqDoubleGame_E_COLOUR_ET_COLOUR6;
  static inline bool E_COLOUR_IsValid(int value) {
    return OGReqDoubleGame_E_COLOUR_IsValid(value);
  }
  static const E_COLOUR E_COLOUR_MIN =
    OGReqDoubleGame_E_COLOUR_E_COLOUR_MIN;
  static const E_COLOUR E_COLOUR_MAX =
    OGReqDoubleGame_E_COLOUR_E_COLOUR_MAX;
  static const int E_COLOUR_ARRAYSIZE =
    OGReqDoubleGame_E_COLOUR_E_COLOUR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_COLOUR_descriptor() {
    return OGReqDoubleGame_E_COLOUR_descriptor();
  }
  static inline const ::std::string& E_COLOUR_Name(E_COLOUR value) {
    return OGReqDoubleGame_E_COLOUR_Name(value);
  }
  static inline bool E_COLOUR_Parse(const ::std::string& name,
      E_COLOUR* value) {
    return OGReqDoubleGame_E_COLOUR_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional int32 colour = 2;
  inline bool has_colour() const;
  inline void clear_colour();
  static const int kColourFieldNumber = 2;
  inline ::google::protobuf::int32 colour() const;
  inline void set_colour(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqDoubleGame)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_colour();
  inline void clear_has_colour();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 colour_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqDoubleGame* default_instance_;
};
// -------------------------------------------------------------------

class OGAckGameResult : public ::google::protobuf::Message {
 public:
  OGAckGameResult();
  virtual ~OGAckGameResult();
  
  OGAckGameResult(const OGAckGameResult& from);
  
  inline OGAckGameResult& operator=(const OGAckGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckGameResult& default_instance();
  
  void Swap(OGAckGameResult* other);
  
  // implements Message ----------------------------------------------
  
  OGAckGameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckGameResult& from);
  void MergeFrom(const OGAckGameResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 grid1 = 1;
  inline bool has_grid1() const;
  inline void clear_grid1();
  static const int kGrid1FieldNumber = 1;
  inline ::google::protobuf::int32 grid1() const;
  inline void set_grid1(::google::protobuf::int32 value);
  
  // optional int32 grid2 = 2;
  inline bool has_grid2() const;
  inline void clear_grid2();
  static const int kGrid2FieldNumber = 2;
  inline ::google::protobuf::int32 grid2() const;
  inline void set_grid2(::google::protobuf::int32 value);
  
  // optional int32 grid3 = 3;
  inline bool has_grid3() const;
  inline void clear_grid3();
  static const int kGrid3FieldNumber = 3;
  inline ::google::protobuf::int32 grid3() const;
  inline void set_grid3(::google::protobuf::int32 value);
  
  // optional int32 grid4 = 4;
  inline bool has_grid4() const;
  inline void clear_grid4();
  static const int kGrid4FieldNumber = 4;
  inline ::google::protobuf::int32 grid4() const;
  inline void set_grid4(::google::protobuf::int32 value);
  
  // optional int32 grid5 = 5;
  inline bool has_grid5() const;
  inline void clear_grid5();
  static const int kGrid5FieldNumber = 5;
  inline ::google::protobuf::int32 grid5() const;
  inline void set_grid5(::google::protobuf::int32 value);
  
  // optional int32 grid6 = 6;
  inline bool has_grid6() const;
  inline void clear_grid6();
  static const int kGrid6FieldNumber = 6;
  inline ::google::protobuf::int32 grid6() const;
  inline void set_grid6(::google::protobuf::int32 value);
  
  // optional int32 grid7 = 7;
  inline bool has_grid7() const;
  inline void clear_grid7();
  static const int kGrid7FieldNumber = 7;
  inline ::google::protobuf::int32 grid7() const;
  inline void set_grid7(::google::protobuf::int32 value);
  
  // optional int32 grid8 = 8;
  inline bool has_grid8() const;
  inline void clear_grid8();
  static const int kGrid8FieldNumber = 8;
  inline ::google::protobuf::int32 grid8() const;
  inline void set_grid8(::google::protobuf::int32 value);
  
  // optional int32 grid9 = 9;
  inline bool has_grid9() const;
  inline void clear_grid9();
  static const int kGrid9FieldNumber = 9;
  inline ::google::protobuf::int32 grid9() const;
  inline void set_grid9(::google::protobuf::int32 value);
  
  // optional int32 grid10 = 10;
  inline bool has_grid10() const;
  inline void clear_grid10();
  static const int kGrid10FieldNumber = 10;
  inline ::google::protobuf::int32 grid10() const;
  inline void set_grid10(::google::protobuf::int32 value);
  
  // optional int32 grid11 = 11;
  inline bool has_grid11() const;
  inline void clear_grid11();
  static const int kGrid11FieldNumber = 11;
  inline ::google::protobuf::int32 grid11() const;
  inline void set_grid11(::google::protobuf::int32 value);
  
  // optional int32 grid12 = 12;
  inline bool has_grid12() const;
  inline void clear_grid12();
  static const int kGrid12FieldNumber = 12;
  inline ::google::protobuf::int32 grid12() const;
  inline void set_grid12(::google::protobuf::int32 value);
  
  // optional int32 grid13 = 13;
  inline bool has_grid13() const;
  inline void clear_grid13();
  static const int kGrid13FieldNumber = 13;
  inline ::google::protobuf::int32 grid13() const;
  inline void set_grid13(::google::protobuf::int32 value);
  
  // optional int32 grid14 = 14;
  inline bool has_grid14() const;
  inline void clear_grid14();
  static const int kGrid14FieldNumber = 14;
  inline ::google::protobuf::int32 grid14() const;
  inline void set_grid14(::google::protobuf::int32 value);
  
  // optional int32 grid15 = 15;
  inline bool has_grid15() const;
  inline void clear_grid15();
  static const int kGrid15FieldNumber = 15;
  inline ::google::protobuf::int32 grid15() const;
  inline void set_grid15(::google::protobuf::int32 value);
  
  // optional int64 winGold = 16;
  inline bool has_wingold() const;
  inline void clear_wingold();
  static const int kWinGoldFieldNumber = 16;
  inline ::google::protobuf::int64 wingold() const;
  inline void set_wingold(::google::protobuf::int64 value);
  
  // required int32 result = 17;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 17;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int64 winExp = 18;
  inline bool has_winexp() const;
  inline void clear_winexp();
  static const int kWinExpFieldNumber = 18;
  inline ::google::protobuf::int64 winexp() const;
  inline void set_winexp(::google::protobuf::int64 value);
  
  // optional int32 jpLineNum = 19;
  inline bool has_jplinenum() const;
  inline void clear_jplinenum();
  static const int kJpLineNumFieldNumber = 19;
  inline ::google::protobuf::int32 jplinenum() const;
  inline void set_jplinenum(::google::protobuf::int32 value);
  
  // optional int64 petWinExp = 20;
  inline bool has_petwinexp() const;
  inline void clear_petwinexp();
  static const int kPetWinExpFieldNumber = 20;
  inline ::google::protobuf::int64 petwinexp() const;
  inline void set_petwinexp(::google::protobuf::int64 value);
  
  // optional int32 page = 21;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 21;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // optional int64 petWinGold = 22;
  inline bool has_petwingold() const;
  inline void clear_petwingold();
  static const int kPetWinGoldFieldNumber = 22;
  inline ::google::protobuf::int64 petwingold() const;
  inline void set_petwingold(::google::protobuf::int64 value);
  
  // optional string wrongMsg = 23;
  inline bool has_wrongmsg() const;
  inline void clear_wrongmsg();
  static const int kWrongMsgFieldNumber = 23;
  inline const ::std::string& wrongmsg() const;
  inline void set_wrongmsg(const ::std::string& value);
  inline void set_wrongmsg(const char* value);
  inline void set_wrongmsg(const char* value, size_t size);
  inline ::std::string* mutable_wrongmsg();
  inline ::std::string* release_wrongmsg();
  
  // optional int32 freeFlg = 24;
  inline bool has_freeflg() const;
  inline void clear_freeflg();
  static const int kFreeFlgFieldNumber = 24;
  inline ::google::protobuf::int32 freeflg() const;
  inline void set_freeflg(::google::protobuf::int32 value);
  
  // optional int64 goldPlus = 25;
  inline bool has_goldplus() const;
  inline void clear_goldplus();
  static const int kGoldPlusFieldNumber = 25;
  inline ::google::protobuf::int64 goldplus() const;
  inline void set_goldplus(::google::protobuf::int64 value);
  
  // optional int32 freeTimes = 26;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreeTimesFieldNumber = 26;
  inline ::google::protobuf::int32 freetimes() const;
  inline void set_freetimes(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckGameResult)
 private:
  inline void set_has_grid1();
  inline void clear_has_grid1();
  inline void set_has_grid2();
  inline void clear_has_grid2();
  inline void set_has_grid3();
  inline void clear_has_grid3();
  inline void set_has_grid4();
  inline void clear_has_grid4();
  inline void set_has_grid5();
  inline void clear_has_grid5();
  inline void set_has_grid6();
  inline void clear_has_grid6();
  inline void set_has_grid7();
  inline void clear_has_grid7();
  inline void set_has_grid8();
  inline void clear_has_grid8();
  inline void set_has_grid9();
  inline void clear_has_grid9();
  inline void set_has_grid10();
  inline void clear_has_grid10();
  inline void set_has_grid11();
  inline void clear_has_grid11();
  inline void set_has_grid12();
  inline void clear_has_grid12();
  inline void set_has_grid13();
  inline void clear_has_grid13();
  inline void set_has_grid14();
  inline void clear_has_grid14();
  inline void set_has_grid15();
  inline void clear_has_grid15();
  inline void set_has_wingold();
  inline void clear_has_wingold();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_winexp();
  inline void clear_has_winexp();
  inline void set_has_jplinenum();
  inline void clear_has_jplinenum();
  inline void set_has_petwinexp();
  inline void clear_has_petwinexp();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_petwingold();
  inline void clear_has_petwingold();
  inline void set_has_wrongmsg();
  inline void clear_has_wrongmsg();
  inline void set_has_freeflg();
  inline void clear_has_freeflg();
  inline void set_has_goldplus();
  inline void clear_has_goldplus();
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 grid1_;
  ::google::protobuf::int32 grid2_;
  ::google::protobuf::int32 grid3_;
  ::google::protobuf::int32 grid4_;
  ::google::protobuf::int32 grid5_;
  ::google::protobuf::int32 grid6_;
  ::google::protobuf::int32 grid7_;
  ::google::protobuf::int32 grid8_;
  ::google::protobuf::int32 grid9_;
  ::google::protobuf::int32 grid10_;
  ::google::protobuf::int32 grid11_;
  ::google::protobuf::int32 grid12_;
  ::google::protobuf::int32 grid13_;
  ::google::protobuf::int32 grid14_;
  ::google::protobuf::int64 wingold_;
  ::google::protobuf::int32 grid15_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 winexp_;
  ::google::protobuf::int64 petwinexp_;
  ::google::protobuf::int32 jplinenum_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int64 petwingold_;
  ::std::string* wrongmsg_;
  ::google::protobuf::int64 goldplus_;
  ::google::protobuf::int32 freeflg_;
  ::google::protobuf::int32 freetimes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckGameResult* default_instance_;
};
// -------------------------------------------------------------------

class GameToJSupport : public ::google::protobuf::Message {
 public:
  GameToJSupport();
  virtual ~GameToJSupport();
  
  GameToJSupport(const GameToJSupport& from);
  
  inline GameToJSupport& operator=(const GameToJSupport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameToJSupport& default_instance();
  
  void Swap(GameToJSupport* other);
  
  // implements Message ----------------------------------------------
  
  GameToJSupport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameToJSupport& from);
  void MergeFrom(const GameToJSupport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int64 needGold = 3;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 3;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // required int64 winGold = 4;
  inline bool has_wingold() const;
  inline void clear_wingold();
  static const int kWinGoldFieldNumber = 4;
  inline ::google::protobuf::int64 wingold() const;
  inline void set_wingold(::google::protobuf::int64 value);
  
  // required int32 winExp = 5;
  inline bool has_winexp() const;
  inline void clear_winexp();
  static const int kWinExpFieldNumber = 5;
  inline ::google::protobuf::int32 winexp() const;
  inline void set_winexp(::google::protobuf::int32 value);
  
  // required int32 jpLineNum = 6;
  inline bool has_jplinenum() const;
  inline void clear_jplinenum();
  static const int kJpLineNumFieldNumber = 6;
  inline ::google::protobuf::int32 jplinenum() const;
  inline void set_jplinenum(::google::protobuf::int32 value);
  
  // required int32 jpPass = 7;
  inline bool has_jppass() const;
  inline void clear_jppass();
  static const int kJpPassFieldNumber = 7;
  inline ::google::protobuf::int32 jppass() const;
  inline void set_jppass(::google::protobuf::int32 value);
  
  // optional int64 jp = 8;
  inline bool has_jp() const;
  inline void clear_jp();
  static const int kJpFieldNumber = 8;
  inline ::google::protobuf::int64 jp() const;
  inline void set_jp(::google::protobuf::int64 value);
  
  // optional int32 bigType = 9;
  inline bool has_bigtype() const;
  inline void clear_bigtype();
  static const int kBigTypeFieldNumber = 9;
  inline ::google::protobuf::int32 bigtype() const;
  inline void set_bigtype(::google::protobuf::int32 value);
  
  // optional int64 petWinGold = 10;
  inline bool has_petwingold() const;
  inline void clear_petwingold();
  static const int kPetWinGoldFieldNumber = 10;
  inline ::google::protobuf::int64 petwingold() const;
  inline void set_petwingold(::google::protobuf::int64 value);
  
  // optional int32 jpBet = 11;
  inline bool has_jpbet() const;
  inline void clear_jpbet();
  static const int kJpBetFieldNumber = 11;
  inline ::google::protobuf::int32 jpbet() const;
  inline void set_jpbet(::google::protobuf::int32 value);
  
  // optional int32 bet = 12;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 12;
  inline ::google::protobuf::int32 bet() const;
  inline void set_bet(::google::protobuf::int32 value);
  
  // optional int64 petWinExp = 13;
  inline bool has_petwinexp() const;
  inline void clear_petwinexp();
  static const int kPetWinExpFieldNumber = 13;
  inline ::google::protobuf::int64 petwinexp() const;
  inline void set_petwinexp(::google::protobuf::int64 value);
  
  // optional int32 line = 14;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 14;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 times = 15;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 15;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional string str1 = 16;
  inline bool has_str1() const;
  inline void clear_str1();
  static const int kStr1FieldNumber = 16;
  inline const ::std::string& str1() const;
  inline void set_str1(const ::std::string& value);
  inline void set_str1(const char* value);
  inline void set_str1(const char* value, size_t size);
  inline ::std::string* mutable_str1();
  inline ::std::string* release_str1();
  
  // optional int32 freeFlg = 17;
  inline bool has_freeflg() const;
  inline void clear_freeflg();
  static const int kFreeFlgFieldNumber = 17;
  inline ::google::protobuf::int32 freeflg() const;
  inline void set_freeflg(::google::protobuf::int32 value);
  
  // optional int64 goldPlus = 18;
  inline bool has_goldplus() const;
  inline void clear_goldplus();
  static const int kGoldPlusFieldNumber = 18;
  inline ::google::protobuf::int64 goldplus() const;
  inline void set_goldplus(::google::protobuf::int64 value);
  
  // optional string jpStarName = 19;
  inline bool has_jpstarname() const;
  inline void clear_jpstarname();
  static const int kJpStarNameFieldNumber = 19;
  inline const ::std::string& jpstarname() const;
  inline void set_jpstarname(const ::std::string& value);
  inline void set_jpstarname(const char* value);
  inline void set_jpstarname(const char* value, size_t size);
  inline ::std::string* mutable_jpstarname();
  inline ::std::string* release_jpstarname();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.GameToJSupport)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_needgold();
  inline void clear_has_needgold();
  inline void set_has_wingold();
  inline void clear_has_wingold();
  inline void set_has_winexp();
  inline void clear_has_winexp();
  inline void set_has_jplinenum();
  inline void clear_has_jplinenum();
  inline void set_has_jppass();
  inline void clear_has_jppass();
  inline void set_has_jp();
  inline void clear_has_jp();
  inline void set_has_bigtype();
  inline void clear_has_bigtype();
  inline void set_has_petwingold();
  inline void clear_has_petwingold();
  inline void set_has_jpbet();
  inline void clear_has_jpbet();
  inline void set_has_bet();
  inline void clear_has_bet();
  inline void set_has_petwinexp();
  inline void clear_has_petwinexp();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_str1();
  inline void clear_has_str1();
  inline void set_has_freeflg();
  inline void clear_has_freeflg();
  inline void set_has_goldplus();
  inline void clear_has_goldplus();
  inline void set_has_jpstarname();
  inline void clear_has_jpstarname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int64 needgold_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 winexp_;
  ::google::protobuf::int64 wingold_;
  ::google::protobuf::int32 jplinenum_;
  ::google::protobuf::int32 jppass_;
  ::google::protobuf::int64 jp_;
  ::google::protobuf::int64 petwingold_;
  ::google::protobuf::int32 bigtype_;
  ::google::protobuf::int32 jpbet_;
  ::google::protobuf::int64 petwinexp_;
  ::google::protobuf::int32 bet_;
  ::google::protobuf::int32 line_;
  ::std::string* str1_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 freeflg_;
  ::google::protobuf::int64 goldplus_;
  ::std::string* jpstarname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static GameToJSupport* default_instance_;
};
// -------------------------------------------------------------------

class OGAckDoubleResult : public ::google::protobuf::Message {
 public:
  OGAckDoubleResult();
  virtual ~OGAckDoubleResult();
  
  OGAckDoubleResult(const OGAckDoubleResult& from);
  
  inline OGAckDoubleResult& operator=(const OGAckDoubleResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckDoubleResult& default_instance();
  
  void Swap(OGAckDoubleResult* other);
  
  // implements Message ----------------------------------------------
  
  OGAckDoubleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckDoubleResult& from);
  void MergeFrom(const OGAckDoubleResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckDoubleResult_E_Result E_Result;
  static const E_Result ET_SUCCESS = OGAckDoubleResult_E_Result_ET_SUCCESS;
  static const E_Result ET_FAILED = OGAckDoubleResult_E_Result_ET_FAILED;
  static inline bool E_Result_IsValid(int value) {
    return OGAckDoubleResult_E_Result_IsValid(value);
  }
  static const E_Result E_Result_MIN =
    OGAckDoubleResult_E_Result_E_Result_MIN;
  static const E_Result E_Result_MAX =
    OGAckDoubleResult_E_Result_E_Result_MAX;
  static const int E_Result_ARRAYSIZE =
    OGAckDoubleResult_E_Result_E_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_Result_descriptor() {
    return OGAckDoubleResult_E_Result_descriptor();
  }
  static inline const ::std::string& E_Result_Name(E_Result value) {
    return OGAckDoubleResult_E_Result_Name(value);
  }
  static inline bool E_Result_Parse(const ::std::string& name,
      E_Result* value) {
    return OGAckDoubleResult_E_Result_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // required int64 winGold = 2;
  inline bool has_wingold() const;
  inline void clear_wingold();
  static const int kWinGoldFieldNumber = 2;
  inline ::google::protobuf::int64 wingold() const;
  inline void set_wingold(::google::protobuf::int64 value);
  
  // required int32 start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);
  
  // optional int32 cardNumber = 4;
  inline bool has_cardnumber() const;
  inline void clear_cardnumber();
  static const int kCardNumberFieldNumber = 4;
  inline ::google::protobuf::int32 cardnumber() const;
  inline void set_cardnumber(::google::protobuf::int32 value);
  
  // required int64 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // required int32 getGoldFlg = 6;
  inline bool has_getgoldflg() const;
  inline void clear_getgoldflg();
  static const int kGetGoldFlgFieldNumber = 6;
  inline ::google::protobuf::int32 getgoldflg() const;
  inline void set_getgoldflg(::google::protobuf::int32 value);
  
  // optional string roleName = 7;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 7;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 bigType = 8;
  inline bool has_bigtype() const;
  inline void clear_bigtype();
  static const int kBigTypeFieldNumber = 8;
  inline ::google::protobuf::int32 bigtype() const;
  inline void set_bigtype(::google::protobuf::int32 value);
  
  // optional int64 needGold = 9;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 9;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // optional int32 goldPlus = 10;
  inline bool has_goldplus() const;
  inline void clear_goldplus();
  static const int kGoldPlusFieldNumber = 10;
  inline ::google::protobuf::int32 goldplus() const;
  inline void set_goldplus(::google::protobuf::int32 value);
  
  // optional int64 goldPlusValue = 11;
  inline bool has_goldplusvalue() const;
  inline void clear_goldplusvalue();
  static const int kGoldPlusValueFieldNumber = 11;
  inline ::google::protobuf::int64 goldplusvalue() const;
  inline void set_goldplusvalue(::google::protobuf::int64 value);
  
  // optional int32 page = 14;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 14;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // optional int32 colour = 12;
  inline bool has_colour() const;
  inline void clear_colour();
  static const int kColourFieldNumber = 12;
  inline ::google::protobuf::int32 colour() const;
  inline void set_colour(::google::protobuf::int32 value);
  
  // optional int32 times = 13;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 13;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional int32 whiteFlg = 15;
  inline bool has_whiteflg() const;
  inline void clear_whiteflg();
  static const int kWhiteFlgFieldNumber = 15;
  inline ::google::protobuf::int32 whiteflg() const;
  inline void set_whiteflg(::google::protobuf::int32 value);
  
  // optional string d = 16;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 16;
  inline const ::std::string& d() const;
  inline void set_d(const ::std::string& value);
  inline void set_d(const char* value);
  inline void set_d(const char* value, size_t size);
  inline ::std::string* mutable_d();
  inline ::std::string* release_d();
  
  // optional int32 doubleType = 17;
  inline bool has_doubletype() const;
  inline void clear_doubletype();
  static const int kDoubleTypeFieldNumber = 17;
  inline ::google::protobuf::int32 doubletype() const;
  inline void set_doubletype(::google::protobuf::int32 value);
  
  // optional int32 freeTimes = 18;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreeTimesFieldNumber = 18;
  inline ::google::protobuf::int32 freetimes() const;
  inline void set_freetimes(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckDoubleResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_wingold();
  inline void clear_has_wingold();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_cardnumber();
  inline void clear_has_cardnumber();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_getgoldflg();
  inline void clear_has_getgoldflg();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_bigtype();
  inline void clear_has_bigtype();
  inline void set_has_needgold();
  inline void clear_has_needgold();
  inline void set_has_goldplus();
  inline void clear_has_goldplus();
  inline void set_has_goldplusvalue();
  inline void clear_has_goldplusvalue();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_colour();
  inline void clear_has_colour();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_whiteflg();
  inline void clear_has_whiteflg();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_doubletype();
  inline void clear_has_doubletype();
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 wingold_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 cardnumber_;
  ::google::protobuf::int32 getgoldflg_;
  ::std::string* rolename_;
  ::google::protobuf::int64 needgold_;
  ::google::protobuf::int32 bigtype_;
  ::google::protobuf::int32 goldplus_;
  ::google::protobuf::int64 goldplusvalue_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 colour_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 whiteflg_;
  ::std::string* d_;
  ::google::protobuf::int32 doubletype_;
  ::google::protobuf::int32 freetimes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckDoubleResult* default_instance_;
};
// -------------------------------------------------------------------

class OGReqDoubleGetGold : public ::google::protobuf::Message {
 public:
  OGReqDoubleGetGold();
  virtual ~OGReqDoubleGetGold();
  
  OGReqDoubleGetGold(const OGReqDoubleGetGold& from);
  
  inline OGReqDoubleGetGold& operator=(const OGReqDoubleGetGold& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqDoubleGetGold& default_instance();
  
  void Swap(OGReqDoubleGetGold* other);
  
  // implements Message ----------------------------------------------
  
  OGReqDoubleGetGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqDoubleGetGold& from);
  void MergeFrom(const OGReqDoubleGetGold& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqDoubleGetGold)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqDoubleGetGold* default_instance_;
};
// -------------------------------------------------------------------

class OGAckDoubleGetGold : public ::google::protobuf::Message {
 public:
  OGAckDoubleGetGold();
  virtual ~OGAckDoubleGetGold();
  
  OGAckDoubleGetGold(const OGAckDoubleGetGold& from);
  
  inline OGAckDoubleGetGold& operator=(const OGAckDoubleGetGold& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckDoubleGetGold& default_instance();
  
  void Swap(OGAckDoubleGetGold* other);
  
  // implements Message ----------------------------------------------
  
  OGAckDoubleGetGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckDoubleGetGold& from);
  void MergeFrom(const OGAckDoubleGetGold& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // required int64 winGold = 2;
  inline bool has_wingold() const;
  inline void clear_wingold();
  static const int kWinGoldFieldNumber = 2;
  inline ::google::protobuf::int64 wingold() const;
  inline void set_wingold(::google::protobuf::int64 value);
  
  // required int32 goldPlus = 3;
  inline bool has_goldplus() const;
  inline void clear_goldplus();
  static const int kGoldPlusFieldNumber = 3;
  inline ::google::protobuf::int32 goldplus() const;
  inline void set_goldplus(::google::protobuf::int32 value);
  
  // required int64 goldPlusValue = 4;
  inline bool has_goldplusvalue() const;
  inline void clear_goldplusvalue();
  static const int kGoldPlusValueFieldNumber = 4;
  inline ::google::protobuf::int64 goldplusvalue() const;
  inline void set_goldplusvalue(::google::protobuf::int64 value);
  
  // required int64 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional int32 page = 6;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 6;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckDoubleGetGold)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_wingold();
  inline void clear_has_wingold();
  inline void set_has_goldplus();
  inline void clear_has_goldplus();
  inline void set_has_goldplusvalue();
  inline void clear_has_goldplusvalue();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_page();
  inline void clear_has_page();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int64 wingold_;
  ::google::protobuf::int64 goldplusvalue_;
  ::google::protobuf::int32 goldplus_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int64 gold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckDoubleGetGold* default_instance_;
};
// -------------------------------------------------------------------

class GameLoseMoney : public ::google::protobuf::Message {
 public:
  GameLoseMoney();
  virtual ~GameLoseMoney();
  
  GameLoseMoney(const GameLoseMoney& from);
  
  inline GameLoseMoney& operator=(const GameLoseMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameLoseMoney& default_instance();
  
  void Swap(GameLoseMoney* other);
  
  // implements Message ----------------------------------------------
  
  GameLoseMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameLoseMoney& from);
  void MergeFrom(const GameLoseMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int64 needGold = 2;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 2;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.GameLoseMoney)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_needgold();
  inline void clear_has_needgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 needgold_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static GameLoseMoney* default_instance_;
};
// -------------------------------------------------------------------

class ReqJP : public ::google::protobuf::Message {
 public:
  ReqJP();
  virtual ~ReqJP();
  
  ReqJP(const ReqJP& from);
  
  inline ReqJP& operator=(const ReqJP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqJP& default_instance();
  
  void Swap(ReqJP* other);
  
  // implements Message ----------------------------------------------
  
  ReqJP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqJP& from);
  void MergeFrom(const ReqJP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.ReqJP)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static ReqJP* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJP : public ::google::protobuf::Message {
 public:
  OGAckJP();
  virtual ~OGAckJP();
  
  OGAckJP(const OGAckJP& from);
  
  inline OGAckJP& operator=(const OGAckJP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJP& default_instance();
  
  void Swap(OGAckJP* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJP& from);
  void MergeFrom(const OGAckJP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 jp = 1;
  inline bool has_jp() const;
  inline void clear_jp();
  static const int kJpFieldNumber = 1;
  inline ::google::protobuf::int64 jp() const;
  inline void set_jp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJP)
 private:
  inline void set_has_jp();
  inline void clear_has_jp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 jp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJP* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRoleUpLev : public ::google::protobuf::Message {
 public:
  OGAckRoleUpLev();
  virtual ~OGAckRoleUpLev();
  
  OGAckRoleUpLev(const OGAckRoleUpLev& from);
  
  inline OGAckRoleUpLev& operator=(const OGAckRoleUpLev& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRoleUpLev& default_instance();
  
  void Swap(OGAckRoleUpLev* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRoleUpLev* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRoleUpLev& from);
  void MergeFrom(const OGAckRoleUpLev& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 curLev = 1;
  inline bool has_curlev() const;
  inline void clear_curlev();
  static const int kCurLevFieldNumber = 1;
  inline ::google::protobuf::int32 curlev() const;
  inline void set_curlev(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRoleUpLev)
 private:
  inline void set_has_curlev();
  inline void clear_has_curlev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 curlev_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRoleUpLev* default_instance_;
};
// -------------------------------------------------------------------

class OGReqReadDB : public ::google::protobuf::Message {
 public:
  OGReqReadDB();
  virtual ~OGReqReadDB();
  
  OGReqReadDB(const OGReqReadDB& from);
  
  inline OGReqReadDB& operator=(const OGReqReadDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqReadDB& default_instance();
  
  void Swap(OGReqReadDB* other);
  
  // implements Message ----------------------------------------------
  
  OGReqReadDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqReadDB& from);
  void MergeFrom(const OGReqReadDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqReadDB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqReadDB* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPool : public ::google::protobuf::Message {
 public:
  OGReqPool();
  virtual ~OGReqPool();
  
  OGReqPool(const OGReqPool& from);
  
  inline OGReqPool& operator=(const OGReqPool& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPool& default_instance();
  
  void Swap(OGReqPool* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPool& from);
  void MergeFrom(const OGReqPool& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPool)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPool* default_instance_;
};
// -------------------------------------------------------------------

class OGReqMailsToPlayer : public ::google::protobuf::Message {
 public:
  OGReqMailsToPlayer();
  virtual ~OGReqMailsToPlayer();
  
  OGReqMailsToPlayer(const OGReqMailsToPlayer& from);
  
  inline OGReqMailsToPlayer& operator=(const OGReqMailsToPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqMailsToPlayer& default_instance();
  
  void Swap(OGReqMailsToPlayer* other);
  
  // implements Message ----------------------------------------------
  
  OGReqMailsToPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqMailsToPlayer& from);
  void MergeFrom(const OGReqMailsToPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string players = 1;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::std::string& players() const;
  inline void set_players(const ::std::string& value);
  inline void set_players(const char* value);
  inline void set_players(const char* value, size_t size);
  inline ::std::string* mutable_players();
  inline ::std::string* release_players();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqMailsToPlayer)
 private:
  inline void set_has_players();
  inline void clear_has_players();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqMailsToPlayer* default_instance_;
};
// -------------------------------------------------------------------

class OGReqAddWhite : public ::google::protobuf::Message {
 public:
  OGReqAddWhite();
  virtual ~OGReqAddWhite();
  
  OGReqAddWhite(const OGReqAddWhite& from);
  
  inline OGReqAddWhite& operator=(const OGReqAddWhite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqAddWhite& default_instance();
  
  void Swap(OGReqAddWhite* other);
  
  // implements Message ----------------------------------------------
  
  OGReqAddWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqAddWhite& from);
  void MergeFrom(const OGReqAddWhite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 total_On = 1;
  inline bool has_total_on() const;
  inline void clear_total_on();
  static const int kTotalOnFieldNumber = 1;
  inline ::google::protobuf::int32 total_on() const;
  inline void set_total_on(::google::protobuf::int32 value);
  
  // optional string total_StartTime = 2;
  inline bool has_total_starttime() const;
  inline void clear_total_starttime();
  static const int kTotalStartTimeFieldNumber = 2;
  inline const ::std::string& total_starttime() const;
  inline void set_total_starttime(const ::std::string& value);
  inline void set_total_starttime(const char* value);
  inline void set_total_starttime(const char* value, size_t size);
  inline ::std::string* mutable_total_starttime();
  inline ::std::string* release_total_starttime();
  
  // optional string total_EndTime = 3;
  inline bool has_total_endtime() const;
  inline void clear_total_endtime();
  static const int kTotalEndTimeFieldNumber = 3;
  inline const ::std::string& total_endtime() const;
  inline void set_total_endtime(const ::std::string& value);
  inline void set_total_endtime(const char* value);
  inline void set_total_endtime(const char* value, size_t size);
  inline ::std::string* mutable_total_endtime();
  inline ::std::string* release_total_endtime();
  
  // optional int64 total_Up = 4;
  inline bool has_total_up() const;
  inline void clear_total_up();
  static const int kTotalUpFieldNumber = 4;
  inline ::google::protobuf::int64 total_up() const;
  inline void set_total_up(::google::protobuf::int64 value);
  
  // optional int32 total_UpJilv = 5;
  inline bool has_total_upjilv() const;
  inline void clear_total_upjilv();
  static const int kTotalUpJilvFieldNumber = 5;
  inline ::google::protobuf::int32 total_upjilv() const;
  inline void set_total_upjilv(::google::protobuf::int32 value);
  
  // optional int64 total_Down = 6;
  inline bool has_total_down() const;
  inline void clear_total_down();
  static const int kTotalDownFieldNumber = 6;
  inline ::google::protobuf::int64 total_down() const;
  inline void set_total_down(::google::protobuf::int64 value);
  
  // optional int32 total_DownJilv = 7;
  inline bool has_total_downjilv() const;
  inline void clear_total_downjilv();
  static const int kTotalDownJilvFieldNumber = 7;
  inline ::google::protobuf::int32 total_downjilv() const;
  inline void set_total_downjilv(::google::protobuf::int32 value);
  
  // optional string roleName = 8;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 8;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 flg = 9;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 9;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // optional string key = 10;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 10;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string white = 11;
  inline bool has_white() const;
  inline void clear_white();
  static const int kWhiteFieldNumber = 11;
  inline const ::std::string& white() const;
  inline void set_white(const ::std::string& value);
  inline void set_white(const char* value);
  inline void set_white(const char* value, size_t size);
  inline ::std::string* mutable_white();
  inline ::std::string* release_white();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqAddWhite)
 private:
  inline void set_has_total_on();
  inline void clear_has_total_on();
  inline void set_has_total_starttime();
  inline void clear_has_total_starttime();
  inline void set_has_total_endtime();
  inline void clear_has_total_endtime();
  inline void set_has_total_up();
  inline void clear_has_total_up();
  inline void set_has_total_upjilv();
  inline void clear_has_total_upjilv();
  inline void set_has_total_down();
  inline void clear_has_total_down();
  inline void set_has_total_downjilv();
  inline void clear_has_total_downjilv();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_white();
  inline void clear_has_white();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* total_starttime_;
  ::std::string* total_endtime_;
  ::google::protobuf::int32 total_on_;
  ::google::protobuf::int32 total_upjilv_;
  ::google::protobuf::int64 total_up_;
  ::google::protobuf::int64 total_down_;
  ::std::string* rolename_;
  ::google::protobuf::int32 total_downjilv_;
  ::google::protobuf::int32 flg_;
  ::std::string* key_;
  ::std::string* white_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqAddWhite* default_instance_;
};
// -------------------------------------------------------------------

class OGReqWhiteList : public ::google::protobuf::Message {
 public:
  OGReqWhiteList();
  virtual ~OGReqWhiteList();
  
  OGReqWhiteList(const OGReqWhiteList& from);
  
  inline OGReqWhiteList& operator=(const OGReqWhiteList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqWhiteList& default_instance();
  
  void Swap(OGReqWhiteList* other);
  
  // implements Message ----------------------------------------------
  
  OGReqWhiteList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqWhiteList& from);
  void MergeFrom(const OGReqWhiteList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string white = 2;
  inline bool has_white() const;
  inline void clear_white();
  static const int kWhiteFieldNumber = 2;
  inline const ::std::string& white() const;
  inline void set_white(const ::std::string& value);
  inline void set_white(const char* value);
  inline void set_white(const char* value, size_t size);
  inline ::std::string* mutable_white();
  inline ::std::string* release_white();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqWhiteList)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_white();
  inline void clear_has_white();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* white_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqWhiteList* default_instance_;
};
// -------------------------------------------------------------------

class OGAckWhiteList_White : public ::google::protobuf::Message {
 public:
  OGAckWhiteList_White();
  virtual ~OGAckWhiteList_White();
  
  OGAckWhiteList_White(const OGAckWhiteList_White& from);
  
  inline OGAckWhiteList_White& operator=(const OGAckWhiteList_White& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckWhiteList_White& default_instance();
  
  void Swap(OGAckWhiteList_White* other);
  
  // implements Message ----------------------------------------------
  
  OGAckWhiteList_White* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckWhiteList_White& from);
  void MergeFrom(const OGAckWhiteList_White& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 total_On = 1;
  inline bool has_total_on() const;
  inline void clear_total_on();
  static const int kTotalOnFieldNumber = 1;
  inline ::google::protobuf::int32 total_on() const;
  inline void set_total_on(::google::protobuf::int32 value);
  
  // optional string total_StartTime = 2;
  inline bool has_total_starttime() const;
  inline void clear_total_starttime();
  static const int kTotalStartTimeFieldNumber = 2;
  inline const ::std::string& total_starttime() const;
  inline void set_total_starttime(const ::std::string& value);
  inline void set_total_starttime(const char* value);
  inline void set_total_starttime(const char* value, size_t size);
  inline ::std::string* mutable_total_starttime();
  inline ::std::string* release_total_starttime();
  
  // optional string total_EndTime = 3;
  inline bool has_total_endtime() const;
  inline void clear_total_endtime();
  static const int kTotalEndTimeFieldNumber = 3;
  inline const ::std::string& total_endtime() const;
  inline void set_total_endtime(const ::std::string& value);
  inline void set_total_endtime(const char* value);
  inline void set_total_endtime(const char* value, size_t size);
  inline ::std::string* mutable_total_endtime();
  inline ::std::string* release_total_endtime();
  
  // optional int64 total_Up = 4;
  inline bool has_total_up() const;
  inline void clear_total_up();
  static const int kTotalUpFieldNumber = 4;
  inline ::google::protobuf::int64 total_up() const;
  inline void set_total_up(::google::protobuf::int64 value);
  
  // optional int32 total_UpJilv = 5;
  inline bool has_total_upjilv() const;
  inline void clear_total_upjilv();
  static const int kTotalUpJilvFieldNumber = 5;
  inline ::google::protobuf::int32 total_upjilv() const;
  inline void set_total_upjilv(::google::protobuf::int32 value);
  
  // optional int64 total_Down = 6;
  inline bool has_total_down() const;
  inline void clear_total_down();
  static const int kTotalDownFieldNumber = 6;
  inline ::google::protobuf::int64 total_down() const;
  inline void set_total_down(::google::protobuf::int64 value);
  
  // optional int32 total_DownJilv = 7;
  inline bool has_total_downjilv() const;
  inline void clear_total_downjilv();
  static const int kTotalDownJilvFieldNumber = 7;
  inline ::google::protobuf::int32 total_downjilv() const;
  inline void set_total_downjilv(::google::protobuf::int32 value);
  
  // optional string roleName = 8;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 8;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 winDay = 9;
  inline bool has_winday() const;
  inline void clear_winday();
  static const int kWinDayFieldNumber = 9;
  inline ::google::protobuf::int64 winday() const;
  inline void set_winday(::google::protobuf::int64 value);
  
  // optional int64 winMonth = 10;
  inline bool has_winmonth() const;
  inline void clear_winmonth();
  static const int kWinMonthFieldNumber = 10;
  inline ::google::protobuf::int64 winmonth() const;
  inline void set_winmonth(::google::protobuf::int64 value);
  
  // optional int64 winTotal = 11;
  inline bool has_wintotal() const;
  inline void clear_wintotal();
  static const int kWinTotalFieldNumber = 11;
  inline ::google::protobuf::int64 wintotal() const;
  inline void set_wintotal(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckWhiteList.White)
 private:
  inline void set_has_total_on();
  inline void clear_has_total_on();
  inline void set_has_total_starttime();
  inline void clear_has_total_starttime();
  inline void set_has_total_endtime();
  inline void clear_has_total_endtime();
  inline void set_has_total_up();
  inline void clear_has_total_up();
  inline void set_has_total_upjilv();
  inline void clear_has_total_upjilv();
  inline void set_has_total_down();
  inline void clear_has_total_down();
  inline void set_has_total_downjilv();
  inline void clear_has_total_downjilv();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_winday();
  inline void clear_has_winday();
  inline void set_has_winmonth();
  inline void clear_has_winmonth();
  inline void set_has_wintotal();
  inline void clear_has_wintotal();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* total_starttime_;
  ::std::string* total_endtime_;
  ::google::protobuf::int32 total_on_;
  ::google::protobuf::int32 total_upjilv_;
  ::google::protobuf::int64 total_up_;
  ::google::protobuf::int64 total_down_;
  ::std::string* rolename_;
  ::google::protobuf::int64 winday_;
  ::google::protobuf::int64 winmonth_;
  ::google::protobuf::int64 wintotal_;
  ::google::protobuf::int32 total_downjilv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckWhiteList_White* default_instance_;
};
// -------------------------------------------------------------------

class OGAckWhiteList : public ::google::protobuf::Message {
 public:
  OGAckWhiteList();
  virtual ~OGAckWhiteList();
  
  OGAckWhiteList(const OGAckWhiteList& from);
  
  inline OGAckWhiteList& operator=(const OGAckWhiteList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckWhiteList& default_instance();
  
  void Swap(OGAckWhiteList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckWhiteList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckWhiteList& from);
  void MergeFrom(const OGAckWhiteList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckWhiteList_White White;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
  inline int whitelist_size() const;
  inline void clear_whitelist();
  static const int kWhiteListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckWhiteList_White& whitelist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckWhiteList_White* mutable_whitelist(int index);
  inline ::com::ourgame::texasSlots::OGAckWhiteList_White* add_whitelist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckWhiteList_White >&
      whitelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckWhiteList_White >*
      mutable_whitelist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckWhiteList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckWhiteList_White > whitelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckWhiteList* default_instance_;
};
// -------------------------------------------------------------------

class OGReqDelWhite : public ::google::protobuf::Message {
 public:
  OGReqDelWhite();
  virtual ~OGReqDelWhite();
  
  OGReqDelWhite(const OGReqDelWhite& from);
  
  inline OGReqDelWhite& operator=(const OGReqDelWhite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqDelWhite& default_instance();
  
  void Swap(OGReqDelWhite* other);
  
  // implements Message ----------------------------------------------
  
  OGReqDelWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqDelWhite& from);
  void MergeFrom(const OGReqDelWhite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 flg = 2;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 2;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string white = 4;
  inline bool has_white() const;
  inline void clear_white();
  static const int kWhiteFieldNumber = 4;
  inline const ::std::string& white() const;
  inline void set_white(const ::std::string& value);
  inline void set_white(const char* value);
  inline void set_white(const char* value, size_t size);
  inline ::std::string* mutable_white();
  inline ::std::string* release_white();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqDelWhite)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_white();
  inline void clear_has_white();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::std::string* key_;
  ::std::string* white_;
  ::google::protobuf::int32 flg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqDelWhite* default_instance_;
};
// -------------------------------------------------------------------

class OGReqSelectWhite : public ::google::protobuf::Message {
 public:
  OGReqSelectWhite();
  virtual ~OGReqSelectWhite();
  
  OGReqSelectWhite(const OGReqSelectWhite& from);
  
  inline OGReqSelectWhite& operator=(const OGReqSelectWhite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqSelectWhite& default_instance();
  
  void Swap(OGReqSelectWhite* other);
  
  // implements Message ----------------------------------------------
  
  OGReqSelectWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqSelectWhite& from);
  void MergeFrom(const OGReqSelectWhite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string white = 3;
  inline bool has_white() const;
  inline void clear_white();
  static const int kWhiteFieldNumber = 3;
  inline const ::std::string& white() const;
  inline void set_white(const ::std::string& value);
  inline void set_white(const char* value);
  inline void set_white(const char* value, size_t size);
  inline ::std::string* mutable_white();
  inline ::std::string* release_white();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqSelectWhite)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_white();
  inline void clear_has_white();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::std::string* key_;
  ::std::string* white_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqSelectWhite* default_instance_;
};
// -------------------------------------------------------------------

class OGAckSelectWhite : public ::google::protobuf::Message {
 public:
  OGAckSelectWhite();
  virtual ~OGAckSelectWhite();
  
  OGAckSelectWhite(const OGAckSelectWhite& from);
  
  inline OGAckSelectWhite& operator=(const OGAckSelectWhite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckSelectWhite& default_instance();
  
  void Swap(OGAckSelectWhite* other);
  
  // implements Message ----------------------------------------------
  
  OGAckSelectWhite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckSelectWhite& from);
  void MergeFrom(const OGAckSelectWhite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int64 result() const;
  inline void set_result(::google::protobuf::int64 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 winTotal = 3;
  inline bool has_wintotal() const;
  inline void clear_wintotal();
  static const int kWinTotalFieldNumber = 3;
  inline ::google::protobuf::int64 wintotal() const;
  inline void set_wintotal(::google::protobuf::int64 value);
  
  // optional string white = 4;
  inline bool has_white() const;
  inline void clear_white();
  static const int kWhiteFieldNumber = 4;
  inline const ::std::string& white() const;
  inline void set_white(const ::std::string& value);
  inline void set_white(const char* value);
  inline void set_white(const char* value, size_t size);
  inline ::std::string* mutable_white();
  inline ::std::string* release_white();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckSelectWhite)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_wintotal();
  inline void clear_has_wintotal();
  inline void set_has_white();
  inline void clear_has_white();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 result_;
  ::std::string* rolename_;
  ::google::protobuf::int64 wintotal_;
  ::std::string* white_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckSelectWhite* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPet : public ::google::protobuf::Message {
 public:
  OGAckPet();
  virtual ~OGAckPet();
  
  OGAckPet(const OGAckPet& from);
  
  inline OGAckPet& operator=(const OGAckPet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPet& default_instance();
  
  void Swap(OGAckPet* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPet& from);
  void MergeFrom(const OGAckPet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string petName = 1;
  inline bool has_petname() const;
  inline void clear_petname();
  static const int kPetNameFieldNumber = 1;
  inline const ::std::string& petname() const;
  inline void set_petname(const ::std::string& value);
  inline void set_petname(const char* value);
  inline void set_petname(const char* value, size_t size);
  inline ::std::string* mutable_petname();
  inline ::std::string* release_petname();
  
  // optional int32 pinzhi = 2;
  inline bool has_pinzhi() const;
  inline void clear_pinzhi();
  static const int kPinzhiFieldNumber = 2;
  inline ::google::protobuf::int32 pinzhi() const;
  inline void set_pinzhi(::google::protobuf::int32 value);
  
  // optional int32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional int32 attack = 4;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 4;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);
  
  // optional int32 award = 5;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 5;
  inline ::google::protobuf::int32 award() const;
  inline void set_award(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPet)
 private:
  inline void set_has_petname();
  inline void clear_has_petname();
  inline void set_has_pinzhi();
  inline void clear_has_pinzhi();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_award();
  inline void clear_has_award();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* petname_;
  ::google::protobuf::int32 pinzhi_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPet* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetList : public ::google::protobuf::Message {
 public:
  OGReqPetList();
  virtual ~OGReqPetList();
  
  OGReqPetList(const OGReqPetList& from);
  
  inline OGReqPetList& operator=(const OGReqPetList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetList& default_instance();
  
  void Swap(OGReqPetList* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetList& from);
  void MergeFrom(const OGReqPetList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetList* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetList_Pet : public ::google::protobuf::Message {
 public:
  OGAckPetList_Pet();
  virtual ~OGAckPetList_Pet();
  
  OGAckPetList_Pet(const OGAckPetList_Pet& from);
  
  inline OGAckPetList_Pet& operator=(const OGAckPetList_Pet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetList_Pet& default_instance();
  
  void Swap(OGAckPetList_Pet* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetList_Pet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetList_Pet& from);
  void MergeFrom(const OGAckPetList_Pet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string petName = 1;
  inline bool has_petname() const;
  inline void clear_petname();
  static const int kPetNameFieldNumber = 1;
  inline const ::std::string& petname() const;
  inline void set_petname(const ::std::string& value);
  inline void set_petname(const char* value);
  inline void set_petname(const char* value, size_t size);
  inline ::std::string* mutable_petname();
  inline ::std::string* release_petname();
  
  // optional int32 pinzhi = 2;
  inline bool has_pinzhi() const;
  inline void clear_pinzhi();
  static const int kPinzhiFieldNumber = 2;
  inline ::google::protobuf::int32 pinzhi() const;
  inline void set_pinzhi(::google::protobuf::int32 value);
  
  // optional int32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional int32 bloodMin = 4;
  inline bool has_bloodmin() const;
  inline void clear_bloodmin();
  static const int kBloodMinFieldNumber = 4;
  inline ::google::protobuf::int32 bloodmin() const;
  inline void set_bloodmin(::google::protobuf::int32 value);
  
  // optional int32 bloodMax = 5;
  inline bool has_bloodmax() const;
  inline void clear_bloodmax();
  static const int kBloodMaxFieldNumber = 5;
  inline ::google::protobuf::int32 bloodmax() const;
  inline void set_bloodmax(::google::protobuf::int32 value);
  
  // optional int32 bloodPlus = 6;
  inline bool has_bloodplus() const;
  inline void clear_bloodplus();
  static const int kBloodPlusFieldNumber = 6;
  inline ::google::protobuf::int32 bloodplus() const;
  inline void set_bloodplus(::google::protobuf::int32 value);
  
  // optional int32 attack = 7;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 7;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);
  
  // optional int32 attackMin = 8;
  inline bool has_attackmin() const;
  inline void clear_attackmin();
  static const int kAttackMinFieldNumber = 8;
  inline ::google::protobuf::int32 attackmin() const;
  inline void set_attackmin(::google::protobuf::int32 value);
  
  // optional int32 attackMax = 9;
  inline bool has_attackmax() const;
  inline void clear_attackmax();
  static const int kAttackMaxFieldNumber = 9;
  inline ::google::protobuf::int32 attackmax() const;
  inline void set_attackmax(::google::protobuf::int32 value);
  
  // optional int32 attackPlus = 10;
  inline bool has_attackplus() const;
  inline void clear_attackplus();
  static const int kAttackPlusFieldNumber = 10;
  inline ::google::protobuf::int32 attackplus() const;
  inline void set_attackplus(::google::protobuf::int32 value);
  
  // optional int32 award = 11;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 11;
  inline ::google::protobuf::int32 award() const;
  inline void set_award(::google::protobuf::int32 value);
  
  // optional int32 awardMin = 12;
  inline bool has_awardmin() const;
  inline void clear_awardmin();
  static const int kAwardMinFieldNumber = 12;
  inline ::google::protobuf::int32 awardmin() const;
  inline void set_awardmin(::google::protobuf::int32 value);
  
  // optional int32 awardMax = 13;
  inline bool has_awardmax() const;
  inline void clear_awardmax();
  static const int kAwardMaxFieldNumber = 13;
  inline ::google::protobuf::int32 awardmax() const;
  inline void set_awardmax(::google::protobuf::int32 value);
  
  // optional int32 awardPlus = 14;
  inline bool has_awardplus() const;
  inline void clear_awardplus();
  static const int kAwardPlusFieldNumber = 14;
  inline ::google::protobuf::int32 awardplus() const;
  inline void set_awardplus(::google::protobuf::int32 value);
  
  // optional int32 level = 15;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 15;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 exp = 16;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 16;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 reqexp = 17;
  inline bool has_reqexp() const;
  inline void clear_reqexp();
  static const int kReqexpFieldNumber = 17;
  inline ::google::protobuf::int32 reqexp() const;
  inline void set_reqexp(::google::protobuf::int32 value);
  
  // optional int32 petId = 18;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 18;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // optional int32 status = 19;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 19;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional string petPic = 20;
  inline bool has_petpic() const;
  inline void clear_petpic();
  static const int kPetPicFieldNumber = 20;
  inline const ::std::string& petpic() const;
  inline void set_petpic(const ::std::string& value);
  inline void set_petpic(const char* value);
  inline void set_petpic(const char* value, size_t size);
  inline ::std::string* mutable_petpic();
  inline ::std::string* release_petpic();
  
  // optional int32 maxLev = 21;
  inline bool has_maxlev() const;
  inline void clear_maxlev();
  static const int kMaxLevFieldNumber = 21;
  inline ::google::protobuf::int32 maxlev() const;
  inline void set_maxlev(::google::protobuf::int32 value);
  
  // optional int32 csvid = 22;
  inline bool has_csvid() const;
  inline void clear_csvid();
  static const int kCsvidFieldNumber = 22;
  inline ::google::protobuf::int32 csvid() const;
  inline void set_csvid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetList.Pet)
 private:
  inline void set_has_petname();
  inline void clear_has_petname();
  inline void set_has_pinzhi();
  inline void clear_has_pinzhi();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_bloodmin();
  inline void clear_has_bloodmin();
  inline void set_has_bloodmax();
  inline void clear_has_bloodmax();
  inline void set_has_bloodplus();
  inline void clear_has_bloodplus();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_attackmin();
  inline void clear_has_attackmin();
  inline void set_has_attackmax();
  inline void clear_has_attackmax();
  inline void set_has_attackplus();
  inline void clear_has_attackplus();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_awardmin();
  inline void clear_has_awardmin();
  inline void set_has_awardmax();
  inline void clear_has_awardmax();
  inline void set_has_awardplus();
  inline void clear_has_awardplus();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_reqexp();
  inline void clear_has_reqexp();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_petpic();
  inline void clear_has_petpic();
  inline void set_has_maxlev();
  inline void clear_has_maxlev();
  inline void set_has_csvid();
  inline void clear_has_csvid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* petname_;
  ::google::protobuf::int32 pinzhi_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 bloodmin_;
  ::google::protobuf::int32 bloodmax_;
  ::google::protobuf::int32 bloodplus_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 attackmin_;
  ::google::protobuf::int32 attackmax_;
  ::google::protobuf::int32 attackplus_;
  ::google::protobuf::int32 award_;
  ::google::protobuf::int32 awardmin_;
  ::google::protobuf::int32 awardmax_;
  ::google::protobuf::int32 awardplus_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 reqexp_;
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 status_;
  ::std::string* petpic_;
  ::google::protobuf::int32 maxlev_;
  ::google::protobuf::int32 csvid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetList_Pet* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetList : public ::google::protobuf::Message {
 public:
  OGAckPetList();
  virtual ~OGAckPetList();
  
  OGAckPetList(const OGAckPetList& from);
  
  inline OGAckPetList& operator=(const OGAckPetList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetList& default_instance();
  
  void Swap(OGAckPetList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetList& from);
  void MergeFrom(const OGAckPetList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckPetList_Pet Pet;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
  inline int petlist_size() const;
  inline void clear_petlist();
  static const int kPetListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckPetList_Pet& petlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckPetList_Pet* mutable_petlist(int index);
  inline ::com::ourgame::texasSlots::OGAckPetList_Pet* add_petlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetList_Pet >&
      petlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetList_Pet >*
      mutable_petlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetList_Pet > petlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetList* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetReSet : public ::google::protobuf::Message {
 public:
  OGReqPetReSet();
  virtual ~OGReqPetReSet();
  
  OGReqPetReSet(const OGReqPetReSet& from);
  
  inline OGReqPetReSet& operator=(const OGReqPetReSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetReSet& default_instance();
  
  void Swap(OGReqPetReSet* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetReSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetReSet& from);
  void MergeFrom(const OGReqPetReSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 petId = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetReSet)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 petid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetReSet* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetJoinFight : public ::google::protobuf::Message {
 public:
  OGReqPetJoinFight();
  virtual ~OGReqPetJoinFight();
  
  OGReqPetJoinFight(const OGReqPetJoinFight& from);
  
  inline OGReqPetJoinFight& operator=(const OGReqPetJoinFight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetJoinFight& default_instance();
  
  void Swap(OGReqPetJoinFight* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetJoinFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetJoinFight& from);
  void MergeFrom(const OGReqPetJoinFight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 petId = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetJoinFight)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 petid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetJoinFight* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetChange : public ::google::protobuf::Message {
 public:
  OGReqPetChange();
  virtual ~OGReqPetChange();
  
  OGReqPetChange(const OGReqPetChange& from);
  
  inline OGReqPetChange& operator=(const OGReqPetChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetChange& default_instance();
  
  void Swap(OGReqPetChange* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetChange& from);
  void MergeFrom(const OGReqPetChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 petId = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetChange)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 petid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetChange* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetChange : public ::google::protobuf::Message {
 public:
  OGAckPetChange();
  virtual ~OGAckPetChange();
  
  OGAckPetChange(const OGAckPetChange& from);
  
  inline OGAckPetChange& operator=(const OGAckPetChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetChange& default_instance();
  
  void Swap(OGAckPetChange* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetChange& from);
  void MergeFrom(const OGAckPetChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string itemName = 1;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 1;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  
  // optional int32 itemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional string tip = 3;
  inline bool has_tip() const;
  inline void clear_tip();
  static const int kTipFieldNumber = 3;
  inline const ::std::string& tip() const;
  inline void set_tip(const ::std::string& value);
  inline void set_tip(const char* value);
  inline void set_tip(const char* value, size_t size);
  inline ::std::string* mutable_tip();
  inline ::std::string* release_tip();
  
  // optional string pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetChange)
 private:
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_tip();
  inline void clear_has_tip();
  inline void set_has_pic();
  inline void clear_has_pic();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* itemname_;
  ::std::string* tip_;
  ::std::string* pic_;
  ::google::protobuf::int32 itemnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetChange* default_instance_;
};
// -------------------------------------------------------------------

class OGReqItemChange : public ::google::protobuf::Message {
 public:
  OGReqItemChange();
  virtual ~OGReqItemChange();
  
  OGReqItemChange(const OGReqItemChange& from);
  
  inline OGReqItemChange& operator=(const OGReqItemChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqItemChange& default_instance();
  
  void Swap(OGReqItemChange* other);
  
  // implements Message ----------------------------------------------
  
  OGReqItemChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqItemChange& from);
  void MergeFrom(const OGReqItemChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 debrisItemId = 1;
  inline bool has_debrisitemid() const;
  inline void clear_debrisitemid();
  static const int kDebrisItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 debrisitemid() const;
  inline void set_debrisitemid(::google::protobuf::int32 value);
  
  // optional int32 evolveId = 2;
  inline bool has_evolveid() const;
  inline void clear_evolveid();
  static const int kEvolveIdFieldNumber = 2;
  inline ::google::protobuf::int32 evolveid() const;
  inline void set_evolveid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqItemChange)
 private:
  inline void set_has_debrisitemid();
  inline void clear_has_debrisitemid();
  inline void set_has_evolveid();
  inline void clear_has_evolveid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 debrisitemid_;
  ::google::protobuf::int32 evolveid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqItemChange* default_instance_;
};
// -------------------------------------------------------------------

class OGReqItemChangeData : public ::google::protobuf::Message {
 public:
  OGReqItemChangeData();
  virtual ~OGReqItemChangeData();
  
  OGReqItemChangeData(const OGReqItemChangeData& from);
  
  inline OGReqItemChangeData& operator=(const OGReqItemChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqItemChangeData& default_instance();
  
  void Swap(OGReqItemChangeData* other);
  
  // implements Message ----------------------------------------------
  
  OGReqItemChangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqItemChangeData& from);
  void MergeFrom(const OGReqItemChangeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqItemChangeData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqItemChangeData* default_instance_;
};
// -------------------------------------------------------------------

class OGAckItemChangeData_Change : public ::google::protobuf::Message {
 public:
  OGAckItemChangeData_Change();
  virtual ~OGAckItemChangeData_Change();
  
  OGAckItemChangeData_Change(const OGAckItemChangeData_Change& from);
  
  inline OGAckItemChangeData_Change& operator=(const OGAckItemChangeData_Change& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckItemChangeData_Change& default_instance();
  
  void Swap(OGAckItemChangeData_Change* other);
  
  // implements Message ----------------------------------------------
  
  OGAckItemChangeData_Change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckItemChangeData_Change& from);
  void MergeFrom(const OGAckItemChangeData_Change& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 debrisId = 1;
  inline bool has_debrisid() const;
  inline void clear_debrisid();
  static const int kDebrisIdFieldNumber = 1;
  inline ::google::protobuf::int32 debrisid() const;
  inline void set_debrisid(::google::protobuf::int32 value);
  
  // optional int32 needNum = 2;
  inline bool has_neednum() const;
  inline void clear_neednum();
  static const int kNeedNumFieldNumber = 2;
  inline ::google::protobuf::int32 neednum() const;
  inline void set_neednum(::google::protobuf::int32 value);
  
  // optional int32 petId = 3;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // optional int32 jilv = 4;
  inline bool has_jilv() const;
  inline void clear_jilv();
  static const int kJilvFieldNumber = 4;
  inline ::google::protobuf::int32 jilv() const;
  inline void set_jilv(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckItemChangeData.Change)
 private:
  inline void set_has_debrisid();
  inline void clear_has_debrisid();
  inline void set_has_neednum();
  inline void clear_has_neednum();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_jilv();
  inline void clear_has_jilv();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 debrisid_;
  ::google::protobuf::int32 neednum_;
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 jilv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckItemChangeData_Change* default_instance_;
};
// -------------------------------------------------------------------

class OGAckItemChangeData : public ::google::protobuf::Message {
 public:
  OGAckItemChangeData();
  virtual ~OGAckItemChangeData();
  
  OGAckItemChangeData(const OGAckItemChangeData& from);
  
  inline OGAckItemChangeData& operator=(const OGAckItemChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckItemChangeData& default_instance();
  
  void Swap(OGAckItemChangeData* other);
  
  // implements Message ----------------------------------------------
  
  OGAckItemChangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckItemChangeData& from);
  void MergeFrom(const OGAckItemChangeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckItemChangeData_Change Change;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
  inline int changelist_size() const;
  inline void clear_changelist();
  static const int kChangeListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckItemChangeData_Change& changelist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckItemChangeData_Change* mutable_changelist(int index);
  inline ::com::ourgame::texasSlots::OGAckItemChangeData_Change* add_changelist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItemChangeData_Change >&
      changelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItemChangeData_Change >*
      mutable_changelist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckItemChangeData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItemChangeData_Change > changelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckItemChangeData* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetChangeData : public ::google::protobuf::Message {
 public:
  OGReqPetChangeData();
  virtual ~OGReqPetChangeData();
  
  OGReqPetChangeData(const OGReqPetChangeData& from);
  
  inline OGReqPetChangeData& operator=(const OGReqPetChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetChangeData& default_instance();
  
  void Swap(OGReqPetChangeData* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetChangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetChangeData& from);
  void MergeFrom(const OGReqPetChangeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetChangeData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetChangeData* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetChangeData_ChangeData : public ::google::protobuf::Message {
 public:
  OGAckPetChangeData_ChangeData();
  virtual ~OGAckPetChangeData_ChangeData();
  
  OGAckPetChangeData_ChangeData(const OGAckPetChangeData_ChangeData& from);
  
  inline OGAckPetChangeData_ChangeData& operator=(const OGAckPetChangeData_ChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetChangeData_ChangeData& default_instance();
  
  void Swap(OGAckPetChangeData_ChangeData* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetChangeData_ChangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetChangeData_ChangeData& from);
  void MergeFrom(const OGAckPetChangeData_ChangeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 lev = 1;
  inline bool has_lev() const;
  inline void clear_lev();
  static const int kLevFieldNumber = 1;
  inline ::google::protobuf::int32 lev() const;
  inline void set_lev(::google::protobuf::int32 value);
  
  // optional int32 min = 2;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 2;
  inline ::google::protobuf::int32 min() const;
  inline void set_min(::google::protobuf::int32 value);
  
  // optional int32 max = 3;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 3;
  inline ::google::protobuf::int32 max() const;
  inline void set_max(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetChangeData.ChangeData)
 private:
  inline void set_has_lev();
  inline void clear_has_lev();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 lev_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetChangeData_ChangeData* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetChangeData : public ::google::protobuf::Message {
 public:
  OGAckPetChangeData();
  virtual ~OGAckPetChangeData();
  
  OGAckPetChangeData(const OGAckPetChangeData& from);
  
  inline OGAckPetChangeData& operator=(const OGAckPetChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetChangeData& default_instance();
  
  void Swap(OGAckPetChangeData* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetChangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetChangeData& from);
  void MergeFrom(const OGAckPetChangeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckPetChangeData_ChangeData ChangeData;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
  inline int datalist_size() const;
  inline void clear_datalist();
  static const int kDataListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData& datalist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData* mutable_datalist(int index);
  inline ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData* add_datalist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData >&
      datalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData >*
      mutable_datalist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetChangeData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData > datalist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetChangeData* default_instance_;
};
// -------------------------------------------------------------------

class OGAckItemChange : public ::google::protobuf::Message {
 public:
  OGAckItemChange();
  virtual ~OGAckItemChange();
  
  OGAckItemChange(const OGAckItemChange& from);
  
  inline OGAckItemChange& operator=(const OGAckItemChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckItemChange& default_instance();
  
  void Swap(OGAckItemChange* other);
  
  // implements Message ----------------------------------------------
  
  OGAckItemChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckItemChange& from);
  void MergeFrom(const OGAckItemChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string pic = 2;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 2;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional int32 evolveFld = 3;
  inline bool has_evolvefld() const;
  inline void clear_evolvefld();
  static const int kEvolveFldFieldNumber = 3;
  inline ::google::protobuf::int32 evolvefld() const;
  inline void set_evolvefld(::google::protobuf::int32 value);
  
  // optional int32 petId = 4;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 4;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckItemChange)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_evolvefld();
  inline void clear_has_evolvefld();
  inline void set_has_petid();
  inline void clear_has_petid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pic_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 evolvefld_;
  ::google::protobuf::int32 petid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckItemChange* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetReSet : public ::google::protobuf::Message {
 public:
  OGAckPetReSet();
  virtual ~OGAckPetReSet();
  
  OGAckPetReSet(const OGAckPetReSet& from);
  
  inline OGAckPetReSet& operator=(const OGAckPetReSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetReSet& default_instance();
  
  void Swap(OGAckPetReSet* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetReSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetReSet& from);
  void MergeFrom(const OGAckPetReSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 petId = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);
  
  // optional int32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional int32 attack = 3;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 3;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);
  
  // optional int32 award = 4;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 4;
  inline ::google::protobuf::int32 award() const;
  inline void set_award(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetReSet)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_award();
  inline void clear_has_award();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetReSet* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetGridOnList_PetGrid : public ::google::protobuf::Message {
 public:
  OGAckPetGridOnList_PetGrid();
  virtual ~OGAckPetGridOnList_PetGrid();
  
  OGAckPetGridOnList_PetGrid(const OGAckPetGridOnList_PetGrid& from);
  
  inline OGAckPetGridOnList_PetGrid& operator=(const OGAckPetGridOnList_PetGrid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetGridOnList_PetGrid& default_instance();
  
  void Swap(OGAckPetGridOnList_PetGrid* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetGridOnList_PetGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetGridOnList_PetGrid& from);
  void MergeFrom(const OGAckPetGridOnList_PetGrid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 grid = 2;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 2;
  inline ::google::protobuf::int32 grid() const;
  inline void set_grid(::google::protobuf::int32 value);
  
  // optional string tips = 3;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 3;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  
  // optional int32 lev = 4;
  inline bool has_lev() const;
  inline void clear_lev();
  static const int kLevFieldNumber = 4;
  inline ::google::protobuf::int32 lev() const;
  inline void set_lev(::google::protobuf::int32 value);
  
  // optional int64 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_grid();
  inline void clear_has_grid();
  inline void set_has_tips();
  inline void clear_has_tips();
  inline void set_has_lev();
  inline void clear_has_lev();
  inline void set_has_gold();
  inline void clear_has_gold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 grid_;
  ::std::string* tips_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 lev_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetGridOnList_PetGrid* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetGridOnList : public ::google::protobuf::Message {
 public:
  OGAckPetGridOnList();
  virtual ~OGAckPetGridOnList();
  
  OGAckPetGridOnList(const OGAckPetGridOnList& from);
  
  inline OGAckPetGridOnList& operator=(const OGAckPetGridOnList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetGridOnList& default_instance();
  
  void Swap(OGAckPetGridOnList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetGridOnList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetGridOnList& from);
  void MergeFrom(const OGAckPetGridOnList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckPetGridOnList_PetGrid PetGrid;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
  inline int petgridlist_size() const;
  inline void clear_petgridlist();
  static const int kPetGridListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid& petgridlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid* mutable_petgridlist(int index);
  inline ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid* add_petgridlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid >&
      petgridlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid >*
      mutable_petgridlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetGridOnList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid > petgridlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetGridOnList* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetGrid : public ::google::protobuf::Message {
 public:
  OGReqPetGrid();
  virtual ~OGReqPetGrid();
  
  OGReqPetGrid(const OGReqPetGrid& from);
  
  inline OGReqPetGrid& operator=(const OGReqPetGrid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetGrid& default_instance();
  
  void Swap(OGReqPetGrid* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetGrid& from);
  void MergeFrom(const OGReqPetGrid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetGrid)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetGrid* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPage : public ::google::protobuf::Message {
 public:
  OGAckPage();
  virtual ~OGAckPage();
  
  OGAckPage(const OGAckPage& from);
  
  inline OGAckPage& operator=(const OGAckPage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPage& default_instance();
  
  void Swap(OGAckPage* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPage& from);
  void MergeFrom(const OGAckPage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPage)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPage* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetFight : public ::google::protobuf::Message {
 public:
  OGReqPetFight();
  virtual ~OGReqPetFight();
  
  OGReqPetFight(const OGReqPetFight& from);
  
  inline OGReqPetFight& operator=(const OGReqPetFight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetFight& default_instance();
  
  void Swap(OGReqPetFight* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetFight& from);
  void MergeFrom(const OGReqPetFight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetFight)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetFight* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetFightResult : public ::google::protobuf::Message {
 public:
  OGAckPetFightResult();
  virtual ~OGAckPetFightResult();
  
  OGAckPetFightResult(const OGAckPetFightResult& from);
  
  inline OGAckPetFightResult& operator=(const OGAckPetFightResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetFightResult& default_instance();
  
  void Swap(OGAckPetFightResult* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetFightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetFightResult& from);
  void MergeFrom(const OGAckPetFightResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 winResult = 2;
  inline bool has_winresult() const;
  inline void clear_winresult();
  static const int kWinResultFieldNumber = 2;
  inline ::google::protobuf::int32 winresult() const;
  inline void set_winresult(::google::protobuf::int32 value);
  
  // optional int32 petSkill = 3;
  inline bool has_petskill() const;
  inline void clear_petskill();
  static const int kPetSkillFieldNumber = 3;
  inline ::google::protobuf::int32 petskill() const;
  inline void set_petskill(::google::protobuf::int32 value);
  
  // optional int32 petJoinNum = 4;
  inline bool has_petjoinnum() const;
  inline void clear_petjoinnum();
  static const int kPetJoinNumFieldNumber = 4;
  inline ::google::protobuf::int32 petjoinnum() const;
  inline void set_petjoinnum(::google::protobuf::int32 value);
  
  // optional int32 petData = 5;
  inline bool has_petdata() const;
  inline void clear_petdata();
  static const int kPetDataFieldNumber = 5;
  inline ::google::protobuf::int32 petdata() const;
  inline void set_petdata(::google::protobuf::int32 value);
  
  // optional int32 bossSkill = 6;
  inline bool has_bossskill() const;
  inline void clear_bossskill();
  static const int kBossSkillFieldNumber = 6;
  inline ::google::protobuf::int32 bossskill() const;
  inline void set_bossskill(::google::protobuf::int32 value);
  
  // optional int32 bossJoinNum = 7;
  inline bool has_bossjoinnum() const;
  inline void clear_bossjoinnum();
  static const int kBossJoinNumFieldNumber = 7;
  inline ::google::protobuf::int32 bossjoinnum() const;
  inline void set_bossjoinnum(::google::protobuf::int32 value);
  
  // optional int32 bossData = 8;
  inline bool has_bossdata() const;
  inline void clear_bossdata();
  static const int kBossDataFieldNumber = 8;
  inline ::google::protobuf::int32 bossdata() const;
  inline void set_bossdata(::google::protobuf::int32 value);
  
  // optional int32 petTimes = 9;
  inline bool has_pettimes() const;
  inline void clear_pettimes();
  static const int kPetTimesFieldNumber = 9;
  inline ::google::protobuf::int32 pettimes() const;
  inline void set_pettimes(::google::protobuf::int32 value);
  
  // optional int32 petEffect = 10;
  inline bool has_peteffect() const;
  inline void clear_peteffect();
  static const int kPetEffectFieldNumber = 10;
  inline ::google::protobuf::int32 peteffect() const;
  inline void set_peteffect(::google::protobuf::int32 value);
  
  // optional int32 bossTimes = 11;
  inline bool has_bosstimes() const;
  inline void clear_bosstimes();
  static const int kBossTimesFieldNumber = 11;
  inline ::google::protobuf::int32 bosstimes() const;
  inline void set_bosstimes(::google::protobuf::int32 value);
  
  // optional int32 bossEffect = 12;
  inline bool has_bosseffect() const;
  inline void clear_bosseffect();
  static const int kBossEffectFieldNumber = 12;
  inline ::google::protobuf::int32 bosseffect() const;
  inline void set_bosseffect(::google::protobuf::int32 value);
  
  // optional int32 page = 13;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 13;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetFightResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_winresult();
  inline void clear_has_winresult();
  inline void set_has_petskill();
  inline void clear_has_petskill();
  inline void set_has_petjoinnum();
  inline void clear_has_petjoinnum();
  inline void set_has_petdata();
  inline void clear_has_petdata();
  inline void set_has_bossskill();
  inline void clear_has_bossskill();
  inline void set_has_bossjoinnum();
  inline void clear_has_bossjoinnum();
  inline void set_has_bossdata();
  inline void clear_has_bossdata();
  inline void set_has_pettimes();
  inline void clear_has_pettimes();
  inline void set_has_peteffect();
  inline void clear_has_peteffect();
  inline void set_has_bosstimes();
  inline void clear_has_bosstimes();
  inline void set_has_bosseffect();
  inline void clear_has_bosseffect();
  inline void set_has_page();
  inline void clear_has_page();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 winresult_;
  ::google::protobuf::int32 petskill_;
  ::google::protobuf::int32 petjoinnum_;
  ::google::protobuf::int32 petdata_;
  ::google::protobuf::int32 bossskill_;
  ::google::protobuf::int32 bossjoinnum_;
  ::google::protobuf::int32 bossdata_;
  ::google::protobuf::int32 pettimes_;
  ::google::protobuf::int32 peteffect_;
  ::google::protobuf::int32 bosstimes_;
  ::google::protobuf::int32 bosseffect_;
  ::google::protobuf::int32 page_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetFightResult* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetFlee : public ::google::protobuf::Message {
 public:
  OGReqPetFlee();
  virtual ~OGReqPetFlee();
  
  OGReqPetFlee(const OGReqPetFlee& from);
  
  inline OGReqPetFlee& operator=(const OGReqPetFlee& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetFlee& default_instance();
  
  void Swap(OGReqPetFlee* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetFlee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetFlee& from);
  void MergeFrom(const OGReqPetFlee& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetFlee)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetFlee* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetGetAward : public ::google::protobuf::Message {
 public:
  OGReqPetGetAward();
  virtual ~OGReqPetGetAward();
  
  OGReqPetGetAward(const OGReqPetGetAward& from);
  
  inline OGReqPetGetAward& operator=(const OGReqPetGetAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetGetAward& default_instance();
  
  void Swap(OGReqPetGetAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetGetAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetGetAward& from);
  void MergeFrom(const OGReqPetGetAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetGetAward)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetGetAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetGetAward_Award : public ::google::protobuf::Message {
 public:
  OGAckPetGetAward_Award();
  virtual ~OGAckPetGetAward_Award();
  
  OGAckPetGetAward_Award(const OGAckPetGetAward_Award& from);
  
  inline OGAckPetGetAward_Award& operator=(const OGAckPetGetAward_Award& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetGetAward_Award& default_instance();
  
  void Swap(OGAckPetGetAward_Award* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetGetAward_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetGetAward_Award& from);
  void MergeFrom(const OGAckPetGetAward_Award& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int64 num() const;
  inline void set_num(::google::protobuf::int64 value);
  
  // optional int32 ok = 3;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 3;
  inline ::google::protobuf::int32 ok() const;
  inline void set_ok(::google::protobuf::int32 value);
  
  // optional string petName = 4;
  inline bool has_petname() const;
  inline void clear_petname();
  static const int kPetNameFieldNumber = 4;
  inline const ::std::string& petname() const;
  inline void set_petname(const ::std::string& value);
  inline void set_petname(const char* value);
  inline void set_petname(const char* value, size_t size);
  inline ::std::string* mutable_petname();
  inline ::std::string* release_petname();
  
  // optional string pic = 5;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 5;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional int32 itemId = 6;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 6;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetGetAward.Award)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_ok();
  inline void clear_has_ok();
  inline void set_has_petname();
  inline void clear_has_petname();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 num_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 ok_;
  ::std::string* petname_;
  ::std::string* pic_;
  ::google::protobuf::int32 itemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetGetAward_Award* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetGetAward : public ::google::protobuf::Message {
 public:
  OGAckPetGetAward();
  virtual ~OGAckPetGetAward();
  
  OGAckPetGetAward(const OGAckPetGetAward& from);
  
  inline OGAckPetGetAward& operator=(const OGAckPetGetAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetGetAward& default_instance();
  
  void Swap(OGAckPetGetAward* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetGetAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetGetAward& from);
  void MergeFrom(const OGAckPetGetAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckPetGetAward_Award Award;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
  inline int awardlist_size() const;
  inline void clear_awardlist();
  static const int kAwardListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckPetGetAward_Award& awardlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckPetGetAward_Award* mutable_awardlist(int index);
  inline ::com::ourgame::texasSlots::OGAckPetGetAward_Award* add_awardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGetAward_Award >&
      awardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGetAward_Award >*
      mutable_awardlist();
  
  // optional int32 awardFlg = 2;
  inline bool has_awardflg() const;
  inline void clear_awardflg();
  static const int kAwardFlgFieldNumber = 2;
  inline ::google::protobuf::int32 awardflg() const;
  inline void set_awardflg(::google::protobuf::int32 value);
  
  // optional string roleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetGetAward)
 private:
  inline void set_has_awardflg();
  inline void clear_has_awardflg();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGetAward_Award > awardlist_;
  ::std::string* rolename_;
  ::google::protobuf::int32 awardflg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetGetAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRankList_Rank : public ::google::protobuf::Message {
 public:
  OGAckRankList_Rank();
  virtual ~OGAckRankList_Rank();
  
  OGAckRankList_Rank(const OGAckRankList_Rank& from);
  
  inline OGAckRankList_Rank& operator=(const OGAckRankList_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRankList_Rank& default_instance();
  
  void Swap(OGAckRankList_Rank* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRankList_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRankList_Rank& from);
  void MergeFrom(const OGAckRankList_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 getGold = 3;
  inline bool has_getgold() const;
  inline void clear_getgold();
  static const int kGetGoldFieldNumber = 3;
  inline ::google::protobuf::int64 getgold() const;
  inline void set_getgold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRankList.Rank)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_getgold();
  inline void clear_has_getgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int64 getgold_;
  ::google::protobuf::int32 rankid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRankList_Rank* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRankList : public ::google::protobuf::Message {
 public:
  OGAckRankList();
  virtual ~OGAckRankList();
  
  OGAckRankList(const OGAckRankList& from);
  
  inline OGAckRankList& operator=(const OGAckRankList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRankList& default_instance();
  
  void Swap(OGAckRankList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRankList& from);
  void MergeFrom(const OGAckRankList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckRankList_Rank Rank;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckRankList_Rank& ranklist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRankList_Rank* mutable_ranklist(int index);
  inline ::com::ourgame::texasSlots::OGAckRankList_Rank* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRankList_Rank >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRankList_Rank >*
      mutable_ranklist();
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRankList)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRankList_Rank > ranklist_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRankList* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRank_Rank : public ::google::protobuf::Message {
 public:
  OGAckRank_Rank();
  virtual ~OGAckRank_Rank();
  
  OGAckRank_Rank(const OGAckRank_Rank& from);
  
  inline OGAckRank_Rank& operator=(const OGAckRank_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRank_Rank& default_instance();
  
  void Swap(OGAckRank_Rank* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRank_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRank_Rank& from);
  void MergeFrom(const OGAckRank_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 getGold = 3;
  inline bool has_getgold() const;
  inline void clear_getgold();
  static const int kGetGoldFieldNumber = 3;
  inline ::google::protobuf::int64 getgold() const;
  inline void set_getgold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRank.Rank)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_getgold();
  inline void clear_has_getgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int64 getgold_;
  ::google::protobuf::int32 rankid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRank_Rank* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRank : public ::google::protobuf::Message {
 public:
  OGAckRank();
  virtual ~OGAckRank();
  
  OGAckRank(const OGAckRank& from);
  
  inline OGAckRank& operator=(const OGAckRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRank& default_instance();
  
  void Swap(OGAckRank* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRank& from);
  void MergeFrom(const OGAckRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckRank_Rank Rank;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
  inline int ranklista_size() const;
  inline void clear_ranklista();
  static const int kRankListAFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckRank_Rank& ranklista(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* mutable_ranklista(int index);
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* add_ranklista();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
      ranklista() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
      mutable_ranklista();
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
  inline int ranklistb_size() const;
  inline void clear_ranklistb();
  static const int kRankListBFieldNumber = 2;
  inline const ::com::ourgame::texasSlots::OGAckRank_Rank& ranklistb(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* mutable_ranklistb(int index);
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* add_ranklistb();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
      ranklistb() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
      mutable_ranklistb();
  
  // optional string roleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 aNum = 4;
  inline bool has_anum() const;
  inline void clear_anum();
  static const int kANumFieldNumber = 4;
  inline ::google::protobuf::int32 anum() const;
  inline void set_anum(::google::protobuf::int32 value);
  
  // optional int64 aGold = 5;
  inline bool has_agold() const;
  inline void clear_agold();
  static const int kAGoldFieldNumber = 5;
  inline ::google::protobuf::int64 agold() const;
  inline void set_agold(::google::protobuf::int64 value);
  
  // optional string aRoleName = 6;
  inline bool has_arolename() const;
  inline void clear_arolename();
  static const int kARoleNameFieldNumber = 6;
  inline const ::std::string& arolename() const;
  inline void set_arolename(const ::std::string& value);
  inline void set_arolename(const char* value);
  inline void set_arolename(const char* value, size_t size);
  inline ::std::string* mutable_arolename();
  inline ::std::string* release_arolename();
  
  // optional int32 bNum = 7;
  inline bool has_bnum() const;
  inline void clear_bnum();
  static const int kBNumFieldNumber = 7;
  inline ::google::protobuf::int32 bnum() const;
  inline void set_bnum(::google::protobuf::int32 value);
  
  // optional int64 bGold = 8;
  inline bool has_bgold() const;
  inline void clear_bgold();
  static const int kBGoldFieldNumber = 8;
  inline ::google::protobuf::int64 bgold() const;
  inline void set_bgold(::google::protobuf::int64 value);
  
  // optional string bRoleName = 9;
  inline bool has_brolename() const;
  inline void clear_brolename();
  static const int kBRoleNameFieldNumber = 9;
  inline const ::std::string& brolename() const;
  inline void set_brolename(const ::std::string& value);
  inline void set_brolename(const char* value);
  inline void set_brolename(const char* value, size_t size);
  inline ::std::string* mutable_brolename();
  inline ::std::string* release_brolename();
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
  inline int lastweeka_size() const;
  inline void clear_lastweeka();
  static const int kLastWeekAFieldNumber = 10;
  inline const ::com::ourgame::texasSlots::OGAckRank_Rank& lastweeka(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* mutable_lastweeka(int index);
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* add_lastweeka();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
      lastweeka() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
      mutable_lastweeka();
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
  inline int lastweekb_size() const;
  inline void clear_lastweekb();
  static const int kLastWeekBFieldNumber = 11;
  inline const ::com::ourgame::texasSlots::OGAckRank_Rank& lastweekb(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* mutable_lastweekb(int index);
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* add_lastweekb();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
      lastweekb() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
      mutable_lastweekb();
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
  inline int ranklistc_size() const;
  inline void clear_ranklistc();
  static const int kRankListCFieldNumber = 12;
  inline const ::com::ourgame::texasSlots::OGAckRank_Rank& ranklistc(int index) const;
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* mutable_ranklistc(int index);
  inline ::com::ourgame::texasSlots::OGAckRank_Rank* add_ranklistc();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
      ranklistc() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
      mutable_ranklistc();
  
  // optional string cRankName = 13;
  inline bool has_crankname() const;
  inline void clear_crankname();
  static const int kCRankNameFieldNumber = 13;
  inline const ::std::string& crankname() const;
  inline void set_crankname(const ::std::string& value);
  inline void set_crankname(const char* value);
  inline void set_crankname(const char* value, size_t size);
  inline ::std::string* mutable_crankname();
  inline ::std::string* release_crankname();
  
  // optional string aRankTip = 14;
  inline bool has_aranktip() const;
  inline void clear_aranktip();
  static const int kARankTipFieldNumber = 14;
  inline const ::std::string& aranktip() const;
  inline void set_aranktip(const ::std::string& value);
  inline void set_aranktip(const char* value);
  inline void set_aranktip(const char* value, size_t size);
  inline ::std::string* mutable_aranktip();
  inline ::std::string* release_aranktip();
  
  // optional string bRankTip = 15;
  inline bool has_branktip() const;
  inline void clear_branktip();
  static const int kBRankTipFieldNumber = 15;
  inline const ::std::string& branktip() const;
  inline void set_branktip(const ::std::string& value);
  inline void set_branktip(const char* value);
  inline void set_branktip(const char* value, size_t size);
  inline ::std::string* mutable_branktip();
  inline ::std::string* release_branktip();
  
  // optional string cRankTip = 16;
  inline bool has_cranktip() const;
  inline void clear_cranktip();
  static const int kCRankTipFieldNumber = 16;
  inline const ::std::string& cranktip() const;
  inline void set_cranktip(const ::std::string& value);
  inline void set_cranktip(const char* value);
  inline void set_cranktip(const char* value, size_t size);
  inline ::std::string* mutable_cranktip();
  inline ::std::string* release_cranktip();
  
  // optional string laRankTip = 17;
  inline bool has_laranktip() const;
  inline void clear_laranktip();
  static const int kLaRankTipFieldNumber = 17;
  inline const ::std::string& laranktip() const;
  inline void set_laranktip(const ::std::string& value);
  inline void set_laranktip(const char* value);
  inline void set_laranktip(const char* value, size_t size);
  inline ::std::string* mutable_laranktip();
  inline ::std::string* release_laranktip();
  
  // optional string lbRankTip = 18;
  inline bool has_lbranktip() const;
  inline void clear_lbranktip();
  static const int kLbRankTipFieldNumber = 18;
  inline const ::std::string& lbranktip() const;
  inline void set_lbranktip(const ::std::string& value);
  inline void set_lbranktip(const char* value);
  inline void set_lbranktip(const char* value, size_t size);
  inline ::std::string* mutable_lbranktip();
  inline ::std::string* release_lbranktip();
  
  // optional int32 rankBtnOn = 19;
  inline bool has_rankbtnon() const;
  inline void clear_rankbtnon();
  static const int kRankBtnOnFieldNumber = 19;
  inline ::google::protobuf::int32 rankbtnon() const;
  inline void set_rankbtnon(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRank)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_anum();
  inline void clear_has_anum();
  inline void set_has_agold();
  inline void clear_has_agold();
  inline void set_has_arolename();
  inline void clear_has_arolename();
  inline void set_has_bnum();
  inline void clear_has_bnum();
  inline void set_has_bgold();
  inline void clear_has_bgold();
  inline void set_has_brolename();
  inline void clear_has_brolename();
  inline void set_has_crankname();
  inline void clear_has_crankname();
  inline void set_has_aranktip();
  inline void clear_has_aranktip();
  inline void set_has_branktip();
  inline void clear_has_branktip();
  inline void set_has_cranktip();
  inline void clear_has_cranktip();
  inline void set_has_laranktip();
  inline void clear_has_laranktip();
  inline void set_has_lbranktip();
  inline void clear_has_lbranktip();
  inline void set_has_rankbtnon();
  inline void clear_has_rankbtnon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank > ranklista_;
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank > ranklistb_;
  ::std::string* rolename_;
  ::google::protobuf::int64 agold_;
  ::google::protobuf::int32 anum_;
  ::google::protobuf::int32 bnum_;
  ::std::string* arolename_;
  ::google::protobuf::int64 bgold_;
  ::std::string* brolename_;
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank > lastweeka_;
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank > lastweekb_;
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank > ranklistc_;
  ::std::string* crankname_;
  ::std::string* aranktip_;
  ::std::string* branktip_;
  ::std::string* cranktip_;
  ::std::string* laranktip_;
  ::std::string* lbranktip_;
  ::google::protobuf::int32 rankbtnon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRank* default_instance_;
};
// -------------------------------------------------------------------

class OGReqRank : public ::google::protobuf::Message {
 public:
  OGReqRank();
  virtual ~OGReqRank();
  
  OGReqRank(const OGReqRank& from);
  
  inline OGReqRank& operator=(const OGReqRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqRank& default_instance();
  
  void Swap(OGReqRank* other);
  
  // implements Message ----------------------------------------------
  
  OGReqRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqRank& from);
  void MergeFrom(const OGReqRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqRank)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqRank* default_instance_;
};
// -------------------------------------------------------------------

class OGReqRankToJS : public ::google::protobuf::Message {
 public:
  OGReqRankToJS();
  virtual ~OGReqRankToJS();
  
  OGReqRankToJS(const OGReqRankToJS& from);
  
  inline OGReqRankToJS& operator=(const OGReqRankToJS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqRankToJS& default_instance();
  
  void Swap(OGReqRankToJS* other);
  
  // implements Message ----------------------------------------------
  
  OGReqRankToJS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqRankToJS& from);
  void MergeFrom(const OGReqRankToJS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 getGold1 = 2;
  inline bool has_getgold1() const;
  inline void clear_getgold1();
  static const int kGetGold1FieldNumber = 2;
  inline ::google::protobuf::int64 getgold1() const;
  inline void set_getgold1(::google::protobuf::int64 value);
  
  // optional int64 getGold4 = 3;
  inline bool has_getgold4() const;
  inline void clear_getgold4();
  static const int kGetGold4FieldNumber = 3;
  inline ::google::protobuf::int64 getgold4() const;
  inline void set_getgold4(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqRankToJS)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_getgold1();
  inline void clear_has_getgold1();
  inline void set_has_getgold4();
  inline void clear_has_getgold4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int64 getgold1_;
  ::google::protobuf::int64 getgold4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqRankToJS* default_instance_;
};
// -------------------------------------------------------------------

class OGReqNotice : public ::google::protobuf::Message {
 public:
  OGReqNotice();
  virtual ~OGReqNotice();
  
  OGReqNotice(const OGReqNotice& from);
  
  inline OGReqNotice& operator=(const OGReqNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqNotice& default_instance();
  
  void Swap(OGReqNotice* other);
  
  // implements Message ----------------------------------------------
  
  OGReqNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqNotice& from);
  void MergeFrom(const OGReqNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional string color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  inline ::std::string* release_color();
  
  // optional string sendTime = 5;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 5;
  inline const ::std::string& sendtime() const;
  inline void set_sendtime(const ::std::string& value);
  inline void set_sendtime(const char* value);
  inline void set_sendtime(const char* value, size_t size);
  inline ::std::string* mutable_sendtime();
  inline ::std::string* release_sendtime();
  
  // optional int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqNotice)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 time_;
  ::std::string* content_;
  ::std::string* color_;
  ::std::string* sendtime_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqNotice* default_instance_;
};
// -------------------------------------------------------------------

class OGGuangGao : public ::google::protobuf::Message {
 public:
  OGGuangGao();
  virtual ~OGGuangGao();
  
  OGGuangGao(const OGGuangGao& from);
  
  inline OGGuangGao& operator=(const OGGuangGao& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGGuangGao& default_instance();
  
  void Swap(OGGuangGao* other);
  
  // implements Message ----------------------------------------------
  
  OGGuangGao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGGuangGao& from);
  void MergeFrom(const OGGuangGao& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 flg = 1;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 1;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGGuangGao)
 private:
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::google::protobuf::int32 flg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGGuangGao* default_instance_;
};
// -------------------------------------------------------------------

class OGAckMessage : public ::google::protobuf::Message {
 public:
  OGAckMessage();
  virtual ~OGAckMessage();
  
  OGAckMessage(const OGAckMessage& from);
  
  inline OGAckMessage& operator=(const OGAckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckMessage& default_instance();
  
  void Swap(OGAckMessage* other);
  
  // implements Message ----------------------------------------------
  
  OGAckMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckMessage& from);
  void MergeFrom(const OGAckMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 subtype = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 3;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);
  
  // optional int32 flg = 4;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 4;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // optional string roleName = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string userid = 6;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 6;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional int32 rankType = 7;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 7;
  inline ::google::protobuf::int32 ranktype() const;
  inline void set_ranktype(::google::protobuf::int32 value);
  
  // optional int32 rankNum = 8;
  inline bool has_ranknum() const;
  inline void clear_ranknum();
  static const int kRankNumFieldNumber = 8;
  inline ::google::protobuf::int32 ranknum() const;
  inline void set_ranknum(::google::protobuf::int32 value);
  
  // optional string tip = 9;
  inline bool has_tip() const;
  inline void clear_tip();
  static const int kTipFieldNumber = 9;
  inline const ::std::string& tip() const;
  inline void set_tip(const ::std::string& value);
  inline void set_tip(const char* value);
  inline void set_tip(const char* value, size_t size);
  inline ::std::string* mutable_tip();
  inline ::std::string* release_tip();
  
  // optional string time = 10;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 10;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_ranknum();
  inline void clear_has_ranknum();
  inline void set_has_tip();
  inline void clear_has_tip();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 subtype_;
  ::std::string* rolename_;
  ::google::protobuf::int32 flg_;
  ::google::protobuf::int32 ranktype_;
  ::std::string* userid_;
  ::std::string* tip_;
  ::std::string* time_;
  ::google::protobuf::int32 ranknum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckMessage* default_instance_;
};
// -------------------------------------------------------------------

class OGAckStopGame : public ::google::protobuf::Message {
 public:
  OGAckStopGame();
  virtual ~OGAckStopGame();
  
  OGAckStopGame(const OGAckStopGame& from);
  
  inline OGAckStopGame& operator=(const OGAckStopGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckStopGame& default_instance();
  
  void Swap(OGAckStopGame* other);
  
  // implements Message ----------------------------------------------
  
  OGAckStopGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckStopGame& from);
  void MergeFrom(const OGAckStopGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckStopGame_E_Status E_Status;
  static const E_Status ET_STOPS = OGAckStopGame_E_Status_ET_STOPS;
  static const E_Status ET_CARRYCAPS = OGAckStopGame_E_Status_ET_CARRYCAPS;
  static inline bool E_Status_IsValid(int value) {
    return OGAckStopGame_E_Status_IsValid(value);
  }
  static const E_Status E_Status_MIN =
    OGAckStopGame_E_Status_E_Status_MIN;
  static const E_Status E_Status_MAX =
    OGAckStopGame_E_Status_E_Status_MAX;
  static const int E_Status_ARRAYSIZE =
    OGAckStopGame_E_Status_E_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  E_Status_descriptor() {
    return OGAckStopGame_E_Status_descriptor();
  }
  static inline const ::std::string& E_Status_Name(E_Status value) {
    return OGAckStopGame_E_Status_Name(value);
  }
  static inline bool E_Status_Parse(const ::std::string& name,
      E_Status* value) {
    return OGAckStopGame_E_Status_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::com::ourgame::texasSlots::OGAckStopGame_E_Status status() const;
  inline void set_status(::com::ourgame::texasSlots::OGAckStopGame_E_Status value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckStopGame)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckStopGame* default_instance_;
};
// -------------------------------------------------------------------

class OGAckMails_Mail : public ::google::protobuf::Message {
 public:
  OGAckMails_Mail();
  virtual ~OGAckMails_Mail();
  
  OGAckMails_Mail(const OGAckMails_Mail& from);
  
  inline OGAckMails_Mail& operator=(const OGAckMails_Mail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckMails_Mail& default_instance();
  
  void Swap(OGAckMails_Mail* other);
  
  // implements Message ----------------------------------------------
  
  OGAckMails_Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckMails_Mail& from);
  void MergeFrom(const OGAckMails_Mail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string sendRoleName = 2;
  inline bool has_sendrolename() const;
  inline void clear_sendrolename();
  static const int kSendRoleNameFieldNumber = 2;
  inline const ::std::string& sendrolename() const;
  inline void set_sendrolename(const ::std::string& value);
  inline void set_sendrolename(const char* value);
  inline void set_sendrolename(const char* value, size_t size);
  inline ::std::string* mutable_sendrolename();
  inline ::std::string* release_sendrolename();
  
  // optional string recvRoleName = 3;
  inline bool has_recvrolename() const;
  inline void clear_recvrolename();
  static const int kRecvRoleNameFieldNumber = 3;
  inline const ::std::string& recvrolename() const;
  inline void set_recvrolename(const ::std::string& value);
  inline void set_recvrolename(const char* value);
  inline void set_recvrolename(const char* value, size_t size);
  inline ::std::string* mutable_recvrolename();
  inline ::std::string* release_recvrolename();
  
  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional string createTime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  
  // optional string mailTitle = 6;
  inline bool has_mailtitle() const;
  inline void clear_mailtitle();
  static const int kMailTitleFieldNumber = 6;
  inline const ::std::string& mailtitle() const;
  inline void set_mailtitle(const ::std::string& value);
  inline void set_mailtitle(const char* value);
  inline void set_mailtitle(const char* value, size_t size);
  inline ::std::string* mutable_mailtitle();
  inline ::std::string* release_mailtitle();
  
  // optional int32 awardType = 7;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 7;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);
  
  // optional int32 itemId = 8;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 8;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemNum = 9;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 9;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional int32 isRead = 10;
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 10;
  inline ::google::protobuf::int32 isread() const;
  inline void set_isread(::google::protobuf::int32 value);
  
  // optional int32 isOk = 11;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOkFieldNumber = 11;
  inline ::google::protobuf::int32 isok() const;
  inline void set_isok(::google::protobuf::int32 value);
  
  // optional string pic = 12;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 12;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional string itemName = 13;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 13;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  
  // optional string itemTip = 14;
  inline bool has_itemtip() const;
  inline void clear_itemtip();
  static const int kItemTipFieldNumber = 14;
  inline const ::std::string& itemtip() const;
  inline void set_itemtip(const ::std::string& value);
  inline void set_itemtip(const char* value);
  inline void set_itemtip(const char* value, size_t size);
  inline ::std::string* mutable_itemtip();
  inline ::std::string* release_itemtip();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckMails.Mail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sendrolename();
  inline void clear_has_sendrolename();
  inline void set_has_recvrolename();
  inline void clear_has_recvrolename();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_mailtitle();
  inline void clear_has_mailtitle();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemtip();
  inline void clear_has_itemtip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sendrolename_;
  ::std::string* recvrolename_;
  ::std::string* content_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 awardtype_;
  ::std::string* createtime_;
  ::std::string* mailtitle_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 isread_;
  ::google::protobuf::int32 isok_;
  ::std::string* pic_;
  ::std::string* itemname_;
  ::std::string* itemtip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckMails_Mail* default_instance_;
};
// -------------------------------------------------------------------

class OGAckMails : public ::google::protobuf::Message {
 public:
  OGAckMails();
  virtual ~OGAckMails();
  
  OGAckMails(const OGAckMails& from);
  
  inline OGAckMails& operator=(const OGAckMails& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckMails& default_instance();
  
  void Swap(OGAckMails* other);
  
  // implements Message ----------------------------------------------
  
  OGAckMails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckMails& from);
  void MergeFrom(const OGAckMails& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckMails_Mail Mail;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMailListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckMails_Mail& maillist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckMails_Mail* mutable_maillist(int index);
  inline ::com::ourgame::texasSlots::OGAckMails_Mail* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckMails_Mail >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckMails_Mail >*
      mutable_maillist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckMails)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckMails_Mail > maillist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckMails* default_instance_;
};
// -------------------------------------------------------------------

class OGReqHandleMails : public ::google::protobuf::Message {
 public:
  OGReqHandleMails();
  virtual ~OGReqHandleMails();
  
  OGReqHandleMails(const OGReqHandleMails& from);
  
  inline OGReqHandleMails& operator=(const OGReqHandleMails& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqHandleMails& default_instance();
  
  void Swap(OGReqHandleMails* other);
  
  // implements Message ----------------------------------------------
  
  OGReqHandleMails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqHandleMails& from);
  void MergeFrom(const OGReqHandleMails& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqHandleMails)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqHandleMails* default_instance_;
};
// -------------------------------------------------------------------

class OGReqMails : public ::google::protobuf::Message {
 public:
  OGReqMails();
  virtual ~OGReqMails();
  
  OGReqMails(const OGReqMails& from);
  
  inline OGReqMails& operator=(const OGReqMails& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqMails& default_instance();
  
  void Swap(OGReqMails* other);
  
  // implements Message ----------------------------------------------
  
  OGReqMails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqMails& from);
  void MergeFrom(const OGReqMails& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqMails)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqMails* default_instance_;
};
// -------------------------------------------------------------------

class OGAckMail : public ::google::protobuf::Message {
 public:
  OGAckMail();
  virtual ~OGAckMail();
  
  OGAckMail(const OGAckMail& from);
  
  inline OGAckMail& operator=(const OGAckMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckMail& default_instance();
  
  void Swap(OGAckMail* other);
  
  // implements Message ----------------------------------------------
  
  OGAckMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckMail& from);
  void MergeFrom(const OGAckMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string pic = 2;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 2;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int32 awardType = 4;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 4;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);
  
  // optional string errorMsg = 5;
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 5;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // optional int32 mailId = 6;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 6;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckMail)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pic_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 num_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 awardtype_;
  ::google::protobuf::int32 mailid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckMail* default_instance_;
};
// -------------------------------------------------------------------

class OGAckUnreadMail : public ::google::protobuf::Message {
 public:
  OGAckUnreadMail();
  virtual ~OGAckUnreadMail();
  
  OGAckUnreadMail(const OGAckUnreadMail& from);
  
  inline OGAckUnreadMail& operator=(const OGAckUnreadMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckUnreadMail& default_instance();
  
  void Swap(OGAckUnreadMail* other);
  
  // implements Message ----------------------------------------------
  
  OGAckUnreadMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckUnreadMail& from);
  void MergeFrom(const OGAckUnreadMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckUnreadMail)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckUnreadMail* default_instance_;
};
// -------------------------------------------------------------------

class OGAckItems_Item : public ::google::protobuf::Message {
 public:
  OGAckItems_Item();
  virtual ~OGAckItems_Item();
  
  OGAckItems_Item(const OGAckItems_Item& from);
  
  inline OGAckItems_Item& operator=(const OGAckItems_Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckItems_Item& default_instance();
  
  void Swap(OGAckItems_Item* other);
  
  // implements Message ----------------------------------------------
  
  OGAckItems_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckItems_Item& from);
  void MergeFrom(const OGAckItems_Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemNum = 3;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional string pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string tip = 7;
  inline bool has_tip() const;
  inline void clear_tip();
  static const int kTipFieldNumber = 7;
  inline const ::std::string& tip() const;
  inline void set_tip(const ::std::string& value);
  inline void set_tip(const char* value);
  inline void set_tip(const char* value, size_t size);
  inline ::std::string* mutable_tip();
  inline ::std::string* release_tip();
  
  // optional int32 maxNum = 8;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 8;
  inline ::google::protobuf::int32 maxnum() const;
  inline void set_maxnum(::google::protobuf::int32 value);
  
  // optional int32 effect = 9;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 9;
  inline ::google::protobuf::int32 effect() const;
  inline void set_effect(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckItems.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tip();
  inline void clear_has_tip();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_effect();
  inline void clear_has_effect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 itemid_;
  ::std::string* pic_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::std::string* tip_;
  ::google::protobuf::int32 maxnum_;
  ::google::protobuf::int32 effect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckItems_Item* default_instance_;
};
// -------------------------------------------------------------------

class OGAckItems : public ::google::protobuf::Message {
 public:
  OGAckItems();
  virtual ~OGAckItems();
  
  OGAckItems(const OGAckItems& from);
  
  inline OGAckItems& operator=(const OGAckItems& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckItems& default_instance();
  
  void Swap(OGAckItems* other);
  
  // implements Message ----------------------------------------------
  
  OGAckItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckItems& from);
  void MergeFrom(const OGAckItems& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckItems_Item Item;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckItems_Item& itemlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckItems_Item* mutable_itemlist(int index);
  inline ::com::ourgame::texasSlots::OGAckItems_Item* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItems_Item >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItems_Item >*
      mutable_itemlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckItems)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItems_Item > itemlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckItems* default_instance_;
};
// -------------------------------------------------------------------

class OGAckShopItemInfo_ItemInfo : public ::google::protobuf::Message {
 public:
  OGAckShopItemInfo_ItemInfo();
  virtual ~OGAckShopItemInfo_ItemInfo();
  
  OGAckShopItemInfo_ItemInfo(const OGAckShopItemInfo_ItemInfo& from);
  
  inline OGAckShopItemInfo_ItemInfo& operator=(const OGAckShopItemInfo_ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckShopItemInfo_ItemInfo& default_instance();
  
  void Swap(OGAckShopItemInfo_ItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  OGAckShopItemInfo_ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckShopItemInfo_ItemInfo& from);
  void MergeFrom(const OGAckShopItemInfo_ItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemPrice = 2;
  inline bool has_itemprice() const;
  inline void clear_itemprice();
  static const int kItemPriceFieldNumber = 2;
  inline ::google::protobuf::int32 itemprice() const;
  inline void set_itemprice(::google::protobuf::int32 value);
  
  // optional string shopDesc = 3;
  inline bool has_shopdesc() const;
  inline void clear_shopdesc();
  static const int kShopDescFieldNumber = 3;
  inline const ::std::string& shopdesc() const;
  inline void set_shopdesc(const ::std::string& value);
  inline void set_shopdesc(const char* value);
  inline void set_shopdesc(const char* value, size_t size);
  inline ::std::string* mutable_shopdesc();
  inline ::std::string* release_shopdesc();
  
  // optional string shopPic = 4;
  inline bool has_shoppic() const;
  inline void clear_shoppic();
  static const int kShopPicFieldNumber = 4;
  inline const ::std::string& shoppic() const;
  inline void set_shoppic(const ::std::string& value);
  inline void set_shoppic(const char* value);
  inline void set_shoppic(const char* value, size_t size);
  inline ::std::string* mutable_shoppic();
  inline ::std::string* release_shoppic();
  
  // optional int32 shopMaxNum = 5;
  inline bool has_shopmaxnum() const;
  inline void clear_shopmaxnum();
  static const int kShopMaxNumFieldNumber = 5;
  inline ::google::protobuf::int32 shopmaxnum() const;
  inline void set_shopmaxnum(::google::protobuf::int32 value);
  
  // optional string itemName = 6;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 6;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemprice();
  inline void clear_has_itemprice();
  inline void set_has_shopdesc();
  inline void clear_has_shopdesc();
  inline void set_has_shoppic();
  inline void clear_has_shoppic();
  inline void set_has_shopmaxnum();
  inline void clear_has_shopmaxnum();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemprice_;
  ::std::string* shopdesc_;
  ::std::string* shoppic_;
  ::std::string* itemname_;
  ::google::protobuf::int32 shopmaxnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckShopItemInfo_ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class OGAckShopItemInfo : public ::google::protobuf::Message {
 public:
  OGAckShopItemInfo();
  virtual ~OGAckShopItemInfo();
  
  OGAckShopItemInfo(const OGAckShopItemInfo& from);
  
  inline OGAckShopItemInfo& operator=(const OGAckShopItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckShopItemInfo& default_instance();
  
  void Swap(OGAckShopItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  OGAckShopItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckShopItemInfo& from);
  void MergeFrom(const OGAckShopItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckShopItemInfo_ItemInfo ItemInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
  inline int shoplist_size() const;
  inline void clear_shoplist();
  static const int kShopListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo& shoplist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo* mutable_shoplist(int index);
  inline ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo* add_shoplist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo >&
      shoplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo >*
      mutable_shoplist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckShopItemInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo > shoplist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckShopItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class OGReqShopItem : public ::google::protobuf::Message {
 public:
  OGReqShopItem();
  virtual ~OGReqShopItem();
  
  OGReqShopItem(const OGReqShopItem& from);
  
  inline OGReqShopItem& operator=(const OGReqShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqShopItem& default_instance();
  
  void Swap(OGReqShopItem* other);
  
  // implements Message ----------------------------------------------
  
  OGReqShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqShopItem& from);
  void MergeFrom(const OGReqShopItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqShopItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqShopItem* default_instance_;
};
// -------------------------------------------------------------------

class OGAckCutItems_Item : public ::google::protobuf::Message {
 public:
  OGAckCutItems_Item();
  virtual ~OGAckCutItems_Item();
  
  OGAckCutItems_Item(const OGAckCutItems_Item& from);
  
  inline OGAckCutItems_Item& operator=(const OGAckCutItems_Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckCutItems_Item& default_instance();
  
  void Swap(OGAckCutItems_Item* other);
  
  // implements Message ----------------------------------------------
  
  OGAckCutItems_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckCutItems_Item& from);
  void MergeFrom(const OGAckCutItems_Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 itemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional int32 flg = 3;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 3;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckCutItems.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_flg();
  inline void clear_has_flg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 flg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckCutItems_Item* default_instance_;
};
// -------------------------------------------------------------------

class OGAckCutItems : public ::google::protobuf::Message {
 public:
  OGAckCutItems();
  virtual ~OGAckCutItems();
  
  OGAckCutItems(const OGAckCutItems& from);
  
  inline OGAckCutItems& operator=(const OGAckCutItems& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckCutItems& default_instance();
  
  void Swap(OGAckCutItems* other);
  
  // implements Message ----------------------------------------------
  
  OGAckCutItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckCutItems& from);
  void MergeFrom(const OGAckCutItems& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckCutItems_Item Item;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckCutItems_Item& itemlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckCutItems_Item* mutable_itemlist(int index);
  inline ::com::ourgame::texasSlots::OGAckCutItems_Item* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckCutItems_Item >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckCutItems_Item >*
      mutable_itemlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckCutItems)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckCutItems_Item > itemlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckCutItems* default_instance_;
};
// -------------------------------------------------------------------

class OGAckErrorMsg : public ::google::protobuf::Message {
 public:
  OGAckErrorMsg();
  virtual ~OGAckErrorMsg();
  
  OGAckErrorMsg(const OGAckErrorMsg& from);
  
  inline OGAckErrorMsg& operator=(const OGAckErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckErrorMsg& default_instance();
  
  void Swap(OGAckErrorMsg* other);
  
  // implements Message ----------------------------------------------
  
  OGAckErrorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckErrorMsg& from);
  void MergeFrom(const OGAckErrorMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckErrorMsg)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckErrorMsg* default_instance_;
};
// -------------------------------------------------------------------

class OGReqBuyItem : public ::google::protobuf::Message {
 public:
  OGReqBuyItem();
  virtual ~OGReqBuyItem();
  
  OGReqBuyItem(const OGReqBuyItem& from);
  
  inline OGReqBuyItem& operator=(const OGReqBuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqBuyItem& default_instance();
  
  void Swap(OGReqBuyItem* other);
  
  // implements Message ----------------------------------------------
  
  OGReqBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqBuyItem& from);
  void MergeFrom(const OGReqBuyItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqBuyItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class OGReqNewHandOver : public ::google::protobuf::Message {
 public:
  OGReqNewHandOver();
  virtual ~OGReqNewHandOver();
  
  OGReqNewHandOver(const OGReqNewHandOver& from);
  
  inline OGReqNewHandOver& operator=(const OGReqNewHandOver& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqNewHandOver& default_instance();
  
  void Swap(OGReqNewHandOver* other);
  
  // implements Message ----------------------------------------------
  
  OGReqNewHandOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqNewHandOver& from);
  void MergeFrom(const OGReqNewHandOver& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqNewHandOver)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqNewHandOver* default_instance_;
};
// -------------------------------------------------------------------

class OGReqNewHandAward : public ::google::protobuf::Message {
 public:
  OGReqNewHandAward();
  virtual ~OGReqNewHandAward();
  
  OGReqNewHandAward(const OGReqNewHandAward& from);
  
  inline OGReqNewHandAward& operator=(const OGReqNewHandAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqNewHandAward& default_instance();
  
  void Swap(OGReqNewHandAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqNewHandAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqNewHandAward& from);
  void MergeFrom(const OGReqNewHandAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqNewHandAward)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqNewHandAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckNewHandAward : public ::google::protobuf::Message {
 public:
  OGAckNewHandAward();
  virtual ~OGAckNewHandAward();
  
  OGAckNewHandAward(const OGAckNewHandAward& from);
  
  inline OGAckNewHandAward& operator=(const OGAckNewHandAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckNewHandAward& default_instance();
  
  void Swap(OGAckNewHandAward* other);
  
  // implements Message ----------------------------------------------
  
  OGAckNewHandAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckNewHandAward& from);
  void MergeFrom(const OGAckNewHandAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 itemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional string pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string dis = 5;
  inline bool has_dis() const;
  inline void clear_dis();
  static const int kDisFieldNumber = 5;
  inline const ::std::string& dis() const;
  inline void set_dis(const ::std::string& value);
  inline void set_dis(const char* value);
  inline void set_dis(const char* value, size_t size);
  inline ::std::string* mutable_dis();
  inline ::std::string* release_dis();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckNewHandAward)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dis();
  inline void clear_has_dis();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  ::std::string* pic_;
  ::std::string* name_;
  ::std::string* dis_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckNewHandAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPlayerLogot : public ::google::protobuf::Message {
 public:
  OGAckPlayerLogot();
  virtual ~OGAckPlayerLogot();
  
  OGAckPlayerLogot(const OGAckPlayerLogot& from);
  
  inline OGAckPlayerLogot& operator=(const OGAckPlayerLogot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPlayerLogot& default_instance();
  
  void Swap(OGAckPlayerLogot* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPlayerLogot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPlayerLogot& from);
  void MergeFrom(const OGAckPlayerLogot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPlayerLogot)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPlayerLogot* default_instance_;
};
// -------------------------------------------------------------------

class OGAckRankHour : public ::google::protobuf::Message {
 public:
  OGAckRankHour();
  virtual ~OGAckRankHour();
  
  OGAckRankHour(const OGAckRankHour& from);
  
  inline OGAckRankHour& operator=(const OGAckRankHour& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckRankHour& default_instance();
  
  void Swap(OGAckRankHour* other);
  
  // implements Message ----------------------------------------------
  
  OGAckRankHour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckRankHour& from);
  void MergeFrom(const OGAckRankHour& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 week = 2;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 2;
  inline ::google::protobuf::int32 week() const;
  inline void set_week(::google::protobuf::int32 value);
  
  // optional int32 hour = 3;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 3;
  inline ::google::protobuf::int32 hour() const;
  inline void set_hour(::google::protobuf::int32 value);
  
  // optional int32 minute = 4;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 4;
  inline ::google::protobuf::int32 minute() const;
  inline void set_minute(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckRankHour)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 minute_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckRankHour* default_instance_;
};
// -------------------------------------------------------------------

class OGReqJpRecord : public ::google::protobuf::Message {
 public:
  OGReqJpRecord();
  virtual ~OGReqJpRecord();
  
  OGReqJpRecord(const OGReqJpRecord& from);
  
  inline OGReqJpRecord& operator=(const OGReqJpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqJpRecord& default_instance();
  
  void Swap(OGReqJpRecord* other);
  
  // implements Message ----------------------------------------------
  
  OGReqJpRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqJpRecord& from);
  void MergeFrom(const OGReqJpRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqJpRecord)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqJpRecord* default_instance_;
};
// -------------------------------------------------------------------

class OGReqJpStar : public ::google::protobuf::Message {
 public:
  OGReqJpStar();
  virtual ~OGReqJpStar();
  
  OGReqJpStar(const OGReqJpStar& from);
  
  inline OGReqJpStar& operator=(const OGReqJpStar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqJpStar& default_instance();
  
  void Swap(OGReqJpStar* other);
  
  // implements Message ----------------------------------------------
  
  OGReqJpStar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqJpStar& from);
  void MergeFrom(const OGReqJpStar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string jpStarName = 2;
  inline bool has_jpstarname() const;
  inline void clear_jpstarname();
  static const int kJpStarNameFieldNumber = 2;
  inline const ::std::string& jpstarname() const;
  inline void set_jpstarname(const ::std::string& value);
  inline void set_jpstarname(const char* value);
  inline void set_jpstarname(const char* value, size_t size);
  inline ::std::string* mutable_jpstarname();
  inline ::std::string* release_jpstarname();
  
  // optional int64 jpStarTemNum = 3;
  inline bool has_jpstartemnum() const;
  inline void clear_jpstartemnum();
  static const int kJpStarTemNumFieldNumber = 3;
  inline ::google::protobuf::int64 jpstartemnum() const;
  inline void set_jpstartemnum(::google::protobuf::int64 value);
  
  // optional string jpStarTime = 4;
  inline bool has_jpstartime() const;
  inline void clear_jpstartime();
  static const int kJpStarTimeFieldNumber = 4;
  inline const ::std::string& jpstartime() const;
  inline void set_jpstartime(const ::std::string& value);
  inline void set_jpstartime(const char* value);
  inline void set_jpstartime(const char* value, size_t size);
  inline ::std::string* mutable_jpstartime();
  inline ::std::string* release_jpstartime();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqJpStar)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_jpstarname();
  inline void clear_has_jpstarname();
  inline void set_has_jpstartemnum();
  inline void clear_has_jpstartemnum();
  inline void set_has_jpstartime();
  inline void clear_has_jpstartime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::std::string* jpstarname_;
  ::google::protobuf::int64 jpstartemnum_;
  ::std::string* jpstartime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqJpStar* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJpRecord_JpRecord : public ::google::protobuf::Message {
 public:
  OGAckJpRecord_JpRecord();
  virtual ~OGAckJpRecord_JpRecord();
  
  OGAckJpRecord_JpRecord(const OGAckJpRecord_JpRecord& from);
  
  inline OGAckJpRecord_JpRecord& operator=(const OGAckJpRecord_JpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJpRecord_JpRecord& default_instance();
  
  void Swap(OGAckJpRecord_JpRecord* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJpRecord_JpRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJpRecord_JpRecord& from);
  void MergeFrom(const OGAckJpRecord_JpRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // required string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // required int64 winGold = 3;
  inline bool has_wingold() const;
  inline void clear_wingold();
  static const int kWinGoldFieldNumber = 3;
  inline ::google::protobuf::int64 wingold() const;
  inline void set_wingold(::google::protobuf::int64 value);
  
  // required int64 currJp = 4;
  inline bool has_currjp() const;
  inline void clear_currjp();
  static const int kCurrJpFieldNumber = 4;
  inline ::google::protobuf::int64 currjp() const;
  inline void set_currjp(::google::protobuf::int64 value);
  
  // required int32 showType = 5;
  inline bool has_showtype() const;
  inline void clear_showtype();
  static const int kShowTypeFieldNumber = 5;
  inline ::google::protobuf::int32 showtype() const;
  inline void set_showtype(::google::protobuf::int32 value);
  
  // required string gameName = 6;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGameNameFieldNumber = 6;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  
  // required string createtime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 7;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  
  // required int32 gameId = 8;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 8;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJpRecord.JpRecord)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_wingold();
  inline void clear_has_wingold();
  inline void set_has_currjp();
  inline void clear_has_currjp();
  inline void set_has_showtype();
  inline void clear_has_showtype();
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  ::std::string* rolename_;
  ::google::protobuf::int64 wingold_;
  ::google::protobuf::int64 currjp_;
  ::std::string* gamename_;
  ::google::protobuf::int32 showtype_;
  ::google::protobuf::int32 gameid_;
  ::std::string* createtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJpRecord_JpRecord* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJpRecord : public ::google::protobuf::Message {
 public:
  OGAckJpRecord();
  virtual ~OGAckJpRecord();
  
  OGAckJpRecord(const OGAckJpRecord& from);
  
  inline OGAckJpRecord& operator=(const OGAckJpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJpRecord& default_instance();
  
  void Swap(OGAckJpRecord* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJpRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJpRecord& from);
  void MergeFrom(const OGAckJpRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckJpRecord_JpRecord JpRecord;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
  inline int jprecordlist_size() const;
  inline void clear_jprecordlist();
  static const int kJpRecordListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord& jprecordlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord* mutable_jprecordlist(int index);
  inline ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord* add_jprecordlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord >&
      jprecordlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord >*
      mutable_jprecordlist();
  
  // required int32 tipOn = 2;
  inline bool has_tipon() const;
  inline void clear_tipon();
  static const int kTipOnFieldNumber = 2;
  inline ::google::protobuf::int32 tipon() const;
  inline void set_tipon(::google::protobuf::int32 value);
  
  // optional string tipText = 3;
  inline bool has_tiptext() const;
  inline void clear_tiptext();
  static const int kTipTextFieldNumber = 3;
  inline const ::std::string& tiptext() const;
  inline void set_tiptext(const ::std::string& value);
  inline void set_tiptext(const char* value);
  inline void set_tiptext(const char* value, size_t size);
  inline ::std::string* mutable_tiptext();
  inline ::std::string* release_tiptext();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJpRecord)
 private:
  inline void set_has_tipon();
  inline void clear_has_tipon();
  inline void set_has_tiptext();
  inline void clear_has_tiptext();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord > jprecordlist_;
  ::std::string* tiptext_;
  ::google::protobuf::int32 tipon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJpRecord* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLoginJpMsg : public ::google::protobuf::Message {
 public:
  OGAckLoginJpMsg();
  virtual ~OGAckLoginJpMsg();
  
  OGAckLoginJpMsg(const OGAckLoginJpMsg& from);
  
  inline OGAckLoginJpMsg& operator=(const OGAckLoginJpMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLoginJpMsg& default_instance();
  
  void Swap(OGAckLoginJpMsg* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLoginJpMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLoginJpMsg& from);
  void MergeFrom(const OGAckLoginJpMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLoginJpMsg)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLoginJpMsg* default_instance_;
};
// -------------------------------------------------------------------

class OGReqLoginGetAward : public ::google::protobuf::Message {
 public:
  OGReqLoginGetAward();
  virtual ~OGReqLoginGetAward();
  
  OGReqLoginGetAward(const OGReqLoginGetAward& from);
  
  inline OGReqLoginGetAward& operator=(const OGReqLoginGetAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqLoginGetAward& default_instance();
  
  void Swap(OGReqLoginGetAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqLoginGetAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqLoginGetAward& from);
  void MergeFrom(const OGReqLoginGetAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 lev = 2;
  inline bool has_lev() const;
  inline void clear_lev();
  static const int kLevFieldNumber = 2;
  inline ::google::protobuf::int32 lev() const;
  inline void set_lev(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqLoginGetAward)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_lev();
  inline void clear_has_lev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int32 lev_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqLoginGetAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLoginGetAward : public ::google::protobuf::Message {
 public:
  OGAckLoginGetAward();
  virtual ~OGAckLoginGetAward();
  
  OGAckLoginGetAward(const OGAckLoginGetAward& from);
  
  inline OGAckLoginGetAward& operator=(const OGAckLoginGetAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLoginGetAward& default_instance();
  
  void Swap(OGAckLoginGetAward* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLoginGetAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLoginGetAward& from);
  void MergeFrom(const OGAckLoginGetAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional string pic = 2;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 2;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 itemtype = 4;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemtypeFieldNumber = 4;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);
  
  // optional int32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional string roleName = 7;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 7;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 ok = 8;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 8;
  inline ::google::protobuf::int32 ok() const;
  inline void set_ok(::google::protobuf::int32 value);
  
  // optional int32 jilv = 9;
  inline bool has_jilv() const;
  inline void clear_jilv();
  static const int kJilvFieldNumber = 9;
  inline ::google::protobuf::int32 jilv() const;
  inline void set_jilv(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLoginGetAward)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_ok();
  inline void clear_has_ok();
  inline void set_has_jilv();
  inline void clear_has_jilv();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pic_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 itemtype_;
  ::std::string* content_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;
  ::std::string* rolename_;
  ::google::protobuf::int32 ok_;
  ::google::protobuf::int32 jilv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLoginGetAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLoginAwardList_Award : public ::google::protobuf::Message {
 public:
  OGAckLoginAwardList_Award();
  virtual ~OGAckLoginAwardList_Award();
  
  OGAckLoginAwardList_Award(const OGAckLoginAwardList_Award& from);
  
  inline OGAckLoginAwardList_Award& operator=(const OGAckLoginAwardList_Award& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLoginAwardList_Award& default_instance();
  
  void Swap(OGAckLoginAwardList_Award* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLoginAwardList_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLoginAwardList_Award& from);
  void MergeFrom(const OGAckLoginAwardList_Award& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional string pic = 2;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 2;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  
  // optional int32 lev = 3;
  inline bool has_lev() const;
  inline void clear_lev();
  static const int kLevFieldNumber = 3;
  inline ::google::protobuf::int32 lev() const;
  inline void set_lev(::google::protobuf::int32 value);
  
  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLoginAwardList.Award)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_lev();
  inline void clear_has_lev();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pic_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 lev_;
  ::std::string* content_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLoginAwardList_Award* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLoginAwardList : public ::google::protobuf::Message {
 public:
  OGAckLoginAwardList();
  virtual ~OGAckLoginAwardList();
  
  OGAckLoginAwardList(const OGAckLoginAwardList& from);
  
  inline OGAckLoginAwardList& operator=(const OGAckLoginAwardList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLoginAwardList& default_instance();
  
  void Swap(OGAckLoginAwardList* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLoginAwardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLoginAwardList& from);
  void MergeFrom(const OGAckLoginAwardList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckLoginAwardList_Award Award;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
  inline int awardlist_size() const;
  inline void clear_awardlist();
  static const int kAwardListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckLoginAwardList_Award& awardlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckLoginAwardList_Award* mutable_awardlist(int index);
  inline ::com::ourgame::texasSlots::OGAckLoginAwardList_Award* add_awardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckLoginAwardList_Award >&
      awardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckLoginAwardList_Award >*
      mutable_awardlist();
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLoginAwardList)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckLoginAwardList_Award > awardlist_;
  ::std::string* rolename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLoginAwardList* default_instance_;
};
// -------------------------------------------------------------------

class OGReqDoubleJpResult : public ::google::protobuf::Message {
 public:
  OGReqDoubleJpResult();
  virtual ~OGReqDoubleJpResult();
  
  OGReqDoubleJpResult(const OGReqDoubleJpResult& from);
  
  inline OGReqDoubleJpResult& operator=(const OGReqDoubleJpResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqDoubleJpResult& default_instance();
  
  void Swap(OGReqDoubleJpResult* other);
  
  // implements Message ----------------------------------------------
  
  OGReqDoubleJpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqDoubleJpResult& from);
  void MergeFrom(const OGReqDoubleJpResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 needGold = 1;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 1;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional int64 daygold = 4;
  inline bool has_daygold() const;
  inline void clear_daygold();
  static const int kDaygoldFieldNumber = 4;
  inline ::google::protobuf::int64 daygold() const;
  inline void set_daygold(::google::protobuf::int64 value);
  
  // optional int64 weekgold = 5;
  inline bool has_weekgold() const;
  inline void clear_weekgold();
  static const int kWeekgoldFieldNumber = 5;
  inline ::google::protobuf::int64 weekgold() const;
  inline void set_weekgold(::google::protobuf::int64 value);
  
  // optional int64 monthgold = 6;
  inline bool has_monthgold() const;
  inline void clear_monthgold();
  static const int kMonthgoldFieldNumber = 6;
  inline ::google::protobuf::int64 monthgold() const;
  inline void set_monthgold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqDoubleJpResult)
 private:
  inline void set_has_needgold();
  inline void clear_has_needgold();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_daygold();
  inline void clear_has_daygold();
  inline void set_has_weekgold();
  inline void clear_has_weekgold();
  inline void set_has_monthgold();
  inline void clear_has_monthgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 needgold_;
  ::std::string* rolename_;
  ::std::string* userid_;
  ::google::protobuf::int64 daygold_;
  ::google::protobuf::int64 weekgold_;
  ::google::protobuf::int64 monthgold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqDoubleJpResult* default_instance_;
};
// -------------------------------------------------------------------

class OGAckDoubleJpResult : public ::google::protobuf::Message {
 public:
  OGAckDoubleJpResult();
  virtual ~OGAckDoubleJpResult();
  
  OGAckDoubleJpResult(const OGAckDoubleJpResult& from);
  
  inline OGAckDoubleJpResult& operator=(const OGAckDoubleJpResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckDoubleJpResult& default_instance();
  
  void Swap(OGAckDoubleJpResult* other);
  
  // implements Message ----------------------------------------------
  
  OGAckDoubleJpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckDoubleJpResult& from);
  void MergeFrom(const OGAckDoubleJpResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 needGold = 3;
  inline bool has_needgold() const;
  inline void clear_needgold();
  static const int kNeedGoldFieldNumber = 3;
  inline ::google::protobuf::int64 needgold() const;
  inline void set_needgold(::google::protobuf::int64 value);
  
  // optional int64 jp = 4;
  inline bool has_jp() const;
  inline void clear_jp();
  static const int kJpFieldNumber = 4;
  inline ::google::protobuf::int64 jp() const;
  inline void set_jp(::google::protobuf::int64 value);
  
  // optional int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 jilv1 = 6;
  inline bool has_jilv1() const;
  inline void clear_jilv1();
  static const int kJilv1FieldNumber = 6;
  inline ::google::protobuf::int32 jilv1() const;
  inline void set_jilv1(::google::protobuf::int32 value);
  
  // optional int32 jilv2 = 7;
  inline bool has_jilv2() const;
  inline void clear_jilv2();
  static const int kJilv2FieldNumber = 7;
  inline ::google::protobuf::int32 jilv2() const;
  inline void set_jilv2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckDoubleJpResult)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_needgold();
  inline void clear_has_needgold();
  inline void set_has_jp();
  inline void clear_has_jp();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_jilv1();
  inline void clear_has_jilv1();
  inline void set_has_jilv2();
  inline void clear_has_jilv2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 gold_;
  ::std::string* rolename_;
  ::google::protobuf::int64 needgold_;
  ::google::protobuf::int64 jp_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 jilv1_;
  ::google::protobuf::int32 jilv2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckDoubleJpResult* default_instance_;
};
// -------------------------------------------------------------------

class OGAckDoublePlus_DoublePlus : public ::google::protobuf::Message {
 public:
  OGAckDoublePlus_DoublePlus();
  virtual ~OGAckDoublePlus_DoublePlus();
  
  OGAckDoublePlus_DoublePlus(const OGAckDoublePlus_DoublePlus& from);
  
  inline OGAckDoublePlus_DoublePlus& operator=(const OGAckDoublePlus_DoublePlus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckDoublePlus_DoublePlus& default_instance();
  
  void Swap(OGAckDoublePlus_DoublePlus* other);
  
  // implements Message ----------------------------------------------
  
  OGAckDoublePlus_DoublePlus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckDoublePlus_DoublePlus& from);
  void MergeFrom(const OGAckDoublePlus_DoublePlus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 startLev = 1;
  inline bool has_startlev() const;
  inline void clear_startlev();
  static const int kStartLevFieldNumber = 1;
  inline ::google::protobuf::int32 startlev() const;
  inline void set_startlev(::google::protobuf::int32 value);
  
  // optional int32 plus = 2;
  inline bool has_plus() const;
  inline void clear_plus();
  static const int kPlusFieldNumber = 2;
  inline ::google::protobuf::int32 plus() const;
  inline void set_plus(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus)
 private:
  inline void set_has_startlev();
  inline void clear_has_startlev();
  inline void set_has_plus();
  inline void clear_has_plus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 startlev_;
  ::google::protobuf::int32 plus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckDoublePlus_DoublePlus* default_instance_;
};
// -------------------------------------------------------------------

class OGAckDoublePlus : public ::google::protobuf::Message {
 public:
  OGAckDoublePlus();
  virtual ~OGAckDoublePlus();
  
  OGAckDoublePlus(const OGAckDoublePlus& from);
  
  inline OGAckDoublePlus& operator=(const OGAckDoublePlus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckDoublePlus& default_instance();
  
  void Swap(OGAckDoublePlus* other);
  
  // implements Message ----------------------------------------------
  
  OGAckDoublePlus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckDoublePlus& from);
  void MergeFrom(const OGAckDoublePlus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckDoublePlus_DoublePlus DoublePlus;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
  inline int doublepluslist_size() const;
  inline void clear_doublepluslist();
  static const int kDoublePlusListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus& doublepluslist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus* mutable_doublepluslist(int index);
  inline ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus* add_doublepluslist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus >&
      doublepluslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus >*
      mutable_doublepluslist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckDoublePlus)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus > doublepluslist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckDoublePlus* default_instance_;
};
// -------------------------------------------------------------------

class OGReqGetPlayer : public ::google::protobuf::Message {
 public:
  OGReqGetPlayer();
  virtual ~OGReqGetPlayer();
  
  OGReqGetPlayer(const OGReqGetPlayer& from);
  
  inline OGReqGetPlayer& operator=(const OGReqGetPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqGetPlayer& default_instance();
  
  void Swap(OGReqGetPlayer* other);
  
  // implements Message ----------------------------------------------
  
  OGReqGetPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqGetPlayer& from);
  void MergeFrom(const OGReqGetPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string rolename = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqGetPlayer)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqGetPlayer* default_instance_;
};
// -------------------------------------------------------------------

class OGReqChangePutGold : public ::google::protobuf::Message {
 public:
  OGReqChangePutGold();
  virtual ~OGReqChangePutGold();
  
  OGReqChangePutGold(const OGReqChangePutGold& from);
  
  inline OGReqChangePutGold& operator=(const OGReqChangePutGold& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqChangePutGold& default_instance();
  
  void Swap(OGReqChangePutGold* other);
  
  // implements Message ----------------------------------------------
  
  OGReqChangePutGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqChangePutGold& from);
  void MergeFrom(const OGReqChangePutGold& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional int64 freeFlg = 2;
  inline bool has_freeflg() const;
  inline void clear_freeflg();
  static const int kFreeFlgFieldNumber = 2;
  inline ::google::protobuf::int64 freeflg() const;
  inline void set_freeflg(::google::protobuf::int64 value);
  
  // optional int64 whiteGld = 3;
  inline bool has_whitegld() const;
  inline void clear_whitegld();
  static const int kWhiteGldFieldNumber = 3;
  inline ::google::protobuf::int64 whitegld() const;
  inline void set_whitegld(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqChangePutGold)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_freeflg();
  inline void clear_has_freeflg();
  inline void set_has_whitegld();
  inline void clear_has_whitegld();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 freeflg_;
  ::google::protobuf::int64 whitegld_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqChangePutGold* default_instance_;
};
// -------------------------------------------------------------------

class OGReqPetReturnAward : public ::google::protobuf::Message {
 public:
  OGReqPetReturnAward();
  virtual ~OGReqPetReturnAward();
  
  OGReqPetReturnAward(const OGReqPetReturnAward& from);
  
  inline OGReqPetReturnAward& operator=(const OGReqPetReturnAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqPetReturnAward& default_instance();
  
  void Swap(OGReqPetReturnAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqPetReturnAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqPetReturnAward& from);
  void MergeFrom(const OGReqPetReturnAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqPetReturnAward)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqPetReturnAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckPetReturnAward : public ::google::protobuf::Message {
 public:
  OGAckPetReturnAward();
  virtual ~OGAckPetReturnAward();
  
  OGAckPetReturnAward(const OGAckPetReturnAward& from);
  
  inline OGAckPetReturnAward& operator=(const OGAckPetReturnAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckPetReturnAward& default_instance();
  
  void Swap(OGAckPetReturnAward* other);
  
  // implements Message ----------------------------------------------
  
  OGAckPetReturnAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckPetReturnAward& from);
  void MergeFrom(const OGAckPetReturnAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckPetReturnAward)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gold();
  inline void clear_has_gold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckPetReturnAward* default_instance_;
};
// -------------------------------------------------------------------

class OGReqGetPutGoldAward : public ::google::protobuf::Message {
 public:
  OGReqGetPutGoldAward();
  virtual ~OGReqGetPutGoldAward();
  
  OGReqGetPutGoldAward(const OGReqGetPutGoldAward& from);
  
  inline OGReqGetPutGoldAward& operator=(const OGReqGetPutGoldAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqGetPutGoldAward& default_instance();
  
  void Swap(OGReqGetPutGoldAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqGetPutGoldAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqGetPutGoldAward& from);
  void MergeFrom(const OGReqGetPutGoldAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int64 putGold = 3;
  inline bool has_putgold() const;
  inline void clear_putgold();
  static const int kPutGoldFieldNumber = 3;
  inline ::google::protobuf::int64 putgold() const;
  inline void set_putgold(::google::protobuf::int64 value);
  
  // optional int32 action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);
  
  // optional int32 com = 5;
  inline bool has_com() const;
  inline void clear_com();
  static const int kComFieldNumber = 5;
  inline ::google::protobuf::int32 com() const;
  inline void set_com(::google::protobuf::int32 value);
  
  // optional int64 putGoldSum = 6;
  inline bool has_putgoldsum() const;
  inline void clear_putgoldsum();
  static const int kPutGoldSumFieldNumber = 6;
  inline ::google::protobuf::int64 putgoldsum() const;
  inline void set_putgoldsum(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqGetPutGoldAward)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_putgold();
  inline void clear_has_putgold();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_com();
  inline void clear_has_com();
  inline void set_has_putgoldsum();
  inline void clear_has_putgoldsum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 gold_;
  ::std::string* rolename_;
  ::google::protobuf::int64 putgold_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 com_;
  ::google::protobuf::int64 putgoldsum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqGetPutGoldAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckReSetFeed_PlayerFeed : public ::google::protobuf::Message {
 public:
  OGAckReSetFeed_PlayerFeed();
  virtual ~OGAckReSetFeed_PlayerFeed();
  
  OGAckReSetFeed_PlayerFeed(const OGAckReSetFeed_PlayerFeed& from);
  
  inline OGAckReSetFeed_PlayerFeed& operator=(const OGAckReSetFeed_PlayerFeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckReSetFeed_PlayerFeed& default_instance();
  
  void Swap(OGAckReSetFeed_PlayerFeed* other);
  
  // implements Message ----------------------------------------------
  
  OGAckReSetFeed_PlayerFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckReSetFeed_PlayerFeed& from);
  void MergeFrom(const OGAckReSetFeed_PlayerFeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional int32 feed = 2;
  inline bool has_feed() const;
  inline void clear_feed();
  static const int kFeedFieldNumber = 2;
  inline ::google::protobuf::int32 feed() const;
  inline void set_feed(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_feed();
  inline void clear_has_feed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::int32 feed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckReSetFeed_PlayerFeed* default_instance_;
};
// -------------------------------------------------------------------

class OGAckReSetFeed : public ::google::protobuf::Message {
 public:
  OGAckReSetFeed();
  virtual ~OGAckReSetFeed();
  
  OGAckReSetFeed(const OGAckReSetFeed& from);
  
  inline OGAckReSetFeed& operator=(const OGAckReSetFeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckReSetFeed& default_instance();
  
  void Swap(OGAckReSetFeed* other);
  
  // implements Message ----------------------------------------------
  
  OGAckReSetFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckReSetFeed& from);
  void MergeFrom(const OGAckReSetFeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckReSetFeed_PlayerFeed PlayerFeed;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
  inline int playerfeedlist_size() const;
  inline void clear_playerfeedlist();
  static const int kPlayerFeedListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed& playerfeedlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed* mutable_playerfeedlist(int index);
  inline ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed* add_playerfeedlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed >&
      playerfeedlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed >*
      mutable_playerfeedlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckReSetFeed)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed > playerfeedlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckReSetFeed* default_instance_;
};
// -------------------------------------------------------------------

class OGReqJpStart : public ::google::protobuf::Message {
 public:
  OGReqJpStart();
  virtual ~OGReqJpStart();
  
  OGReqJpStart(const OGReqJpStart& from);
  
  inline OGReqJpStart& operator=(const OGReqJpStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqJpStart& default_instance();
  
  void Swap(OGReqJpStart* other);
  
  // implements Message ----------------------------------------------
  
  OGReqJpStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqJpStart& from);
  void MergeFrom(const OGReqJpStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqJpStart)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqJpStart* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJpStart : public ::google::protobuf::Message {
 public:
  OGAckJpStart();
  virtual ~OGAckJpStart();
  
  OGAckJpStart(const OGAckJpStart& from);
  
  inline OGAckJpStart& operator=(const OGAckJpStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJpStart& default_instance();
  
  void Swap(OGAckJpStart* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJpStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJpStart& from);
  void MergeFrom(const OGAckJpStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string jpStarName = 2;
  inline bool has_jpstarname() const;
  inline void clear_jpstarname();
  static const int kJpStarNameFieldNumber = 2;
  inline const ::std::string& jpstarname() const;
  inline void set_jpstarname(const ::std::string& value);
  inline void set_jpstarname(const char* value);
  inline void set_jpstarname(const char* value, size_t size);
  inline ::std::string* mutable_jpstarname();
  inline ::std::string* release_jpstarname();
  
  // optional int64 jpStarTemNum = 3;
  inline bool has_jpstartemnum() const;
  inline void clear_jpstartemnum();
  static const int kJpStarTemNumFieldNumber = 3;
  inline ::google::protobuf::int64 jpstartemnum() const;
  inline void set_jpstartemnum(::google::protobuf::int64 value);
  
  // optional string jpStarTime = 4;
  inline bool has_jpstartime() const;
  inline void clear_jpstartime();
  static const int kJpStarTimeFieldNumber = 4;
  inline const ::std::string& jpstartime() const;
  inline void set_jpstartime(const ::std::string& value);
  inline void set_jpstartime(const char* value);
  inline void set_jpstartime(const char* value, size_t size);
  inline ::std::string* mutable_jpstartime();
  inline ::std::string* release_jpstartime();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJpStart)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_jpstarname();
  inline void clear_has_jpstarname();
  inline void set_has_jpstartemnum();
  inline void clear_has_jpstartemnum();
  inline void set_has_jpstartime();
  inline void clear_has_jpstartime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::std::string* jpstarname_;
  ::google::protobuf::int64 jpstartemnum_;
  ::std::string* jpstartime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJpStart* default_instance_;
};
// -------------------------------------------------------------------

class OGReqBindPhone : public ::google::protobuf::Message {
 public:
  OGReqBindPhone();
  virtual ~OGReqBindPhone();
  
  OGReqBindPhone(const OGReqBindPhone& from);
  
  inline OGReqBindPhone& operator=(const OGReqBindPhone& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqBindPhone& default_instance();
  
  void Swap(OGReqBindPhone* other);
  
  // implements Message ----------------------------------------------
  
  OGReqBindPhone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqBindPhone& from);
  void MergeFrom(const OGReqBindPhone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqBindPhone)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqBindPhone* default_instance_;
};
// -------------------------------------------------------------------

class OGAckBindPhone : public ::google::protobuf::Message {
 public:
  OGAckBindPhone();
  virtual ~OGAckBindPhone();
  
  OGAckBindPhone(const OGAckBindPhone& from);
  
  inline OGAckBindPhone& operator=(const OGAckBindPhone& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckBindPhone& default_instance();
  
  void Swap(OGAckBindPhone* other);
  
  // implements Message ----------------------------------------------
  
  OGAckBindPhone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckBindPhone& from);
  void MergeFrom(const OGAckBindPhone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckBindPhone)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_phone();
  inline void clear_has_phone();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* phone_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckBindPhone* default_instance_;
};
// -------------------------------------------------------------------

class OGReqGetPhoneCode : public ::google::protobuf::Message {
 public:
  OGReqGetPhoneCode();
  virtual ~OGReqGetPhoneCode();
  
  OGReqGetPhoneCode(const OGReqGetPhoneCode& from);
  
  inline OGReqGetPhoneCode& operator=(const OGReqGetPhoneCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqGetPhoneCode& default_instance();
  
  void Swap(OGReqGetPhoneCode* other);
  
  // implements Message ----------------------------------------------
  
  OGReqGetPhoneCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqGetPhoneCode& from);
  void MergeFrom(const OGReqGetPhoneCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqGetPhoneCode)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* phone_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqGetPhoneCode* default_instance_;
};
// -------------------------------------------------------------------

class OGAckGetPhoneCode : public ::google::protobuf::Message {
 public:
  OGAckGetPhoneCode();
  virtual ~OGAckGetPhoneCode();
  
  OGAckGetPhoneCode(const OGAckGetPhoneCode& from);
  
  inline OGAckGetPhoneCode& operator=(const OGAckGetPhoneCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckGetPhoneCode& default_instance();
  
  void Swap(OGAckGetPhoneCode* other);
  
  // implements Message ----------------------------------------------
  
  OGAckGetPhoneCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckGetPhoneCode& from);
  void MergeFrom(const OGAckGetPhoneCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckGetPhoneCode)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckGetPhoneCode* default_instance_;
};
// -------------------------------------------------------------------

class OGReqGetPhoneAward : public ::google::protobuf::Message {
 public:
  OGReqGetPhoneAward();
  virtual ~OGReqGetPhoneAward();
  
  OGReqGetPhoneAward(const OGReqGetPhoneAward& from);
  
  inline OGReqGetPhoneAward& operator=(const OGReqGetPhoneAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGReqGetPhoneAward& default_instance();
  
  void Swap(OGReqGetPhoneAward* other);
  
  // implements Message ----------------------------------------------
  
  OGReqGetPhoneAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGReqGetPhoneAward& from);
  void MergeFrom(const OGReqGetPhoneAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGReqGetPhoneAward)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGReqGetPhoneAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckGetPhoneAward : public ::google::protobuf::Message {
 public:
  OGAckGetPhoneAward();
  virtual ~OGAckGetPhoneAward();
  
  OGAckGetPhoneAward(const OGAckGetPhoneAward& from);
  
  inline OGAckGetPhoneAward& operator=(const OGAckGetPhoneAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckGetPhoneAward& default_instance();
  
  void Swap(OGAckGetPhoneAward* other);
  
  // implements Message ----------------------------------------------
  
  OGAckGetPhoneAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckGetPhoneAward& from);
  void MergeFrom(const OGAckGetPhoneAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckGetPhoneAward)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_phone();
  inline void clear_has_phone();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::std::string* phone_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckGetPhoneAward* default_instance_;
};
// -------------------------------------------------------------------

class OGAckAddJpNum : public ::google::protobuf::Message {
 public:
  OGAckAddJpNum();
  virtual ~OGAckAddJpNum();
  
  OGAckAddJpNum(const OGAckAddJpNum& from);
  
  inline OGAckAddJpNum& operator=(const OGAckAddJpNum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckAddJpNum& default_instance();
  
  void Swap(OGAckAddJpNum* other);
  
  // implements Message ----------------------------------------------
  
  OGAckAddJpNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckAddJpNum& from);
  void MergeFrom(const OGAckAddJpNum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 addJpNum = 1;
  inline bool has_addjpnum() const;
  inline void clear_addjpnum();
  static const int kAddJpNumFieldNumber = 1;
  inline ::google::protobuf::int64 addjpnum() const;
  inline void set_addjpnum(::google::protobuf::int64 value);
  
  // optional int32 flg = 2;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 2;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckAddJpNum)
 private:
  inline void set_has_addjpnum();
  inline void clear_has_addjpnum();
  inline void set_has_flg();
  inline void clear_has_flg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 addjpnum_;
  ::google::protobuf::int32 flg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckAddJpNum* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJpHall_HallContent : public ::google::protobuf::Message {
 public:
  OGAckJpHall_HallContent();
  virtual ~OGAckJpHall_HallContent();
  
  OGAckJpHall_HallContent(const OGAckJpHall_HallContent& from);
  
  inline OGAckJpHall_HallContent& operator=(const OGAckJpHall_HallContent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJpHall_HallContent& default_instance();
  
  void Swap(OGAckJpHall_HallContent* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJpHall_HallContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJpHall_HallContent& from);
  void MergeFrom(const OGAckJpHall_HallContent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int64 golod = 2;
  inline bool has_golod() const;
  inline void clear_golod();
  static const int kGolodFieldNumber = 2;
  inline ::google::protobuf::int64 golod() const;
  inline void set_golod(::google::protobuf::int64 value);
  
  // optional string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJpHall.HallContent)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_golod();
  inline void clear_has_golod();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 golod_;
  ::std::string* time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJpHall_HallContent* default_instance_;
};
// -------------------------------------------------------------------

class OGAckJpHall : public ::google::protobuf::Message {
 public:
  OGAckJpHall();
  virtual ~OGAckJpHall();
  
  OGAckJpHall(const OGAckJpHall& from);
  
  inline OGAckJpHall& operator=(const OGAckJpHall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckJpHall& default_instance();
  
  void Swap(OGAckJpHall* other);
  
  // implements Message ----------------------------------------------
  
  OGAckJpHall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckJpHall& from);
  void MergeFrom(const OGAckJpHall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef OGAckJpHall_HallContent HallContent;
  
  // accessors -------------------------------------------------------
  
  // repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
  inline int contentlist_size() const;
  inline void clear_contentlist();
  static const int kContentListFieldNumber = 1;
  inline const ::com::ourgame::texasSlots::OGAckJpHall_HallContent& contentlist(int index) const;
  inline ::com::ourgame::texasSlots::OGAckJpHall_HallContent* mutable_contentlist(int index);
  inline ::com::ourgame::texasSlots::OGAckJpHall_HallContent* add_contentlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpHall_HallContent >&
      contentlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpHall_HallContent >*
      mutable_contentlist();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckJpHall)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpHall_HallContent > contentlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckJpHall* default_instance_;
};
// -------------------------------------------------------------------

class OGAckAd : public ::google::protobuf::Message {
 public:
  OGAckAd();
  virtual ~OGAckAd();
  
  OGAckAd(const OGAckAd& from);
  
  inline OGAckAd& operator=(const OGAckAd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckAd& default_instance();
  
  void Swap(OGAckAd* other);
  
  // implements Message ----------------------------------------------
  
  OGAckAd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckAd& from);
  void MergeFrom(const OGAckAd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 on = 1;
  inline bool has_on() const;
  inline void clear_on();
  static const int kOnFieldNumber = 1;
  inline ::google::protobuf::int32 on() const;
  inline void set_on(::google::protobuf::int32 value);
  
  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckAd)
 private:
  inline void set_has_on();
  inline void clear_has_on();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::google::protobuf::int32 on_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckAd* default_instance_;
};
// -------------------------------------------------------------------

class OGAckLeaveGame : public ::google::protobuf::Message {
 public:
  OGAckLeaveGame();
  virtual ~OGAckLeaveGame();
  
  OGAckLeaveGame(const OGAckLeaveGame& from);
  
  inline OGAckLeaveGame& operator=(const OGAckLeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckLeaveGame& default_instance();
  
  void Swap(OGAckLeaveGame* other);
  
  // implements Message ----------------------------------------------
  
  OGAckLeaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckLeaveGame& from);
  void MergeFrom(const OGAckLeaveGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckLeaveGame)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckLeaveGame* default_instance_;
};
// -------------------------------------------------------------------

class OGAckYDFreeTimes : public ::google::protobuf::Message {
 public:
  OGAckYDFreeTimes();
  virtual ~OGAckYDFreeTimes();
  
  OGAckYDFreeTimes(const OGAckYDFreeTimes& from);
  
  inline OGAckYDFreeTimes& operator=(const OGAckYDFreeTimes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OGAckYDFreeTimes& default_instance();
  
  void Swap(OGAckYDFreeTimes* other);
  
  // implements Message ----------------------------------------------
  
  OGAckYDFreeTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OGAckYDFreeTimes& from);
  void MergeFrom(const OGAckYDFreeTimes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.ourgame.texasSlots.OGAckYDFreeTimes)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto();
  friend void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto();
  
  void InitAsDefaultInstance();
  static OGAckYDFreeTimes* default_instance_;
};
// ===================================================================


// ===================================================================

// OGReqTRLogin1

// optional string UserId = 1;
inline bool OGReqTRLogin1::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqTRLogin1::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqTRLogin1::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqTRLogin1::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGReqTRLogin1::userid() const {
  return *userid_;
}
inline void OGReqTRLogin1::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqTRLogin1::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqTRLogin1::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin1::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGReqTRLogin1::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckLinkServer

// required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
inline bool OGAckLinkServer::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckLinkServer::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckLinkServer::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckLinkServer::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult OGAckLinkServer::result() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult >(result_);
}
inline void OGAckLinkServer::set_result(::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
inline bool OGAckLinkServer::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckLinkServer::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckLinkServer::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckLinkServer::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType OGAckLinkServer::reason() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType >(reason_);
}
inline void OGAckLinkServer::set_reason(::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// optional string LinkIp = 3;
inline bool OGAckLinkServer::has_linkip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckLinkServer::set_has_linkip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckLinkServer::clear_has_linkip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckLinkServer::clear_linkip() {
  if (linkip_ != &::google::protobuf::internal::kEmptyString) {
    linkip_->clear();
  }
  clear_has_linkip();
}
inline const ::std::string& OGAckLinkServer::linkip() const {
  return *linkip_;
}
inline void OGAckLinkServer::set_linkip(const ::std::string& value) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(value);
}
inline void OGAckLinkServer::set_linkip(const char* value) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(value);
}
inline void OGAckLinkServer::set_linkip(const char* value, size_t size) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLinkServer::mutable_linkip() {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  return linkip_;
}
inline ::std::string* OGAckLinkServer::release_linkip() {
  clear_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = linkip_;
    linkip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 LinkPort = 4;
inline bool OGAckLinkServer::has_linkport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckLinkServer::set_has_linkport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckLinkServer::clear_has_linkport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckLinkServer::clear_linkport() {
  linkport_ = 0;
  clear_has_linkport();
}
inline ::google::protobuf::int32 OGAckLinkServer::linkport() const {
  return linkport_;
}
inline void OGAckLinkServer::set_linkport(::google::protobuf::int32 value) {
  set_has_linkport();
  linkport_ = value;
}

// -------------------------------------------------------------------

// OGReqTRLogin2

// optional string UserId = 1;
inline bool OGReqTRLogin2::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqTRLogin2::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqTRLogin2::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqTRLogin2::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGReqTRLogin2::userid() const {
  return *userid_;
}
inline void OGReqTRLogin2::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqTRLogin2::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqTRLogin2::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGReqTRLogin2::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Cert = 2;
inline bool OGReqTRLogin2::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqTRLogin2::set_has_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqTRLogin2::clear_has_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqTRLogin2::clear_cert() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& OGReqTRLogin2::cert() const {
  return *cert_;
}
inline void OGReqTRLogin2::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void OGReqTRLogin2::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void OGReqTRLogin2::set_cert(const char* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  return cert_;
}
inline ::std::string* OGReqTRLogin2::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gameId = 3;
inline bool OGReqTRLogin2::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqTRLogin2::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqTRLogin2::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqTRLogin2::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 OGReqTRLogin2::gameid() const {
  return gameid_;
}
inline void OGReqTRLogin2::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 comfromId = 4;
inline bool OGReqTRLogin2::has_comfromid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqTRLogin2::set_has_comfromid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqTRLogin2::clear_has_comfromid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqTRLogin2::clear_comfromid() {
  comfromid_ = 0;
  clear_has_comfromid();
}
inline ::google::protobuf::int32 OGReqTRLogin2::comfromid() const {
  return comfromid_;
}
inline void OGReqTRLogin2::set_comfromid(::google::protobuf::int32 value) {
  set_has_comfromid();
  comfromid_ = value;
}

// optional string userName = 5;
inline bool OGReqTRLogin2::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGReqTRLogin2::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGReqTRLogin2::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGReqTRLogin2::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& OGReqTRLogin2::username() const {
  return *username_;
}
inline void OGReqTRLogin2::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OGReqTRLogin2::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OGReqTRLogin2::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* OGReqTRLogin2::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string nickName = 6;
inline bool OGReqTRLogin2::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGReqTRLogin2::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGReqTRLogin2::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGReqTRLogin2::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& OGReqTRLogin2::nickname() const {
  return *nickname_;
}
inline void OGReqTRLogin2::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OGReqTRLogin2::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OGReqTRLogin2::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* OGReqTRLogin2::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string entrance = 7;
inline bool OGReqTRLogin2::has_entrance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGReqTRLogin2::set_has_entrance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGReqTRLogin2::clear_has_entrance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGReqTRLogin2::clear_entrance() {
  if (entrance_ != &::google::protobuf::internal::kEmptyString) {
    entrance_->clear();
  }
  clear_has_entrance();
}
inline const ::std::string& OGReqTRLogin2::entrance() const {
  return *entrance_;
}
inline void OGReqTRLogin2::set_entrance(const ::std::string& value) {
  set_has_entrance();
  if (entrance_ == &::google::protobuf::internal::kEmptyString) {
    entrance_ = new ::std::string;
  }
  entrance_->assign(value);
}
inline void OGReqTRLogin2::set_entrance(const char* value) {
  set_has_entrance();
  if (entrance_ == &::google::protobuf::internal::kEmptyString) {
    entrance_ = new ::std::string;
  }
  entrance_->assign(value);
}
inline void OGReqTRLogin2::set_entrance(const char* value, size_t size) {
  set_has_entrance();
  if (entrance_ == &::google::protobuf::internal::kEmptyString) {
    entrance_ = new ::std::string;
  }
  entrance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_entrance() {
  set_has_entrance();
  if (entrance_ == &::google::protobuf::internal::kEmptyString) {
    entrance_ = new ::std::string;
  }
  return entrance_;
}
inline ::std::string* OGReqTRLogin2::release_entrance() {
  clear_has_entrance();
  if (entrance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrance_;
    entrance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string come = 8;
inline bool OGReqTRLogin2::has_come() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGReqTRLogin2::set_has_come() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGReqTRLogin2::clear_has_come() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGReqTRLogin2::clear_come() {
  if (come_ != &::google::protobuf::internal::kEmptyString) {
    come_->clear();
  }
  clear_has_come();
}
inline const ::std::string& OGReqTRLogin2::come() const {
  return *come_;
}
inline void OGReqTRLogin2::set_come(const ::std::string& value) {
  set_has_come();
  if (come_ == &::google::protobuf::internal::kEmptyString) {
    come_ = new ::std::string;
  }
  come_->assign(value);
}
inline void OGReqTRLogin2::set_come(const char* value) {
  set_has_come();
  if (come_ == &::google::protobuf::internal::kEmptyString) {
    come_ = new ::std::string;
  }
  come_->assign(value);
}
inline void OGReqTRLogin2::set_come(const char* value, size_t size) {
  set_has_come();
  if (come_ == &::google::protobuf::internal::kEmptyString) {
    come_ = new ::std::string;
  }
  come_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqTRLogin2::mutable_come() {
  set_has_come();
  if (come_ == &::google::protobuf::internal::kEmptyString) {
    come_ = new ::std::string;
  }
  return come_;
}
inline ::std::string* OGReqTRLogin2::release_come() {
  clear_has_come();
  if (come_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = come_;
    come_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckRoleLoginMsg

// required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
inline bool OGAckRoleLoginMsg::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoleLoginMsg::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoleLoginMsg::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg::result() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult >(result_);
}
inline void OGAckRoleLoginMsg::set_result(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
inline bool OGAckRoleLoginMsg::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRoleLoginMsg::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRoleLoginMsg::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::reason() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType >(reason_);
}
inline void OGAckRoleLoginMsg::set_reason(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// optional string userId = 3;
inline bool OGAckRoleLoginMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRoleLoginMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRoleLoginMsg::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGAckRoleLoginMsg::userid() const {
  return *userid_;
}
inline void OGAckRoleLoginMsg::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckRoleLoginMsg::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckRoleLoginMsg::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoleLoginMsg::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGAckRoleLoginMsg::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string roleName = 4;
inline bool OGAckRoleLoginMsg::has_rolename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_rolename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRoleLoginMsg::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRoleLoginMsg::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckRoleLoginMsg::rolename() const {
  return *rolename_;
}
inline void OGAckRoleLoginMsg::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRoleLoginMsg::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRoleLoginMsg::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoleLoginMsg::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckRoleLoginMsg::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 5;
inline bool OGAckRoleLoginMsg::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckRoleLoginMsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckRoleLoginMsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::level() const {
  return level_;
}
inline void OGAckRoleLoginMsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 6;
inline bool OGAckRoleLoginMsg::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckRoleLoginMsg::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckRoleLoginMsg::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::exp() const {
  return exp_;
}
inline void OGAckRoleLoginMsg::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 gold = 7;
inline bool OGAckRoleLoginMsg::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckRoleLoginMsg::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckRoleLoginMsg::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckRoleLoginMsg::gold() const {
  return gold_;
}
inline void OGAckRoleLoginMsg::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 reqExp = 8;
inline bool OGAckRoleLoginMsg::has_reqexp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_reqexp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckRoleLoginMsg::clear_has_reqexp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckRoleLoginMsg::clear_reqexp() {
  reqexp_ = 0;
  clear_has_reqexp();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::reqexp() const {
  return reqexp_;
}
inline void OGAckRoleLoginMsg::set_reqexp(::google::protobuf::int32 value) {
  set_has_reqexp();
  reqexp_ = value;
}

// optional string pic = 9;
inline bool OGAckRoleLoginMsg::has_pic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_pic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckRoleLoginMsg::clear_has_pic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckRoleLoginMsg::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckRoleLoginMsg::pic() const {
  return *pic_;
}
inline void OGAckRoleLoginMsg::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckRoleLoginMsg::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckRoleLoginMsg::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoleLoginMsg::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckRoleLoginMsg::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gridNum = 10;
inline bool OGAckRoleLoginMsg::has_gridnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_gridnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckRoleLoginMsg::clear_has_gridnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckRoleLoginMsg::clear_gridnum() {
  gridnum_ = 0;
  clear_has_gridnum();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::gridnum() const {
  return gridnum_;
}
inline void OGAckRoleLoginMsg::set_gridnum(::google::protobuf::int32 value) {
  set_has_gridnum();
  gridnum_ = value;
}

// optional bool newHand = 11;
inline bool OGAckRoleLoginMsg::has_newhand() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_newhand() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckRoleLoginMsg::clear_has_newhand() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckRoleLoginMsg::clear_newhand() {
  newhand_ = false;
  clear_has_newhand();
}
inline bool OGAckRoleLoginMsg::newhand() const {
  return newhand_;
}
inline void OGAckRoleLoginMsg::set_newhand(bool value) {
  set_has_newhand();
  newhand_ = value;
}

// optional int32 mailNum = 12;
inline bool OGAckRoleLoginMsg::has_mailnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_mailnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckRoleLoginMsg::clear_has_mailnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckRoleLoginMsg::clear_mailnum() {
  mailnum_ = 0;
  clear_has_mailnum();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::mailnum() const {
  return mailnum_;
}
inline void OGAckRoleLoginMsg::set_mailnum(::google::protobuf::int32 value) {
  set_has_mailnum();
  mailnum_ = value;
}

// optional bool newHandAward = 13;
inline bool OGAckRoleLoginMsg::has_newhandaward() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_newhandaward() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckRoleLoginMsg::clear_has_newhandaward() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckRoleLoginMsg::clear_newhandaward() {
  newhandaward_ = false;
  clear_has_newhandaward();
}
inline bool OGAckRoleLoginMsg::newhandaward() const {
  return newhandaward_;
}
inline void OGAckRoleLoginMsg::set_newhandaward(bool value) {
  set_has_newhandaward();
  newhandaward_ = value;
}

// optional int32 petFightAward = 14;
inline bool OGAckRoleLoginMsg::has_petfightaward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_petfightaward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckRoleLoginMsg::clear_has_petfightaward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckRoleLoginMsg::clear_petfightaward() {
  petfightaward_ = 0;
  clear_has_petfightaward();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::petfightaward() const {
  return petfightaward_;
}
inline void OGAckRoleLoginMsg::set_petfightaward(::google::protobuf::int32 value) {
  set_has_petfightaward();
  petfightaward_ = value;
}

// optional int32 freeNum = 15;
inline bool OGAckRoleLoginMsg::has_freenum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_freenum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OGAckRoleLoginMsg::clear_has_freenum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OGAckRoleLoginMsg::clear_freenum() {
  freenum_ = 0;
  clear_has_freenum();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::freenum() const {
  return freenum_;
}
inline void OGAckRoleLoginMsg::set_freenum(::google::protobuf::int32 value) {
  set_has_freenum();
  freenum_ = value;
}

// optional int32 loginnum = 16;
inline bool OGAckRoleLoginMsg::has_loginnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_loginnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OGAckRoleLoginMsg::clear_has_loginnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OGAckRoleLoginMsg::clear_loginnum() {
  loginnum_ = 0;
  clear_has_loginnum();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::loginnum() const {
  return loginnum_;
}
inline void OGAckRoleLoginMsg::set_loginnum(::google::protobuf::int32 value) {
  set_has_loginnum();
  loginnum_ = value;
}

// optional int32 loginawardnum = 17;
inline bool OGAckRoleLoginMsg::has_loginawardnum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_loginawardnum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OGAckRoleLoginMsg::clear_has_loginawardnum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OGAckRoleLoginMsg::clear_loginawardnum() {
  loginawardnum_ = 0;
  clear_has_loginawardnum();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::loginawardnum() const {
  return loginawardnum_;
}
inline void OGAckRoleLoginMsg::set_loginawardnum(::google::protobuf::int32 value) {
  set_has_loginawardnum();
  loginawardnum_ = value;
}

// optional int32 comeFromId = 18;
inline bool OGAckRoleLoginMsg::has_comefromid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_comefromid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OGAckRoleLoginMsg::clear_has_comefromid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OGAckRoleLoginMsg::clear_comefromid() {
  comefromid_ = 0;
  clear_has_comefromid();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::comefromid() const {
  return comefromid_;
}
inline void OGAckRoleLoginMsg::set_comefromid(::google::protobuf::int32 value) {
  set_has_comefromid();
  comefromid_ = value;
}

// optional string topRankTip = 19;
inline bool OGAckRoleLoginMsg::has_topranktip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_topranktip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OGAckRoleLoginMsg::clear_has_topranktip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OGAckRoleLoginMsg::clear_topranktip() {
  if (topranktip_ != &::google::protobuf::internal::kEmptyString) {
    topranktip_->clear();
  }
  clear_has_topranktip();
}
inline const ::std::string& OGAckRoleLoginMsg::topranktip() const {
  return *topranktip_;
}
inline void OGAckRoleLoginMsg::set_topranktip(const ::std::string& value) {
  set_has_topranktip();
  if (topranktip_ == &::google::protobuf::internal::kEmptyString) {
    topranktip_ = new ::std::string;
  }
  topranktip_->assign(value);
}
inline void OGAckRoleLoginMsg::set_topranktip(const char* value) {
  set_has_topranktip();
  if (topranktip_ == &::google::protobuf::internal::kEmptyString) {
    topranktip_ = new ::std::string;
  }
  topranktip_->assign(value);
}
inline void OGAckRoleLoginMsg::set_topranktip(const char* value, size_t size) {
  set_has_topranktip();
  if (topranktip_ == &::google::protobuf::internal::kEmptyString) {
    topranktip_ = new ::std::string;
  }
  topranktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoleLoginMsg::mutable_topranktip() {
  set_has_topranktip();
  if (topranktip_ == &::google::protobuf::internal::kEmptyString) {
    topranktip_ = new ::std::string;
  }
  return topranktip_;
}
inline ::std::string* OGAckRoleLoginMsg::release_topranktip() {
  clear_has_topranktip();
  if (topranktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topranktip_;
    topranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 doubleUse = 20;
inline bool OGAckRoleLoginMsg::has_doubleuse() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_doubleuse() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OGAckRoleLoginMsg::clear_has_doubleuse() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OGAckRoleLoginMsg::clear_doubleuse() {
  doubleuse_ = GOOGLE_LONGLONG(0);
  clear_has_doubleuse();
}
inline ::google::protobuf::int64 OGAckRoleLoginMsg::doubleuse() const {
  return doubleuse_;
}
inline void OGAckRoleLoginMsg::set_doubleuse(::google::protobuf::int64 value) {
  set_has_doubleuse();
  doubleuse_ = value;
}

// optional int32 feed = 21;
inline bool OGAckRoleLoginMsg::has_feed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_feed() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OGAckRoleLoginMsg::clear_has_feed() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OGAckRoleLoginMsg::clear_feed() {
  feed_ = 0;
  clear_has_feed();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::feed() const {
  return feed_;
}
inline void OGAckRoleLoginMsg::set_feed(::google::protobuf::int32 value) {
  set_has_feed();
  feed_ = value;
}

// optional int32 fondle = 22;
inline bool OGAckRoleLoginMsg::has_fondle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_fondle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OGAckRoleLoginMsg::clear_has_fondle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OGAckRoleLoginMsg::clear_fondle() {
  fondle_ = 0;
  clear_has_fondle();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::fondle() const {
  return fondle_;
}
inline void OGAckRoleLoginMsg::set_fondle(::google::protobuf::int32 value) {
  set_has_fondle();
  fondle_ = value;
}

// optional int32 fourTimesOn = 23;
inline bool OGAckRoleLoginMsg::has_fourtimeson() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_fourtimeson() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OGAckRoleLoginMsg::clear_has_fourtimeson() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OGAckRoleLoginMsg::clear_fourtimeson() {
  fourtimeson_ = 0;
  clear_has_fourtimeson();
}
inline ::google::protobuf::int32 OGAckRoleLoginMsg::fourtimeson() const {
  return fourtimeson_;
}
inline void OGAckRoleLoginMsg::set_fourtimeson(::google::protobuf::int32 value) {
  set_has_fourtimeson();
  fourtimeson_ = value;
}

// optional int64 newGold = 24;
inline bool OGAckRoleLoginMsg::has_newgold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_newgold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OGAckRoleLoginMsg::clear_has_newgold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OGAckRoleLoginMsg::clear_newgold() {
  newgold_ = GOOGLE_LONGLONG(0);
  clear_has_newgold();
}
inline ::google::protobuf::int64 OGAckRoleLoginMsg::newgold() const {
  return newgold_;
}
inline void OGAckRoleLoginMsg::set_newgold(::google::protobuf::int64 value) {
  set_has_newgold();
  newgold_ = value;
}

// optional string content = 25;
inline bool OGAckRoleLoginMsg::has_content() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OGAckRoleLoginMsg::set_has_content() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OGAckRoleLoginMsg::clear_has_content() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OGAckRoleLoginMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckRoleLoginMsg::content() const {
  return *content_;
}
inline void OGAckRoleLoginMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckRoleLoginMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckRoleLoginMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoleLoginMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckRoleLoginMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckRoleMsg

// optional int32 level = 1;
inline bool OGAckRoleMsg::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoleMsg::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoleMsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoleMsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OGAckRoleMsg::level() const {
  return level_;
}
inline void OGAckRoleMsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 2;
inline bool OGAckRoleMsg::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRoleMsg::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRoleMsg::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRoleMsg::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 OGAckRoleMsg::exp() const {
  return exp_;
}
inline void OGAckRoleMsg::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 gold = 3;
inline bool OGAckRoleMsg::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRoleMsg::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRoleMsg::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRoleMsg::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckRoleMsg::gold() const {
  return gold_;
}
inline void OGAckRoleMsg::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 reqExp = 4;
inline bool OGAckRoleMsg::has_reqexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRoleMsg::set_has_reqexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRoleMsg::clear_has_reqexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRoleMsg::clear_reqexp() {
  reqexp_ = 0;
  clear_has_reqexp();
}
inline ::google::protobuf::int32 OGAckRoleMsg::reqexp() const {
  return reqexp_;
}
inline void OGAckRoleMsg::set_reqexp(::google::protobuf::int32 value) {
  set_has_reqexp();
  reqexp_ = value;
}

// optional int32 gridNum = 5;
inline bool OGAckRoleMsg::has_gridnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckRoleMsg::set_has_gridnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckRoleMsg::clear_has_gridnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckRoleMsg::clear_gridnum() {
  gridnum_ = 0;
  clear_has_gridnum();
}
inline ::google::protobuf::int32 OGAckRoleMsg::gridnum() const {
  return gridnum_;
}
inline void OGAckRoleMsg::set_gridnum(::google::protobuf::int32 value) {
  set_has_gridnum();
  gridnum_ = value;
}

// optional int32 freeNum = 6;
inline bool OGAckRoleMsg::has_freenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckRoleMsg::set_has_freenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckRoleMsg::clear_has_freenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckRoleMsg::clear_freenum() {
  freenum_ = 0;
  clear_has_freenum();
}
inline ::google::protobuf::int32 OGAckRoleMsg::freenum() const {
  return freenum_;
}
inline void OGAckRoleMsg::set_freenum(::google::protobuf::int32 value) {
  set_has_freenum();
  freenum_ = value;
}

// optional int32 loginawardnum = 7;
inline bool OGAckRoleMsg::has_loginawardnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckRoleMsg::set_has_loginawardnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckRoleMsg::clear_has_loginawardnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckRoleMsg::clear_loginawardnum() {
  loginawardnum_ = 0;
  clear_has_loginawardnum();
}
inline ::google::protobuf::int32 OGAckRoleMsg::loginawardnum() const {
  return loginawardnum_;
}
inline void OGAckRoleMsg::set_loginawardnum(::google::protobuf::int32 value) {
  set_has_loginawardnum();
  loginawardnum_ = value;
}

// optional int32 feed = 8;
inline bool OGAckRoleMsg::has_feed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckRoleMsg::set_has_feed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckRoleMsg::clear_has_feed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckRoleMsg::clear_feed() {
  feed_ = 0;
  clear_has_feed();
}
inline ::google::protobuf::int32 OGAckRoleMsg::feed() const {
  return feed_;
}
inline void OGAckRoleMsg::set_feed(::google::protobuf::int32 value) {
  set_has_feed();
  feed_ = value;
}

// optional int32 fondle = 9;
inline bool OGAckRoleMsg::has_fondle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckRoleMsg::set_has_fondle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckRoleMsg::clear_has_fondle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckRoleMsg::clear_fondle() {
  fondle_ = 0;
  clear_has_fondle();
}
inline ::google::protobuf::int32 OGAckRoleMsg::fondle() const {
  return fondle_;
}
inline void OGAckRoleMsg::set_fondle(::google::protobuf::int32 value) {
  set_has_fondle();
  fondle_ = value;
}

// optional int64 newGold = 10;
inline bool OGAckRoleMsg::has_newgold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckRoleMsg::set_has_newgold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckRoleMsg::clear_has_newgold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckRoleMsg::clear_newgold() {
  newgold_ = GOOGLE_LONGLONG(0);
  clear_has_newgold();
}
inline ::google::protobuf::int64 OGAckRoleMsg::newgold() const {
  return newgold_;
}
inline void OGAckRoleMsg::set_newgold(::google::protobuf::int64 value) {
  set_has_newgold();
  newgold_ = value;
}

// -------------------------------------------------------------------

// OGAckPetUpdatedMsg

// optional int32 petId = 1;
inline bool OGAckPetUpdatedMsg::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetUpdatedMsg::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetUpdatedMsg::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::petid() const {
  return petid_;
}
inline void OGAckPetUpdatedMsg::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 bloodPlus = 2;
inline bool OGAckPetUpdatedMsg::has_bloodplus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_bloodplus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetUpdatedMsg::clear_has_bloodplus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetUpdatedMsg::clear_bloodplus() {
  bloodplus_ = 0;
  clear_has_bloodplus();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::bloodplus() const {
  return bloodplus_;
}
inline void OGAckPetUpdatedMsg::set_bloodplus(::google::protobuf::int32 value) {
  set_has_bloodplus();
  bloodplus_ = value;
}

// optional int32 attackPlus = 3;
inline bool OGAckPetUpdatedMsg::has_attackplus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_attackplus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetUpdatedMsg::clear_has_attackplus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetUpdatedMsg::clear_attackplus() {
  attackplus_ = 0;
  clear_has_attackplus();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::attackplus() const {
  return attackplus_;
}
inline void OGAckPetUpdatedMsg::set_attackplus(::google::protobuf::int32 value) {
  set_has_attackplus();
  attackplus_ = value;
}

// optional int32 awardPlus = 4;
inline bool OGAckPetUpdatedMsg::has_awardplus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_awardplus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetUpdatedMsg::clear_has_awardplus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetUpdatedMsg::clear_awardplus() {
  awardplus_ = 0;
  clear_has_awardplus();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::awardplus() const {
  return awardplus_;
}
inline void OGAckPetUpdatedMsg::set_awardplus(::google::protobuf::int32 value) {
  set_has_awardplus();
  awardplus_ = value;
}

// optional int32 level = 5;
inline bool OGAckPetUpdatedMsg::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPetUpdatedMsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPetUpdatedMsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::level() const {
  return level_;
}
inline void OGAckPetUpdatedMsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 6;
inline bool OGAckPetUpdatedMsg::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckPetUpdatedMsg::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckPetUpdatedMsg::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::exp() const {
  return exp_;
}
inline void OGAckPetUpdatedMsg::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 reqexp = 7;
inline bool OGAckPetUpdatedMsg::has_reqexp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_reqexp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckPetUpdatedMsg::clear_has_reqexp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckPetUpdatedMsg::clear_reqexp() {
  reqexp_ = 0;
  clear_has_reqexp();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::reqexp() const {
  return reqexp_;
}
inline void OGAckPetUpdatedMsg::set_reqexp(::google::protobuf::int32 value) {
  set_has_reqexp();
  reqexp_ = value;
}

// optional int32 flg = 8;
inline bool OGAckPetUpdatedMsg::has_flg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckPetUpdatedMsg::set_has_flg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckPetUpdatedMsg::clear_has_flg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckPetUpdatedMsg::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGAckPetUpdatedMsg::flg() const {
  return flg_;
}
inline void OGAckPetUpdatedMsg::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// -------------------------------------------------------------------

// OGAckGameServer

// optional int32 client_port = 1;
inline bool OGAckGameServer::has_client_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckGameServer::set_has_client_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckGameServer::clear_has_client_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckGameServer::clear_client_port() {
  client_port_ = 0;
  clear_has_client_port();
}
inline ::google::protobuf::int32 OGAckGameServer::client_port() const {
  return client_port_;
}
inline void OGAckGameServer::set_client_port(::google::protobuf::int32 value) {
  set_has_client_port();
  client_port_ = value;
}

// optional string LinkIp = 2;
inline bool OGAckGameServer::has_linkip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckGameServer::set_has_linkip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckGameServer::clear_has_linkip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckGameServer::clear_linkip() {
  if (linkip_ != &::google::protobuf::internal::kEmptyString) {
    linkip_->clear();
  }
  clear_has_linkip();
}
inline const ::std::string& OGAckGameServer::linkip() const {
  return *linkip_;
}
inline void OGAckGameServer::set_linkip(const ::std::string& value) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(value);
}
inline void OGAckGameServer::set_linkip(const char* value) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(value);
}
inline void OGAckGameServer::set_linkip(const char* value, size_t size) {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  linkip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGameServer::mutable_linkip() {
  set_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    linkip_ = new ::std::string;
  }
  return linkip_;
}
inline ::std::string* OGAckGameServer::release_linkip() {
  clear_has_linkip();
  if (linkip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = linkip_;
    linkip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 LinkPort = 3;
inline bool OGAckGameServer::has_linkport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckGameServer::set_has_linkport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckGameServer::clear_has_linkport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckGameServer::clear_linkport() {
  linkport_ = 0;
  clear_has_linkport();
}
inline ::google::protobuf::int32 OGAckGameServer::linkport() const {
  return linkport_;
}
inline void OGAckGameServer::set_linkport(::google::protobuf::int32 value) {
  set_has_linkport();
  linkport_ = value;
}

// optional string gameId = 4;
inline bool OGAckGameServer::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckGameServer::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckGameServer::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckGameServer::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& OGAckGameServer::gameid() const {
  return *gameid_;
}
inline void OGAckGameServer::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void OGAckGameServer::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void OGAckGameServer::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGameServer::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* OGAckGameServer::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckRoomList_Room

// optional int32 roomId = 1;
inline bool OGAckRoomList_Room::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoomList_Room::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoomList_Room::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 OGAckRoomList_Room::roomid() const {
  return roomid_;
}
inline void OGAckRoomList_Room::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string roomName = 2;
inline bool OGAckRoomList_Room::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRoomList_Room::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRoomList_Room::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& OGAckRoomList_Room::roomname() const {
  return *roomname_;
}
inline void OGAckRoomList_Room::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void OGAckRoomList_Room::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void OGAckRoomList_Room::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoomList_Room::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* OGAckRoomList_Room::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 roomLevel = 3;
inline bool OGAckRoomList_Room::has_roomlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRoomList_Room::clear_has_roomlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRoomList_Room::clear_roomlevel() {
  roomlevel_ = 0;
  clear_has_roomlevel();
}
inline ::google::protobuf::int32 OGAckRoomList_Room::roomlevel() const {
  return roomlevel_;
}
inline void OGAckRoomList_Room::set_roomlevel(::google::protobuf::int32 value) {
  set_has_roomlevel();
  roomlevel_ = value;
}

// optional int64 roomGold = 4;
inline bool OGAckRoomList_Room::has_roomgold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomgold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRoomList_Room::clear_has_roomgold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRoomList_Room::clear_roomgold() {
  roomgold_ = GOOGLE_LONGLONG(0);
  clear_has_roomgold();
}
inline ::google::protobuf::int64 OGAckRoomList_Room::roomgold() const {
  return roomgold_;
}
inline void OGAckRoomList_Room::set_roomgold(::google::protobuf::int64 value) {
  set_has_roomgold();
  roomgold_ = value;
}

// optional string roomTip = 5;
inline bool OGAckRoomList_Room::has_roomtip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomtip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckRoomList_Room::clear_has_roomtip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckRoomList_Room::clear_roomtip() {
  if (roomtip_ != &::google::protobuf::internal::kEmptyString) {
    roomtip_->clear();
  }
  clear_has_roomtip();
}
inline const ::std::string& OGAckRoomList_Room::roomtip() const {
  return *roomtip_;
}
inline void OGAckRoomList_Room::set_roomtip(const ::std::string& value) {
  set_has_roomtip();
  if (roomtip_ == &::google::protobuf::internal::kEmptyString) {
    roomtip_ = new ::std::string;
  }
  roomtip_->assign(value);
}
inline void OGAckRoomList_Room::set_roomtip(const char* value) {
  set_has_roomtip();
  if (roomtip_ == &::google::protobuf::internal::kEmptyString) {
    roomtip_ = new ::std::string;
  }
  roomtip_->assign(value);
}
inline void OGAckRoomList_Room::set_roomtip(const char* value, size_t size) {
  set_has_roomtip();
  if (roomtip_ == &::google::protobuf::internal::kEmptyString) {
    roomtip_ = new ::std::string;
  }
  roomtip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoomList_Room::mutable_roomtip() {
  set_has_roomtip();
  if (roomtip_ == &::google::protobuf::internal::kEmptyString) {
    roomtip_ = new ::std::string;
  }
  return roomtip_;
}
inline ::std::string* OGAckRoomList_Room::release_roomtip() {
  clear_has_roomtip();
  if (roomtip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomtip_;
    roomtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 roomOn = 6;
inline bool OGAckRoomList_Room::has_roomon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckRoomList_Room::set_has_roomon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckRoomList_Room::clear_has_roomon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckRoomList_Room::clear_roomon() {
  roomon_ = 0;
  clear_has_roomon();
}
inline ::google::protobuf::int32 OGAckRoomList_Room::roomon() const {
  return roomon_;
}
inline void OGAckRoomList_Room::set_roomon(::google::protobuf::int32 value) {
  set_has_roomon();
  roomon_ = value;
}

// -------------------------------------------------------------------

// OGAckRoomList

// repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
inline int OGAckRoomList::roomlist_size() const {
  return roomlist_.size();
}
inline void OGAckRoomList::clear_roomlist() {
  roomlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRoomList_Room& OGAckRoomList::roomlist(int index) const {
  return roomlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRoomList_Room* OGAckRoomList::mutable_roomlist(int index) {
  return roomlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRoomList_Room* OGAckRoomList::add_roomlist() {
  return roomlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoomList_Room >&
OGAckRoomList::roomlist() const {
  return roomlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoomList_Room >*
OGAckRoomList::mutable_roomlist() {
  return &roomlist_;
}

// -------------------------------------------------------------------

// OGReqJoinRoom

// optional int32 roomId = 1;
inline bool OGReqJoinRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqJoinRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqJoinRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqJoinRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 OGReqJoinRoom::roomid() const {
  return roomid_;
}
inline void OGReqJoinRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// OGAckRoom_RoomBet

// optional int64 min = 1;
inline bool OGAckRoom_RoomBet::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoom_RoomBet::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoom_RoomBet::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoom_RoomBet::clear_min() {
  min_ = GOOGLE_LONGLONG(0);
  clear_has_min();
}
inline ::google::protobuf::int64 OGAckRoom_RoomBet::min() const {
  return min_;
}
inline void OGAckRoom_RoomBet::set_min(::google::protobuf::int64 value) {
  set_has_min();
  min_ = value;
}

// optional int64 max = 2;
inline bool OGAckRoom_RoomBet::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRoom_RoomBet::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRoom_RoomBet::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRoom_RoomBet::clear_max() {
  max_ = GOOGLE_LONGLONG(0);
  clear_has_max();
}
inline ::google::protobuf::int64 OGAckRoom_RoomBet::max() const {
  return max_;
}
inline void OGAckRoom_RoomBet::set_max(::google::protobuf::int64 value) {
  set_has_max();
  max_ = value;
}

// optional int32 bet = 3;
inline bool OGAckRoom_RoomBet::has_bet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRoom_RoomBet::set_has_bet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRoom_RoomBet::clear_has_bet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRoom_RoomBet::clear_bet() {
  bet_ = 0;
  clear_has_bet();
}
inline ::google::protobuf::int32 OGAckRoom_RoomBet::bet() const {
  return bet_;
}
inline void OGAckRoom_RoomBet::set_bet(::google::protobuf::int32 value) {
  set_has_bet();
  bet_ = value;
}

// -------------------------------------------------------------------

// OGAckRoom

// required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
inline bool OGAckRoom::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoom::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoom::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoom::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::ourgame::texasSlots::OGAckRoom_E_TRResult OGAckRoom::result() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckRoom_E_TRResult >(result_);
}
inline void OGAckRoom::set_result(::com::ourgame::texasSlots::OGAckRoom_E_TRResult value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckRoom_E_TRResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
inline bool OGAckRoom::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRoom::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRoom::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRoom::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType OGAckRoom::reason() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType >(reason_);
}
inline void OGAckRoom::set_reason(::com::ourgame::texasSlots::OGAckRoom_E_ErrorType value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckRoom_E_ErrorType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// optional int32 roomId = 3;
inline bool OGAckRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 OGAckRoom::roomid() const {
  return roomid_;
}
inline void OGAckRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string roomName = 4;
inline bool OGAckRoom::has_roomname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRoom::set_has_roomname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRoom::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRoom::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& OGAckRoom::roomname() const {
  return *roomname_;
}
inline void OGAckRoom::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void OGAckRoom::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void OGAckRoom::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRoom::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* OGAckRoom::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 roomMaxLine = 5;
inline bool OGAckRoom::has_roommaxline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckRoom::set_has_roommaxline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckRoom::clear_has_roommaxline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckRoom::clear_roommaxline() {
  roommaxline_ = 0;
  clear_has_roommaxline();
}
inline ::google::protobuf::int32 OGAckRoom::roommaxline() const {
  return roommaxline_;
}
inline void OGAckRoom::set_roommaxline(::google::protobuf::int32 value) {
  set_has_roommaxline();
  roommaxline_ = value;
}

// optional int32 roomMaxTimes = 6;
inline bool OGAckRoom::has_roommaxtimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckRoom::set_has_roommaxtimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckRoom::clear_has_roommaxtimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckRoom::clear_roommaxtimes() {
  roommaxtimes_ = 0;
  clear_has_roommaxtimes();
}
inline ::google::protobuf::int32 OGAckRoom::roommaxtimes() const {
  return roommaxtimes_;
}
inline void OGAckRoom::set_roommaxtimes(::google::protobuf::int32 value) {
  set_has_roommaxtimes();
  roommaxtimes_ = value;
}

// optional int64 roomBaseGold = 7;
inline bool OGAckRoom::has_roombasegold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckRoom::set_has_roombasegold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckRoom::clear_has_roombasegold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckRoom::clear_roombasegold() {
  roombasegold_ = GOOGLE_LONGLONG(0);
  clear_has_roombasegold();
}
inline ::google::protobuf::int64 OGAckRoom::roombasegold() const {
  return roombasegold_;
}
inline void OGAckRoom::set_roombasegold(::google::protobuf::int64 value) {
  set_has_roombasegold();
  roombasegold_ = value;
}

// optional int32 roomPic = 8;
inline bool OGAckRoom::has_roompic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckRoom::set_has_roompic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckRoom::clear_has_roompic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckRoom::clear_roompic() {
  roompic_ = 0;
  clear_has_roompic();
}
inline ::google::protobuf::int32 OGAckRoom::roompic() const {
  return roompic_;
}
inline void OGAckRoom::set_roompic(::google::protobuf::int32 value) {
  set_has_roompic();
  roompic_ = value;
}

// optional int32 roomDoubleOn = 9;
inline bool OGAckRoom::has_roomdoubleon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckRoom::set_has_roomdoubleon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckRoom::clear_has_roomdoubleon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckRoom::clear_roomdoubleon() {
  roomdoubleon_ = 0;
  clear_has_roomdoubleon();
}
inline ::google::protobuf::int32 OGAckRoom::roomdoubleon() const {
  return roomdoubleon_;
}
inline void OGAckRoom::set_roomdoubleon(::google::protobuf::int32 value) {
  set_has_roomdoubleon();
  roomdoubleon_ = value;
}

// optional int32 freeOn = 10;
inline bool OGAckRoom::has_freeon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckRoom::set_has_freeon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckRoom::clear_has_freeon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckRoom::clear_freeon() {
  freeon_ = 0;
  clear_has_freeon();
}
inline ::google::protobuf::int32 OGAckRoom::freeon() const {
  return freeon_;
}
inline void OGAckRoom::set_freeon(::google::protobuf::int32 value) {
  set_has_freeon();
  freeon_ = value;
}

// optional int32 fourTimesOn = 11;
inline bool OGAckRoom::has_fourtimeson() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckRoom::set_has_fourtimeson() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckRoom::clear_has_fourtimeson() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckRoom::clear_fourtimeson() {
  fourtimeson_ = 0;
  clear_has_fourtimeson();
}
inline ::google::protobuf::int32 OGAckRoom::fourtimeson() const {
  return fourtimeson_;
}
inline void OGAckRoom::set_fourtimeson(::google::protobuf::int32 value) {
  set_has_fourtimeson();
  fourtimeson_ = value;
}

// repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
inline int OGAckRoom::betlist_size() const {
  return betlist_.size();
}
inline void OGAckRoom::clear_betlist() {
  betlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRoom_RoomBet& OGAckRoom::betlist(int index) const {
  return betlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRoom_RoomBet* OGAckRoom::mutable_betlist(int index) {
  return betlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRoom_RoomBet* OGAckRoom::add_betlist() {
  return betlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoom_RoomBet >&
OGAckRoom::betlist() const {
  return betlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRoom_RoomBet >*
OGAckRoom::mutable_betlist() {
  return &betlist_;
}

// -------------------------------------------------------------------

// OGAckBoss

// optional int32 bossId = 1;
inline bool OGAckBoss::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckBoss::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckBoss::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckBoss::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 OGAckBoss::bossid() const {
  return bossid_;
}
inline void OGAckBoss::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int64 bossNeedGold = 2;
inline bool OGAckBoss::has_bossneedgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckBoss::set_has_bossneedgold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckBoss::clear_has_bossneedgold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckBoss::clear_bossneedgold() {
  bossneedgold_ = GOOGLE_LONGLONG(0);
  clear_has_bossneedgold();
}
inline ::google::protobuf::int64 OGAckBoss::bossneedgold() const {
  return bossneedgold_;
}
inline void OGAckBoss::set_bossneedgold(::google::protobuf::int64 value) {
  set_has_bossneedgold();
  bossneedgold_ = value;
}

// optional int32 roomPic = 3;
inline bool OGAckBoss::has_roompic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckBoss::set_has_roompic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckBoss::clear_has_roompic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckBoss::clear_roompic() {
  roompic_ = 0;
  clear_has_roompic();
}
inline ::google::protobuf::int32 OGAckBoss::roompic() const {
  return roompic_;
}
inline void OGAckBoss::set_roompic(::google::protobuf::int32 value) {
  set_has_roompic();
  roompic_ = value;
}

// optional int32 bossPic = 4;
inline bool OGAckBoss::has_bosspic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckBoss::set_has_bosspic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckBoss::clear_has_bosspic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckBoss::clear_bosspic() {
  bosspic_ = 0;
  clear_has_bosspic();
}
inline ::google::protobuf::int32 OGAckBoss::bosspic() const {
  return bosspic_;
}
inline void OGAckBoss::set_bosspic(::google::protobuf::int32 value) {
  set_has_bosspic();
  bosspic_ = value;
}

// optional int64 petCurrGold = 5;
inline bool OGAckBoss::has_petcurrgold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckBoss::set_has_petcurrgold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckBoss::clear_has_petcurrgold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckBoss::clear_petcurrgold() {
  petcurrgold_ = GOOGLE_LONGLONG(0);
  clear_has_petcurrgold();
}
inline ::google::protobuf::int64 OGAckBoss::petcurrgold() const {
  return petcurrgold_;
}
inline void OGAckBoss::set_petcurrgold(::google::protobuf::int64 value) {
  set_has_petcurrgold();
  petcurrgold_ = value;
}

// optional int32 freeNum = 6;
inline bool OGAckBoss::has_freenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckBoss::set_has_freenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckBoss::clear_has_freenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckBoss::clear_freenum() {
  freenum_ = 0;
  clear_has_freenum();
}
inline ::google::protobuf::int32 OGAckBoss::freenum() const {
  return freenum_;
}
inline void OGAckBoss::set_freenum(::google::protobuf::int32 value) {
  set_has_freenum();
  freenum_ = value;
}

// optional int64 needGold = 7;
inline bool OGAckBoss::has_needgold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckBoss::set_has_needgold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckBoss::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckBoss::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 OGAckBoss::needgold() const {
  return needgold_;
}
inline void OGAckBoss::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// optional int32 bossBlood = 8;
inline bool OGAckBoss::has_bossblood() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckBoss::set_has_bossblood() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckBoss::clear_has_bossblood() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckBoss::clear_bossblood() {
  bossblood_ = 0;
  clear_has_bossblood();
}
inline ::google::protobuf::int32 OGAckBoss::bossblood() const {
  return bossblood_;
}
inline void OGAckBoss::set_bossblood(::google::protobuf::int32 value) {
  set_has_bossblood();
  bossblood_ = value;
}

// optional int32 bossBloodMax = 9;
inline bool OGAckBoss::has_bossbloodmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckBoss::set_has_bossbloodmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckBoss::clear_has_bossbloodmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckBoss::clear_bossbloodmax() {
  bossbloodmax_ = 0;
  clear_has_bossbloodmax();
}
inline ::google::protobuf::int32 OGAckBoss::bossbloodmax() const {
  return bossbloodmax_;
}
inline void OGAckBoss::set_bossbloodmax(::google::protobuf::int32 value) {
  set_has_bossbloodmax();
  bossbloodmax_ = value;
}

// -------------------------------------------------------------------

// OGReqExitType

// required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
inline bool OGReqExitType::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqExitType::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqExitType::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqExitType::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::com::ourgame::texasSlots::OGReqExitType_E_MsgType OGReqExitType::msgtype() const {
  return static_cast< ::com::ourgame::texasSlots::OGReqExitType_E_MsgType >(msgtype_);
}
inline void OGReqExitType::set_msgtype(::com::ourgame::texasSlots::OGReqExitType_E_MsgType value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGReqExitType_E_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// optional int32 result = 2;
inline bool OGReqExitType::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqExitType::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqExitType::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqExitType::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGReqExitType::result() const {
  return result_;
}
inline void OGReqExitType::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// OGAckExit

// required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
inline bool OGAckExit::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckExit::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckExit::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckExit::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::com::ourgame::texasSlots::OGAckExit_E_MsgType OGAckExit::msgtype() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckExit_E_MsgType >(msgtype_);
}
inline void OGAckExit::set_msgtype(::com::ourgame::texasSlots::OGAckExit_E_MsgType value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckExit_E_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// -------------------------------------------------------------------

// OGReqStartGame

// optional int32 line = 1;
inline bool OGReqStartGame::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqStartGame::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqStartGame::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqStartGame::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 OGReqStartGame::line() const {
  return line_;
}
inline void OGReqStartGame::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 times = 2;
inline bool OGReqStartGame::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqStartGame::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqStartGame::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqStartGame::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 OGReqStartGame::times() const {
  return times_;
}
inline void OGReqStartGame::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional bool auto = 3;
inline bool OGReqStartGame::has_auto_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqStartGame::set_has_auto_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqStartGame::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqStartGame::clear_auto_() {
  auto__ = false;
  clear_has_auto_();
}
inline bool OGReqStartGame::auto_() const {
  return auto__;
}
inline void OGReqStartGame::set_auto_(bool value) {
  set_has_auto_();
  auto__ = value;
}

// -------------------------------------------------------------------

// OGReqDoubleGame

// optional int32 times = 1;
inline bool OGReqDoubleGame::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqDoubleGame::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqDoubleGame::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqDoubleGame::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 OGReqDoubleGame::times() const {
  return times_;
}
inline void OGReqDoubleGame::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 colour = 2;
inline bool OGReqDoubleGame::has_colour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqDoubleGame::set_has_colour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqDoubleGame::clear_has_colour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqDoubleGame::clear_colour() {
  colour_ = 0;
  clear_has_colour();
}
inline ::google::protobuf::int32 OGReqDoubleGame::colour() const {
  return colour_;
}
inline void OGReqDoubleGame::set_colour(::google::protobuf::int32 value) {
  set_has_colour();
  colour_ = value;
}

// -------------------------------------------------------------------

// OGAckGameResult

// optional int32 grid1 = 1;
inline bool OGAckGameResult::has_grid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckGameResult::set_has_grid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckGameResult::clear_has_grid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckGameResult::clear_grid1() {
  grid1_ = 0;
  clear_has_grid1();
}
inline ::google::protobuf::int32 OGAckGameResult::grid1() const {
  return grid1_;
}
inline void OGAckGameResult::set_grid1(::google::protobuf::int32 value) {
  set_has_grid1();
  grid1_ = value;
}

// optional int32 grid2 = 2;
inline bool OGAckGameResult::has_grid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckGameResult::set_has_grid2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckGameResult::clear_has_grid2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckGameResult::clear_grid2() {
  grid2_ = 0;
  clear_has_grid2();
}
inline ::google::protobuf::int32 OGAckGameResult::grid2() const {
  return grid2_;
}
inline void OGAckGameResult::set_grid2(::google::protobuf::int32 value) {
  set_has_grid2();
  grid2_ = value;
}

// optional int32 grid3 = 3;
inline bool OGAckGameResult::has_grid3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckGameResult::set_has_grid3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckGameResult::clear_has_grid3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckGameResult::clear_grid3() {
  grid3_ = 0;
  clear_has_grid3();
}
inline ::google::protobuf::int32 OGAckGameResult::grid3() const {
  return grid3_;
}
inline void OGAckGameResult::set_grid3(::google::protobuf::int32 value) {
  set_has_grid3();
  grid3_ = value;
}

// optional int32 grid4 = 4;
inline bool OGAckGameResult::has_grid4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckGameResult::set_has_grid4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckGameResult::clear_has_grid4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckGameResult::clear_grid4() {
  grid4_ = 0;
  clear_has_grid4();
}
inline ::google::protobuf::int32 OGAckGameResult::grid4() const {
  return grid4_;
}
inline void OGAckGameResult::set_grid4(::google::protobuf::int32 value) {
  set_has_grid4();
  grid4_ = value;
}

// optional int32 grid5 = 5;
inline bool OGAckGameResult::has_grid5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckGameResult::set_has_grid5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckGameResult::clear_has_grid5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckGameResult::clear_grid5() {
  grid5_ = 0;
  clear_has_grid5();
}
inline ::google::protobuf::int32 OGAckGameResult::grid5() const {
  return grid5_;
}
inline void OGAckGameResult::set_grid5(::google::protobuf::int32 value) {
  set_has_grid5();
  grid5_ = value;
}

// optional int32 grid6 = 6;
inline bool OGAckGameResult::has_grid6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckGameResult::set_has_grid6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckGameResult::clear_has_grid6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckGameResult::clear_grid6() {
  grid6_ = 0;
  clear_has_grid6();
}
inline ::google::protobuf::int32 OGAckGameResult::grid6() const {
  return grid6_;
}
inline void OGAckGameResult::set_grid6(::google::protobuf::int32 value) {
  set_has_grid6();
  grid6_ = value;
}

// optional int32 grid7 = 7;
inline bool OGAckGameResult::has_grid7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckGameResult::set_has_grid7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckGameResult::clear_has_grid7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckGameResult::clear_grid7() {
  grid7_ = 0;
  clear_has_grid7();
}
inline ::google::protobuf::int32 OGAckGameResult::grid7() const {
  return grid7_;
}
inline void OGAckGameResult::set_grid7(::google::protobuf::int32 value) {
  set_has_grid7();
  grid7_ = value;
}

// optional int32 grid8 = 8;
inline bool OGAckGameResult::has_grid8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckGameResult::set_has_grid8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckGameResult::clear_has_grid8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckGameResult::clear_grid8() {
  grid8_ = 0;
  clear_has_grid8();
}
inline ::google::protobuf::int32 OGAckGameResult::grid8() const {
  return grid8_;
}
inline void OGAckGameResult::set_grid8(::google::protobuf::int32 value) {
  set_has_grid8();
  grid8_ = value;
}

// optional int32 grid9 = 9;
inline bool OGAckGameResult::has_grid9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckGameResult::set_has_grid9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckGameResult::clear_has_grid9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckGameResult::clear_grid9() {
  grid9_ = 0;
  clear_has_grid9();
}
inline ::google::protobuf::int32 OGAckGameResult::grid9() const {
  return grid9_;
}
inline void OGAckGameResult::set_grid9(::google::protobuf::int32 value) {
  set_has_grid9();
  grid9_ = value;
}

// optional int32 grid10 = 10;
inline bool OGAckGameResult::has_grid10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckGameResult::set_has_grid10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckGameResult::clear_has_grid10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckGameResult::clear_grid10() {
  grid10_ = 0;
  clear_has_grid10();
}
inline ::google::protobuf::int32 OGAckGameResult::grid10() const {
  return grid10_;
}
inline void OGAckGameResult::set_grid10(::google::protobuf::int32 value) {
  set_has_grid10();
  grid10_ = value;
}

// optional int32 grid11 = 11;
inline bool OGAckGameResult::has_grid11() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckGameResult::set_has_grid11() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckGameResult::clear_has_grid11() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckGameResult::clear_grid11() {
  grid11_ = 0;
  clear_has_grid11();
}
inline ::google::protobuf::int32 OGAckGameResult::grid11() const {
  return grid11_;
}
inline void OGAckGameResult::set_grid11(::google::protobuf::int32 value) {
  set_has_grid11();
  grid11_ = value;
}

// optional int32 grid12 = 12;
inline bool OGAckGameResult::has_grid12() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckGameResult::set_has_grid12() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckGameResult::clear_has_grid12() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckGameResult::clear_grid12() {
  grid12_ = 0;
  clear_has_grid12();
}
inline ::google::protobuf::int32 OGAckGameResult::grid12() const {
  return grid12_;
}
inline void OGAckGameResult::set_grid12(::google::protobuf::int32 value) {
  set_has_grid12();
  grid12_ = value;
}

// optional int32 grid13 = 13;
inline bool OGAckGameResult::has_grid13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckGameResult::set_has_grid13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckGameResult::clear_has_grid13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckGameResult::clear_grid13() {
  grid13_ = 0;
  clear_has_grid13();
}
inline ::google::protobuf::int32 OGAckGameResult::grid13() const {
  return grid13_;
}
inline void OGAckGameResult::set_grid13(::google::protobuf::int32 value) {
  set_has_grid13();
  grid13_ = value;
}

// optional int32 grid14 = 14;
inline bool OGAckGameResult::has_grid14() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckGameResult::set_has_grid14() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckGameResult::clear_has_grid14() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckGameResult::clear_grid14() {
  grid14_ = 0;
  clear_has_grid14();
}
inline ::google::protobuf::int32 OGAckGameResult::grid14() const {
  return grid14_;
}
inline void OGAckGameResult::set_grid14(::google::protobuf::int32 value) {
  set_has_grid14();
  grid14_ = value;
}

// optional int32 grid15 = 15;
inline bool OGAckGameResult::has_grid15() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OGAckGameResult::set_has_grid15() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OGAckGameResult::clear_has_grid15() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OGAckGameResult::clear_grid15() {
  grid15_ = 0;
  clear_has_grid15();
}
inline ::google::protobuf::int32 OGAckGameResult::grid15() const {
  return grid15_;
}
inline void OGAckGameResult::set_grid15(::google::protobuf::int32 value) {
  set_has_grid15();
  grid15_ = value;
}

// optional int64 winGold = 16;
inline bool OGAckGameResult::has_wingold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OGAckGameResult::set_has_wingold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OGAckGameResult::clear_has_wingold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OGAckGameResult::clear_wingold() {
  wingold_ = GOOGLE_LONGLONG(0);
  clear_has_wingold();
}
inline ::google::protobuf::int64 OGAckGameResult::wingold() const {
  return wingold_;
}
inline void OGAckGameResult::set_wingold(::google::protobuf::int64 value) {
  set_has_wingold();
  wingold_ = value;
}

// required int32 result = 17;
inline bool OGAckGameResult::has_result() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OGAckGameResult::set_has_result() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OGAckGameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OGAckGameResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckGameResult::result() const {
  return result_;
}
inline void OGAckGameResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 winExp = 18;
inline bool OGAckGameResult::has_winexp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OGAckGameResult::set_has_winexp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OGAckGameResult::clear_has_winexp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OGAckGameResult::clear_winexp() {
  winexp_ = GOOGLE_LONGLONG(0);
  clear_has_winexp();
}
inline ::google::protobuf::int64 OGAckGameResult::winexp() const {
  return winexp_;
}
inline void OGAckGameResult::set_winexp(::google::protobuf::int64 value) {
  set_has_winexp();
  winexp_ = value;
}

// optional int32 jpLineNum = 19;
inline bool OGAckGameResult::has_jplinenum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OGAckGameResult::set_has_jplinenum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OGAckGameResult::clear_has_jplinenum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OGAckGameResult::clear_jplinenum() {
  jplinenum_ = 0;
  clear_has_jplinenum();
}
inline ::google::protobuf::int32 OGAckGameResult::jplinenum() const {
  return jplinenum_;
}
inline void OGAckGameResult::set_jplinenum(::google::protobuf::int32 value) {
  set_has_jplinenum();
  jplinenum_ = value;
}

// optional int64 petWinExp = 20;
inline bool OGAckGameResult::has_petwinexp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OGAckGameResult::set_has_petwinexp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OGAckGameResult::clear_has_petwinexp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OGAckGameResult::clear_petwinexp() {
  petwinexp_ = GOOGLE_LONGLONG(0);
  clear_has_petwinexp();
}
inline ::google::protobuf::int64 OGAckGameResult::petwinexp() const {
  return petwinexp_;
}
inline void OGAckGameResult::set_petwinexp(::google::protobuf::int64 value) {
  set_has_petwinexp();
  petwinexp_ = value;
}

// optional int32 page = 21;
inline bool OGAckGameResult::has_page() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OGAckGameResult::set_has_page() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OGAckGameResult::clear_has_page() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OGAckGameResult::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OGAckGameResult::page() const {
  return page_;
}
inline void OGAckGameResult::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int64 petWinGold = 22;
inline bool OGAckGameResult::has_petwingold() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OGAckGameResult::set_has_petwingold() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OGAckGameResult::clear_has_petwingold() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OGAckGameResult::clear_petwingold() {
  petwingold_ = GOOGLE_LONGLONG(0);
  clear_has_petwingold();
}
inline ::google::protobuf::int64 OGAckGameResult::petwingold() const {
  return petwingold_;
}
inline void OGAckGameResult::set_petwingold(::google::protobuf::int64 value) {
  set_has_petwingold();
  petwingold_ = value;
}

// optional string wrongMsg = 23;
inline bool OGAckGameResult::has_wrongmsg() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OGAckGameResult::set_has_wrongmsg() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OGAckGameResult::clear_has_wrongmsg() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OGAckGameResult::clear_wrongmsg() {
  if (wrongmsg_ != &::google::protobuf::internal::kEmptyString) {
    wrongmsg_->clear();
  }
  clear_has_wrongmsg();
}
inline const ::std::string& OGAckGameResult::wrongmsg() const {
  return *wrongmsg_;
}
inline void OGAckGameResult::set_wrongmsg(const ::std::string& value) {
  set_has_wrongmsg();
  if (wrongmsg_ == &::google::protobuf::internal::kEmptyString) {
    wrongmsg_ = new ::std::string;
  }
  wrongmsg_->assign(value);
}
inline void OGAckGameResult::set_wrongmsg(const char* value) {
  set_has_wrongmsg();
  if (wrongmsg_ == &::google::protobuf::internal::kEmptyString) {
    wrongmsg_ = new ::std::string;
  }
  wrongmsg_->assign(value);
}
inline void OGAckGameResult::set_wrongmsg(const char* value, size_t size) {
  set_has_wrongmsg();
  if (wrongmsg_ == &::google::protobuf::internal::kEmptyString) {
    wrongmsg_ = new ::std::string;
  }
  wrongmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGameResult::mutable_wrongmsg() {
  set_has_wrongmsg();
  if (wrongmsg_ == &::google::protobuf::internal::kEmptyString) {
    wrongmsg_ = new ::std::string;
  }
  return wrongmsg_;
}
inline ::std::string* OGAckGameResult::release_wrongmsg() {
  clear_has_wrongmsg();
  if (wrongmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wrongmsg_;
    wrongmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 freeFlg = 24;
inline bool OGAckGameResult::has_freeflg() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OGAckGameResult::set_has_freeflg() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OGAckGameResult::clear_has_freeflg() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OGAckGameResult::clear_freeflg() {
  freeflg_ = 0;
  clear_has_freeflg();
}
inline ::google::protobuf::int32 OGAckGameResult::freeflg() const {
  return freeflg_;
}
inline void OGAckGameResult::set_freeflg(::google::protobuf::int32 value) {
  set_has_freeflg();
  freeflg_ = value;
}

// optional int64 goldPlus = 25;
inline bool OGAckGameResult::has_goldplus() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OGAckGameResult::set_has_goldplus() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OGAckGameResult::clear_has_goldplus() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OGAckGameResult::clear_goldplus() {
  goldplus_ = GOOGLE_LONGLONG(0);
  clear_has_goldplus();
}
inline ::google::protobuf::int64 OGAckGameResult::goldplus() const {
  return goldplus_;
}
inline void OGAckGameResult::set_goldplus(::google::protobuf::int64 value) {
  set_has_goldplus();
  goldplus_ = value;
}

// optional int32 freeTimes = 26;
inline bool OGAckGameResult::has_freetimes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OGAckGameResult::set_has_freetimes() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OGAckGameResult::clear_has_freetimes() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OGAckGameResult::clear_freetimes() {
  freetimes_ = 0;
  clear_has_freetimes();
}
inline ::google::protobuf::int32 OGAckGameResult::freetimes() const {
  return freetimes_;
}
inline void OGAckGameResult::set_freetimes(::google::protobuf::int32 value) {
  set_has_freetimes();
  freetimes_ = value;
}

// -------------------------------------------------------------------

// GameToJSupport

// required string roleName = 1;
inline bool GameToJSupport::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameToJSupport::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameToJSupport::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameToJSupport::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GameToJSupport::rolename() const {
  return *rolename_;
}
inline void GameToJSupport::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GameToJSupport::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GameToJSupport::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameToJSupport::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GameToJSupport::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 type = 2;
inline bool GameToJSupport::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameToJSupport::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameToJSupport::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameToJSupport::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GameToJSupport::type() const {
  return type_;
}
inline void GameToJSupport::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int64 needGold = 3;
inline bool GameToJSupport::has_needgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameToJSupport::set_has_needgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameToJSupport::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameToJSupport::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 GameToJSupport::needgold() const {
  return needgold_;
}
inline void GameToJSupport::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// required int64 winGold = 4;
inline bool GameToJSupport::has_wingold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameToJSupport::set_has_wingold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameToJSupport::clear_has_wingold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameToJSupport::clear_wingold() {
  wingold_ = GOOGLE_LONGLONG(0);
  clear_has_wingold();
}
inline ::google::protobuf::int64 GameToJSupport::wingold() const {
  return wingold_;
}
inline void GameToJSupport::set_wingold(::google::protobuf::int64 value) {
  set_has_wingold();
  wingold_ = value;
}

// required int32 winExp = 5;
inline bool GameToJSupport::has_winexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameToJSupport::set_has_winexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameToJSupport::clear_has_winexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameToJSupport::clear_winexp() {
  winexp_ = 0;
  clear_has_winexp();
}
inline ::google::protobuf::int32 GameToJSupport::winexp() const {
  return winexp_;
}
inline void GameToJSupport::set_winexp(::google::protobuf::int32 value) {
  set_has_winexp();
  winexp_ = value;
}

// required int32 jpLineNum = 6;
inline bool GameToJSupport::has_jplinenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameToJSupport::set_has_jplinenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameToJSupport::clear_has_jplinenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameToJSupport::clear_jplinenum() {
  jplinenum_ = 0;
  clear_has_jplinenum();
}
inline ::google::protobuf::int32 GameToJSupport::jplinenum() const {
  return jplinenum_;
}
inline void GameToJSupport::set_jplinenum(::google::protobuf::int32 value) {
  set_has_jplinenum();
  jplinenum_ = value;
}

// required int32 jpPass = 7;
inline bool GameToJSupport::has_jppass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameToJSupport::set_has_jppass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameToJSupport::clear_has_jppass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameToJSupport::clear_jppass() {
  jppass_ = 0;
  clear_has_jppass();
}
inline ::google::protobuf::int32 GameToJSupport::jppass() const {
  return jppass_;
}
inline void GameToJSupport::set_jppass(::google::protobuf::int32 value) {
  set_has_jppass();
  jppass_ = value;
}

// optional int64 jp = 8;
inline bool GameToJSupport::has_jp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameToJSupport::set_has_jp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameToJSupport::clear_has_jp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameToJSupport::clear_jp() {
  jp_ = GOOGLE_LONGLONG(0);
  clear_has_jp();
}
inline ::google::protobuf::int64 GameToJSupport::jp() const {
  return jp_;
}
inline void GameToJSupport::set_jp(::google::protobuf::int64 value) {
  set_has_jp();
  jp_ = value;
}

// optional int32 bigType = 9;
inline bool GameToJSupport::has_bigtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameToJSupport::set_has_bigtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameToJSupport::clear_has_bigtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameToJSupport::clear_bigtype() {
  bigtype_ = 0;
  clear_has_bigtype();
}
inline ::google::protobuf::int32 GameToJSupport::bigtype() const {
  return bigtype_;
}
inline void GameToJSupport::set_bigtype(::google::protobuf::int32 value) {
  set_has_bigtype();
  bigtype_ = value;
}

// optional int64 petWinGold = 10;
inline bool GameToJSupport::has_petwingold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameToJSupport::set_has_petwingold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameToJSupport::clear_has_petwingold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameToJSupport::clear_petwingold() {
  petwingold_ = GOOGLE_LONGLONG(0);
  clear_has_petwingold();
}
inline ::google::protobuf::int64 GameToJSupport::petwingold() const {
  return petwingold_;
}
inline void GameToJSupport::set_petwingold(::google::protobuf::int64 value) {
  set_has_petwingold();
  petwingold_ = value;
}

// optional int32 jpBet = 11;
inline bool GameToJSupport::has_jpbet() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameToJSupport::set_has_jpbet() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameToJSupport::clear_has_jpbet() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameToJSupport::clear_jpbet() {
  jpbet_ = 0;
  clear_has_jpbet();
}
inline ::google::protobuf::int32 GameToJSupport::jpbet() const {
  return jpbet_;
}
inline void GameToJSupport::set_jpbet(::google::protobuf::int32 value) {
  set_has_jpbet();
  jpbet_ = value;
}

// optional int32 bet = 12;
inline bool GameToJSupport::has_bet() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameToJSupport::set_has_bet() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameToJSupport::clear_has_bet() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameToJSupport::clear_bet() {
  bet_ = 0;
  clear_has_bet();
}
inline ::google::protobuf::int32 GameToJSupport::bet() const {
  return bet_;
}
inline void GameToJSupport::set_bet(::google::protobuf::int32 value) {
  set_has_bet();
  bet_ = value;
}

// optional int64 petWinExp = 13;
inline bool GameToJSupport::has_petwinexp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameToJSupport::set_has_petwinexp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameToJSupport::clear_has_petwinexp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameToJSupport::clear_petwinexp() {
  petwinexp_ = GOOGLE_LONGLONG(0);
  clear_has_petwinexp();
}
inline ::google::protobuf::int64 GameToJSupport::petwinexp() const {
  return petwinexp_;
}
inline void GameToJSupport::set_petwinexp(::google::protobuf::int64 value) {
  set_has_petwinexp();
  petwinexp_ = value;
}

// optional int32 line = 14;
inline bool GameToJSupport::has_line() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameToJSupport::set_has_line() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameToJSupport::clear_has_line() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameToJSupport::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 GameToJSupport::line() const {
  return line_;
}
inline void GameToJSupport::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 times = 15;
inline bool GameToJSupport::has_times() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GameToJSupport::set_has_times() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GameToJSupport::clear_has_times() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GameToJSupport::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 GameToJSupport::times() const {
  return times_;
}
inline void GameToJSupport::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional string str1 = 16;
inline bool GameToJSupport::has_str1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameToJSupport::set_has_str1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameToJSupport::clear_has_str1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameToJSupport::clear_str1() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    str1_->clear();
  }
  clear_has_str1();
}
inline const ::std::string& GameToJSupport::str1() const {
  return *str1_;
}
inline void GameToJSupport::set_str1(const ::std::string& value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void GameToJSupport::set_str1(const char* value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void GameToJSupport::set_str1(const char* value, size_t size) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameToJSupport::mutable_str1() {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  return str1_;
}
inline ::std::string* GameToJSupport::release_str1() {
  clear_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str1_;
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 freeFlg = 17;
inline bool GameToJSupport::has_freeflg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GameToJSupport::set_has_freeflg() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GameToJSupport::clear_has_freeflg() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GameToJSupport::clear_freeflg() {
  freeflg_ = 0;
  clear_has_freeflg();
}
inline ::google::protobuf::int32 GameToJSupport::freeflg() const {
  return freeflg_;
}
inline void GameToJSupport::set_freeflg(::google::protobuf::int32 value) {
  set_has_freeflg();
  freeflg_ = value;
}

// optional int64 goldPlus = 18;
inline bool GameToJSupport::has_goldplus() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GameToJSupport::set_has_goldplus() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GameToJSupport::clear_has_goldplus() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GameToJSupport::clear_goldplus() {
  goldplus_ = GOOGLE_LONGLONG(0);
  clear_has_goldplus();
}
inline ::google::protobuf::int64 GameToJSupport::goldplus() const {
  return goldplus_;
}
inline void GameToJSupport::set_goldplus(::google::protobuf::int64 value) {
  set_has_goldplus();
  goldplus_ = value;
}

// optional string jpStarName = 19;
inline bool GameToJSupport::has_jpstarname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GameToJSupport::set_has_jpstarname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GameToJSupport::clear_has_jpstarname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GameToJSupport::clear_jpstarname() {
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    jpstarname_->clear();
  }
  clear_has_jpstarname();
}
inline const ::std::string& GameToJSupport::jpstarname() const {
  return *jpstarname_;
}
inline void GameToJSupport::set_jpstarname(const ::std::string& value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void GameToJSupport::set_jpstarname(const char* value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void GameToJSupport::set_jpstarname(const char* value, size_t size) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameToJSupport::mutable_jpstarname() {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  return jpstarname_;
}
inline ::std::string* GameToJSupport::release_jpstarname() {
  clear_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpstarname_;
    jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckDoubleResult

// required int32 result = 1;
inline bool OGAckDoubleResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckDoubleResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckDoubleResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckDoubleResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckDoubleResult::result() const {
  return result_;
}
inline void OGAckDoubleResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int64 winGold = 2;
inline bool OGAckDoubleResult::has_wingold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckDoubleResult::set_has_wingold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckDoubleResult::clear_has_wingold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckDoubleResult::clear_wingold() {
  wingold_ = GOOGLE_LONGLONG(0);
  clear_has_wingold();
}
inline ::google::protobuf::int64 OGAckDoubleResult::wingold() const {
  return wingold_;
}
inline void OGAckDoubleResult::set_wingold(::google::protobuf::int64 value) {
  set_has_wingold();
  wingold_ = value;
}

// required int32 start = 3;
inline bool OGAckDoubleResult::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckDoubleResult::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckDoubleResult::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckDoubleResult::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 OGAckDoubleResult::start() const {
  return start_;
}
inline void OGAckDoubleResult::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional int32 cardNumber = 4;
inline bool OGAckDoubleResult::has_cardnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckDoubleResult::set_has_cardnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckDoubleResult::clear_has_cardnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckDoubleResult::clear_cardnumber() {
  cardnumber_ = 0;
  clear_has_cardnumber();
}
inline ::google::protobuf::int32 OGAckDoubleResult::cardnumber() const {
  return cardnumber_;
}
inline void OGAckDoubleResult::set_cardnumber(::google::protobuf::int32 value) {
  set_has_cardnumber();
  cardnumber_ = value;
}

// required int64 gold = 5;
inline bool OGAckDoubleResult::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckDoubleResult::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckDoubleResult::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckDoubleResult::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckDoubleResult::gold() const {
  return gold_;
}
inline void OGAckDoubleResult::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// required int32 getGoldFlg = 6;
inline bool OGAckDoubleResult::has_getgoldflg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckDoubleResult::set_has_getgoldflg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckDoubleResult::clear_has_getgoldflg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckDoubleResult::clear_getgoldflg() {
  getgoldflg_ = 0;
  clear_has_getgoldflg();
}
inline ::google::protobuf::int32 OGAckDoubleResult::getgoldflg() const {
  return getgoldflg_;
}
inline void OGAckDoubleResult::set_getgoldflg(::google::protobuf::int32 value) {
  set_has_getgoldflg();
  getgoldflg_ = value;
}

// optional string roleName = 7;
inline bool OGAckDoubleResult::has_rolename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckDoubleResult::set_has_rolename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckDoubleResult::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckDoubleResult::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckDoubleResult::rolename() const {
  return *rolename_;
}
inline void OGAckDoubleResult::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleResult::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleResult::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckDoubleResult::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckDoubleResult::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bigType = 8;
inline bool OGAckDoubleResult::has_bigtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckDoubleResult::set_has_bigtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckDoubleResult::clear_has_bigtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckDoubleResult::clear_bigtype() {
  bigtype_ = 0;
  clear_has_bigtype();
}
inline ::google::protobuf::int32 OGAckDoubleResult::bigtype() const {
  return bigtype_;
}
inline void OGAckDoubleResult::set_bigtype(::google::protobuf::int32 value) {
  set_has_bigtype();
  bigtype_ = value;
}

// optional int64 needGold = 9;
inline bool OGAckDoubleResult::has_needgold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckDoubleResult::set_has_needgold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckDoubleResult::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckDoubleResult::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 OGAckDoubleResult::needgold() const {
  return needgold_;
}
inline void OGAckDoubleResult::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// optional int32 goldPlus = 10;
inline bool OGAckDoubleResult::has_goldplus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckDoubleResult::set_has_goldplus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckDoubleResult::clear_has_goldplus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckDoubleResult::clear_goldplus() {
  goldplus_ = 0;
  clear_has_goldplus();
}
inline ::google::protobuf::int32 OGAckDoubleResult::goldplus() const {
  return goldplus_;
}
inline void OGAckDoubleResult::set_goldplus(::google::protobuf::int32 value) {
  set_has_goldplus();
  goldplus_ = value;
}

// optional int64 goldPlusValue = 11;
inline bool OGAckDoubleResult::has_goldplusvalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckDoubleResult::set_has_goldplusvalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckDoubleResult::clear_has_goldplusvalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckDoubleResult::clear_goldplusvalue() {
  goldplusvalue_ = GOOGLE_LONGLONG(0);
  clear_has_goldplusvalue();
}
inline ::google::protobuf::int64 OGAckDoubleResult::goldplusvalue() const {
  return goldplusvalue_;
}
inline void OGAckDoubleResult::set_goldplusvalue(::google::protobuf::int64 value) {
  set_has_goldplusvalue();
  goldplusvalue_ = value;
}

// optional int32 page = 14;
inline bool OGAckDoubleResult::has_page() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckDoubleResult::set_has_page() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckDoubleResult::clear_has_page() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckDoubleResult::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OGAckDoubleResult::page() const {
  return page_;
}
inline void OGAckDoubleResult::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 colour = 12;
inline bool OGAckDoubleResult::has_colour() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckDoubleResult::set_has_colour() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckDoubleResult::clear_has_colour() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckDoubleResult::clear_colour() {
  colour_ = 0;
  clear_has_colour();
}
inline ::google::protobuf::int32 OGAckDoubleResult::colour() const {
  return colour_;
}
inline void OGAckDoubleResult::set_colour(::google::protobuf::int32 value) {
  set_has_colour();
  colour_ = value;
}

// optional int32 times = 13;
inline bool OGAckDoubleResult::has_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckDoubleResult::set_has_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckDoubleResult::clear_has_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckDoubleResult::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 OGAckDoubleResult::times() const {
  return times_;
}
inline void OGAckDoubleResult::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 whiteFlg = 15;
inline bool OGAckDoubleResult::has_whiteflg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OGAckDoubleResult::set_has_whiteflg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OGAckDoubleResult::clear_has_whiteflg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OGAckDoubleResult::clear_whiteflg() {
  whiteflg_ = 0;
  clear_has_whiteflg();
}
inline ::google::protobuf::int32 OGAckDoubleResult::whiteflg() const {
  return whiteflg_;
}
inline void OGAckDoubleResult::set_whiteflg(::google::protobuf::int32 value) {
  set_has_whiteflg();
  whiteflg_ = value;
}

// optional string d = 16;
inline bool OGAckDoubleResult::has_d() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OGAckDoubleResult::set_has_d() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OGAckDoubleResult::clear_has_d() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OGAckDoubleResult::clear_d() {
  if (d_ != &::google::protobuf::internal::kEmptyString) {
    d_->clear();
  }
  clear_has_d();
}
inline const ::std::string& OGAckDoubleResult::d() const {
  return *d_;
}
inline void OGAckDoubleResult::set_d(const ::std::string& value) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(value);
}
inline void OGAckDoubleResult::set_d(const char* value) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(value);
}
inline void OGAckDoubleResult::set_d(const char* value, size_t size) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckDoubleResult::mutable_d() {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  return d_;
}
inline ::std::string* OGAckDoubleResult::release_d() {
  clear_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d_;
    d_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 doubleType = 17;
inline bool OGAckDoubleResult::has_doubletype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OGAckDoubleResult::set_has_doubletype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OGAckDoubleResult::clear_has_doubletype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OGAckDoubleResult::clear_doubletype() {
  doubletype_ = 0;
  clear_has_doubletype();
}
inline ::google::protobuf::int32 OGAckDoubleResult::doubletype() const {
  return doubletype_;
}
inline void OGAckDoubleResult::set_doubletype(::google::protobuf::int32 value) {
  set_has_doubletype();
  doubletype_ = value;
}

// optional int32 freeTimes = 18;
inline bool OGAckDoubleResult::has_freetimes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OGAckDoubleResult::set_has_freetimes() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OGAckDoubleResult::clear_has_freetimes() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OGAckDoubleResult::clear_freetimes() {
  freetimes_ = 0;
  clear_has_freetimes();
}
inline ::google::protobuf::int32 OGAckDoubleResult::freetimes() const {
  return freetimes_;
}
inline void OGAckDoubleResult::set_freetimes(::google::protobuf::int32 value) {
  set_has_freetimes();
  freetimes_ = value;
}

// -------------------------------------------------------------------

// OGReqDoubleGetGold

// -------------------------------------------------------------------

// OGAckDoubleGetGold

// optional string roleName = 1;
inline bool OGAckDoubleGetGold::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckDoubleGetGold::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckDoubleGetGold::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckDoubleGetGold::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckDoubleGetGold::rolename() const {
  return *rolename_;
}
inline void OGAckDoubleGetGold::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleGetGold::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleGetGold::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckDoubleGetGold::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckDoubleGetGold::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 winGold = 2;
inline bool OGAckDoubleGetGold::has_wingold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckDoubleGetGold::set_has_wingold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckDoubleGetGold::clear_has_wingold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckDoubleGetGold::clear_wingold() {
  wingold_ = GOOGLE_LONGLONG(0);
  clear_has_wingold();
}
inline ::google::protobuf::int64 OGAckDoubleGetGold::wingold() const {
  return wingold_;
}
inline void OGAckDoubleGetGold::set_wingold(::google::protobuf::int64 value) {
  set_has_wingold();
  wingold_ = value;
}

// required int32 goldPlus = 3;
inline bool OGAckDoubleGetGold::has_goldplus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckDoubleGetGold::set_has_goldplus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckDoubleGetGold::clear_has_goldplus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckDoubleGetGold::clear_goldplus() {
  goldplus_ = 0;
  clear_has_goldplus();
}
inline ::google::protobuf::int32 OGAckDoubleGetGold::goldplus() const {
  return goldplus_;
}
inline void OGAckDoubleGetGold::set_goldplus(::google::protobuf::int32 value) {
  set_has_goldplus();
  goldplus_ = value;
}

// required int64 goldPlusValue = 4;
inline bool OGAckDoubleGetGold::has_goldplusvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckDoubleGetGold::set_has_goldplusvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckDoubleGetGold::clear_has_goldplusvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckDoubleGetGold::clear_goldplusvalue() {
  goldplusvalue_ = GOOGLE_LONGLONG(0);
  clear_has_goldplusvalue();
}
inline ::google::protobuf::int64 OGAckDoubleGetGold::goldplusvalue() const {
  return goldplusvalue_;
}
inline void OGAckDoubleGetGold::set_goldplusvalue(::google::protobuf::int64 value) {
  set_has_goldplusvalue();
  goldplusvalue_ = value;
}

// required int64 gold = 5;
inline bool OGAckDoubleGetGold::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckDoubleGetGold::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckDoubleGetGold::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckDoubleGetGold::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckDoubleGetGold::gold() const {
  return gold_;
}
inline void OGAckDoubleGetGold::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 page = 6;
inline bool OGAckDoubleGetGold::has_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckDoubleGetGold::set_has_page() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckDoubleGetGold::clear_has_page() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckDoubleGetGold::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OGAckDoubleGetGold::page() const {
  return page_;
}
inline void OGAckDoubleGetGold::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// GameLoseMoney

// required int32 type = 1;
inline bool GameLoseMoney::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameLoseMoney::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameLoseMoney::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameLoseMoney::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GameLoseMoney::type() const {
  return type_;
}
inline void GameLoseMoney::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int64 needGold = 2;
inline bool GameLoseMoney::has_needgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameLoseMoney::set_has_needgold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameLoseMoney::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameLoseMoney::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 GameLoseMoney::needgold() const {
  return needgold_;
}
inline void GameLoseMoney::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// -------------------------------------------------------------------

// ReqJP

// -------------------------------------------------------------------

// OGAckJP

// required int64 jp = 1;
inline bool OGAckJP::has_jp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckJP::set_has_jp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckJP::clear_has_jp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckJP::clear_jp() {
  jp_ = GOOGLE_LONGLONG(0);
  clear_has_jp();
}
inline ::google::protobuf::int64 OGAckJP::jp() const {
  return jp_;
}
inline void OGAckJP::set_jp(::google::protobuf::int64 value) {
  set_has_jp();
  jp_ = value;
}

// -------------------------------------------------------------------

// OGAckRoleUpLev

// required int32 curLev = 1;
inline bool OGAckRoleUpLev::has_curlev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRoleUpLev::set_has_curlev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRoleUpLev::clear_has_curlev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRoleUpLev::clear_curlev() {
  curlev_ = 0;
  clear_has_curlev();
}
inline ::google::protobuf::int32 OGAckRoleUpLev::curlev() const {
  return curlev_;
}
inline void OGAckRoleUpLev::set_curlev(::google::protobuf::int32 value) {
  set_has_curlev();
  curlev_ = value;
}

// -------------------------------------------------------------------

// OGReqReadDB

// -------------------------------------------------------------------

// OGReqPool

// optional int32 type = 1;
inline bool OGReqPool::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqPool::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqPool::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqPool::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGReqPool::type() const {
  return type_;
}
inline void OGReqPool::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 value = 2;
inline bool OGReqPool::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqPool::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqPool::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqPool::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 OGReqPool::value() const {
  return value_;
}
inline void OGReqPool::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// OGReqMailsToPlayer

// optional string players = 1;
inline bool OGReqMailsToPlayer::has_players() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqMailsToPlayer::set_has_players() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqMailsToPlayer::clear_has_players() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqMailsToPlayer::clear_players() {
  if (players_ != &::google::protobuf::internal::kEmptyString) {
    players_->clear();
  }
  clear_has_players();
}
inline const ::std::string& OGReqMailsToPlayer::players() const {
  return *players_;
}
inline void OGReqMailsToPlayer::set_players(const ::std::string& value) {
  set_has_players();
  if (players_ == &::google::protobuf::internal::kEmptyString) {
    players_ = new ::std::string;
  }
  players_->assign(value);
}
inline void OGReqMailsToPlayer::set_players(const char* value) {
  set_has_players();
  if (players_ == &::google::protobuf::internal::kEmptyString) {
    players_ = new ::std::string;
  }
  players_->assign(value);
}
inline void OGReqMailsToPlayer::set_players(const char* value, size_t size) {
  set_has_players();
  if (players_ == &::google::protobuf::internal::kEmptyString) {
    players_ = new ::std::string;
  }
  players_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqMailsToPlayer::mutable_players() {
  set_has_players();
  if (players_ == &::google::protobuf::internal::kEmptyString) {
    players_ = new ::std::string;
  }
  return players_;
}
inline ::std::string* OGReqMailsToPlayer::release_players() {
  clear_has_players();
  if (players_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = players_;
    players_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqAddWhite

// optional int32 total_On = 1;
inline bool OGReqAddWhite::has_total_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqAddWhite::set_has_total_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqAddWhite::clear_has_total_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqAddWhite::clear_total_on() {
  total_on_ = 0;
  clear_has_total_on();
}
inline ::google::protobuf::int32 OGReqAddWhite::total_on() const {
  return total_on_;
}
inline void OGReqAddWhite::set_total_on(::google::protobuf::int32 value) {
  set_has_total_on();
  total_on_ = value;
}

// optional string total_StartTime = 2;
inline bool OGReqAddWhite::has_total_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqAddWhite::set_has_total_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqAddWhite::clear_has_total_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqAddWhite::clear_total_starttime() {
  if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
    total_starttime_->clear();
  }
  clear_has_total_starttime();
}
inline const ::std::string& OGReqAddWhite::total_starttime() const {
  return *total_starttime_;
}
inline void OGReqAddWhite::set_total_starttime(const ::std::string& value) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(value);
}
inline void OGReqAddWhite::set_total_starttime(const char* value) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(value);
}
inline void OGReqAddWhite::set_total_starttime(const char* value, size_t size) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqAddWhite::mutable_total_starttime() {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  return total_starttime_;
}
inline ::std::string* OGReqAddWhite::release_total_starttime() {
  clear_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_starttime_;
    total_starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string total_EndTime = 3;
inline bool OGReqAddWhite::has_total_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqAddWhite::set_has_total_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqAddWhite::clear_has_total_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqAddWhite::clear_total_endtime() {
  if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
    total_endtime_->clear();
  }
  clear_has_total_endtime();
}
inline const ::std::string& OGReqAddWhite::total_endtime() const {
  return *total_endtime_;
}
inline void OGReqAddWhite::set_total_endtime(const ::std::string& value) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(value);
}
inline void OGReqAddWhite::set_total_endtime(const char* value) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(value);
}
inline void OGReqAddWhite::set_total_endtime(const char* value, size_t size) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqAddWhite::mutable_total_endtime() {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  return total_endtime_;
}
inline ::std::string* OGReqAddWhite::release_total_endtime() {
  clear_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_endtime_;
    total_endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 total_Up = 4;
inline bool OGReqAddWhite::has_total_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqAddWhite::set_has_total_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqAddWhite::clear_has_total_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqAddWhite::clear_total_up() {
  total_up_ = GOOGLE_LONGLONG(0);
  clear_has_total_up();
}
inline ::google::protobuf::int64 OGReqAddWhite::total_up() const {
  return total_up_;
}
inline void OGReqAddWhite::set_total_up(::google::protobuf::int64 value) {
  set_has_total_up();
  total_up_ = value;
}

// optional int32 total_UpJilv = 5;
inline bool OGReqAddWhite::has_total_upjilv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGReqAddWhite::set_has_total_upjilv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGReqAddWhite::clear_has_total_upjilv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGReqAddWhite::clear_total_upjilv() {
  total_upjilv_ = 0;
  clear_has_total_upjilv();
}
inline ::google::protobuf::int32 OGReqAddWhite::total_upjilv() const {
  return total_upjilv_;
}
inline void OGReqAddWhite::set_total_upjilv(::google::protobuf::int32 value) {
  set_has_total_upjilv();
  total_upjilv_ = value;
}

// optional int64 total_Down = 6;
inline bool OGReqAddWhite::has_total_down() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGReqAddWhite::set_has_total_down() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGReqAddWhite::clear_has_total_down() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGReqAddWhite::clear_total_down() {
  total_down_ = GOOGLE_LONGLONG(0);
  clear_has_total_down();
}
inline ::google::protobuf::int64 OGReqAddWhite::total_down() const {
  return total_down_;
}
inline void OGReqAddWhite::set_total_down(::google::protobuf::int64 value) {
  set_has_total_down();
  total_down_ = value;
}

// optional int32 total_DownJilv = 7;
inline bool OGReqAddWhite::has_total_downjilv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGReqAddWhite::set_has_total_downjilv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGReqAddWhite::clear_has_total_downjilv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGReqAddWhite::clear_total_downjilv() {
  total_downjilv_ = 0;
  clear_has_total_downjilv();
}
inline ::google::protobuf::int32 OGReqAddWhite::total_downjilv() const {
  return total_downjilv_;
}
inline void OGReqAddWhite::set_total_downjilv(::google::protobuf::int32 value) {
  set_has_total_downjilv();
  total_downjilv_ = value;
}

// optional string roleName = 8;
inline bool OGReqAddWhite::has_rolename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGReqAddWhite::set_has_rolename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGReqAddWhite::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGReqAddWhite::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqAddWhite::rolename() const {
  return *rolename_;
}
inline void OGReqAddWhite::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqAddWhite::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqAddWhite::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqAddWhite::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqAddWhite::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flg = 9;
inline bool OGReqAddWhite::has_flg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGReqAddWhite::set_has_flg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGReqAddWhite::clear_has_flg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGReqAddWhite::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGReqAddWhite::flg() const {
  return flg_;
}
inline void OGReqAddWhite::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// optional string key = 10;
inline bool OGReqAddWhite::has_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGReqAddWhite::set_has_key() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGReqAddWhite::clear_has_key() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGReqAddWhite::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& OGReqAddWhite::key() const {
  return *key_;
}
inline void OGReqAddWhite::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqAddWhite::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqAddWhite::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqAddWhite::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* OGReqAddWhite::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string white = 11;
inline bool OGReqAddWhite::has_white() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGReqAddWhite::set_has_white() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGReqAddWhite::clear_has_white() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGReqAddWhite::clear_white() {
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    white_->clear();
  }
  clear_has_white();
}
inline const ::std::string& OGReqAddWhite::white() const {
  return *white_;
}
inline void OGReqAddWhite::set_white(const ::std::string& value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqAddWhite::set_white(const char* value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqAddWhite::set_white(const char* value, size_t size) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqAddWhite::mutable_white() {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  return white_;
}
inline ::std::string* OGReqAddWhite::release_white() {
  clear_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = white_;
    white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqWhiteList

// optional string key = 1;
inline bool OGReqWhiteList::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqWhiteList::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqWhiteList::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqWhiteList::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& OGReqWhiteList::key() const {
  return *key_;
}
inline void OGReqWhiteList::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqWhiteList::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqWhiteList::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqWhiteList::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* OGReqWhiteList::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string white = 2;
inline bool OGReqWhiteList::has_white() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqWhiteList::set_has_white() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqWhiteList::clear_has_white() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqWhiteList::clear_white() {
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    white_->clear();
  }
  clear_has_white();
}
inline const ::std::string& OGReqWhiteList::white() const {
  return *white_;
}
inline void OGReqWhiteList::set_white(const ::std::string& value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqWhiteList::set_white(const char* value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqWhiteList::set_white(const char* value, size_t size) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqWhiteList::mutable_white() {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  return white_;
}
inline ::std::string* OGReqWhiteList::release_white() {
  clear_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = white_;
    white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckWhiteList_White

// optional int32 total_On = 1;
inline bool OGAckWhiteList_White::has_total_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckWhiteList_White::clear_has_total_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckWhiteList_White::clear_total_on() {
  total_on_ = 0;
  clear_has_total_on();
}
inline ::google::protobuf::int32 OGAckWhiteList_White::total_on() const {
  return total_on_;
}
inline void OGAckWhiteList_White::set_total_on(::google::protobuf::int32 value) {
  set_has_total_on();
  total_on_ = value;
}

// optional string total_StartTime = 2;
inline bool OGAckWhiteList_White::has_total_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckWhiteList_White::clear_has_total_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckWhiteList_White::clear_total_starttime() {
  if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
    total_starttime_->clear();
  }
  clear_has_total_starttime();
}
inline const ::std::string& OGAckWhiteList_White::total_starttime() const {
  return *total_starttime_;
}
inline void OGAckWhiteList_White::set_total_starttime(const ::std::string& value) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(value);
}
inline void OGAckWhiteList_White::set_total_starttime(const char* value) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(value);
}
inline void OGAckWhiteList_White::set_total_starttime(const char* value, size_t size) {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  total_starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckWhiteList_White::mutable_total_starttime() {
  set_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    total_starttime_ = new ::std::string;
  }
  return total_starttime_;
}
inline ::std::string* OGAckWhiteList_White::release_total_starttime() {
  clear_has_total_starttime();
  if (total_starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_starttime_;
    total_starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string total_EndTime = 3;
inline bool OGAckWhiteList_White::has_total_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckWhiteList_White::clear_has_total_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckWhiteList_White::clear_total_endtime() {
  if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
    total_endtime_->clear();
  }
  clear_has_total_endtime();
}
inline const ::std::string& OGAckWhiteList_White::total_endtime() const {
  return *total_endtime_;
}
inline void OGAckWhiteList_White::set_total_endtime(const ::std::string& value) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(value);
}
inline void OGAckWhiteList_White::set_total_endtime(const char* value) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(value);
}
inline void OGAckWhiteList_White::set_total_endtime(const char* value, size_t size) {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  total_endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckWhiteList_White::mutable_total_endtime() {
  set_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    total_endtime_ = new ::std::string;
  }
  return total_endtime_;
}
inline ::std::string* OGAckWhiteList_White::release_total_endtime() {
  clear_has_total_endtime();
  if (total_endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_endtime_;
    total_endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 total_Up = 4;
inline bool OGAckWhiteList_White::has_total_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckWhiteList_White::clear_has_total_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckWhiteList_White::clear_total_up() {
  total_up_ = GOOGLE_LONGLONG(0);
  clear_has_total_up();
}
inline ::google::protobuf::int64 OGAckWhiteList_White::total_up() const {
  return total_up_;
}
inline void OGAckWhiteList_White::set_total_up(::google::protobuf::int64 value) {
  set_has_total_up();
  total_up_ = value;
}

// optional int32 total_UpJilv = 5;
inline bool OGAckWhiteList_White::has_total_upjilv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_upjilv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckWhiteList_White::clear_has_total_upjilv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckWhiteList_White::clear_total_upjilv() {
  total_upjilv_ = 0;
  clear_has_total_upjilv();
}
inline ::google::protobuf::int32 OGAckWhiteList_White::total_upjilv() const {
  return total_upjilv_;
}
inline void OGAckWhiteList_White::set_total_upjilv(::google::protobuf::int32 value) {
  set_has_total_upjilv();
  total_upjilv_ = value;
}

// optional int64 total_Down = 6;
inline bool OGAckWhiteList_White::has_total_down() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_down() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckWhiteList_White::clear_has_total_down() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckWhiteList_White::clear_total_down() {
  total_down_ = GOOGLE_LONGLONG(0);
  clear_has_total_down();
}
inline ::google::protobuf::int64 OGAckWhiteList_White::total_down() const {
  return total_down_;
}
inline void OGAckWhiteList_White::set_total_down(::google::protobuf::int64 value) {
  set_has_total_down();
  total_down_ = value;
}

// optional int32 total_DownJilv = 7;
inline bool OGAckWhiteList_White::has_total_downjilv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckWhiteList_White::set_has_total_downjilv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckWhiteList_White::clear_has_total_downjilv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckWhiteList_White::clear_total_downjilv() {
  total_downjilv_ = 0;
  clear_has_total_downjilv();
}
inline ::google::protobuf::int32 OGAckWhiteList_White::total_downjilv() const {
  return total_downjilv_;
}
inline void OGAckWhiteList_White::set_total_downjilv(::google::protobuf::int32 value) {
  set_has_total_downjilv();
  total_downjilv_ = value;
}

// optional string roleName = 8;
inline bool OGAckWhiteList_White::has_rolename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckWhiteList_White::set_has_rolename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckWhiteList_White::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckWhiteList_White::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckWhiteList_White::rolename() const {
  return *rolename_;
}
inline void OGAckWhiteList_White::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckWhiteList_White::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckWhiteList_White::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckWhiteList_White::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckWhiteList_White::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 winDay = 9;
inline bool OGAckWhiteList_White::has_winday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckWhiteList_White::set_has_winday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckWhiteList_White::clear_has_winday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckWhiteList_White::clear_winday() {
  winday_ = GOOGLE_LONGLONG(0);
  clear_has_winday();
}
inline ::google::protobuf::int64 OGAckWhiteList_White::winday() const {
  return winday_;
}
inline void OGAckWhiteList_White::set_winday(::google::protobuf::int64 value) {
  set_has_winday();
  winday_ = value;
}

// optional int64 winMonth = 10;
inline bool OGAckWhiteList_White::has_winmonth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckWhiteList_White::set_has_winmonth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckWhiteList_White::clear_has_winmonth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckWhiteList_White::clear_winmonth() {
  winmonth_ = GOOGLE_LONGLONG(0);
  clear_has_winmonth();
}
inline ::google::protobuf::int64 OGAckWhiteList_White::winmonth() const {
  return winmonth_;
}
inline void OGAckWhiteList_White::set_winmonth(::google::protobuf::int64 value) {
  set_has_winmonth();
  winmonth_ = value;
}

// optional int64 winTotal = 11;
inline bool OGAckWhiteList_White::has_wintotal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckWhiteList_White::set_has_wintotal() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckWhiteList_White::clear_has_wintotal() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckWhiteList_White::clear_wintotal() {
  wintotal_ = GOOGLE_LONGLONG(0);
  clear_has_wintotal();
}
inline ::google::protobuf::int64 OGAckWhiteList_White::wintotal() const {
  return wintotal_;
}
inline void OGAckWhiteList_White::set_wintotal(::google::protobuf::int64 value) {
  set_has_wintotal();
  wintotal_ = value;
}

// -------------------------------------------------------------------

// OGAckWhiteList

// repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
inline int OGAckWhiteList::whitelist_size() const {
  return whitelist_.size();
}
inline void OGAckWhiteList::clear_whitelist() {
  whitelist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckWhiteList_White& OGAckWhiteList::whitelist(int index) const {
  return whitelist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckWhiteList_White* OGAckWhiteList::mutable_whitelist(int index) {
  return whitelist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckWhiteList_White* OGAckWhiteList::add_whitelist() {
  return whitelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckWhiteList_White >&
OGAckWhiteList::whitelist() const {
  return whitelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckWhiteList_White >*
OGAckWhiteList::mutable_whitelist() {
  return &whitelist_;
}

// -------------------------------------------------------------------

// OGReqDelWhite

// optional string roleName = 1;
inline bool OGReqDelWhite::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqDelWhite::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqDelWhite::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqDelWhite::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqDelWhite::rolename() const {
  return *rolename_;
}
inline void OGReqDelWhite::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqDelWhite::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqDelWhite::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqDelWhite::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqDelWhite::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flg = 2;
inline bool OGReqDelWhite::has_flg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqDelWhite::set_has_flg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqDelWhite::clear_has_flg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqDelWhite::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGReqDelWhite::flg() const {
  return flg_;
}
inline void OGReqDelWhite::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// optional string key = 3;
inline bool OGReqDelWhite::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqDelWhite::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqDelWhite::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqDelWhite::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& OGReqDelWhite::key() const {
  return *key_;
}
inline void OGReqDelWhite::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqDelWhite::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqDelWhite::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqDelWhite::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* OGReqDelWhite::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string white = 4;
inline bool OGReqDelWhite::has_white() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqDelWhite::set_has_white() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqDelWhite::clear_has_white() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqDelWhite::clear_white() {
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    white_->clear();
  }
  clear_has_white();
}
inline const ::std::string& OGReqDelWhite::white() const {
  return *white_;
}
inline void OGReqDelWhite::set_white(const ::std::string& value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqDelWhite::set_white(const char* value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqDelWhite::set_white(const char* value, size_t size) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqDelWhite::mutable_white() {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  return white_;
}
inline ::std::string* OGReqDelWhite::release_white() {
  clear_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = white_;
    white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqSelectWhite

// optional string roleName = 1;
inline bool OGReqSelectWhite::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqSelectWhite::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqSelectWhite::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqSelectWhite::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqSelectWhite::rolename() const {
  return *rolename_;
}
inline void OGReqSelectWhite::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqSelectWhite::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqSelectWhite::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqSelectWhite::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqSelectWhite::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string key = 2;
inline bool OGReqSelectWhite::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqSelectWhite::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqSelectWhite::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqSelectWhite::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& OGReqSelectWhite::key() const {
  return *key_;
}
inline void OGReqSelectWhite::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqSelectWhite::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void OGReqSelectWhite::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqSelectWhite::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* OGReqSelectWhite::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string white = 3;
inline bool OGReqSelectWhite::has_white() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqSelectWhite::set_has_white() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqSelectWhite::clear_has_white() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqSelectWhite::clear_white() {
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    white_->clear();
  }
  clear_has_white();
}
inline const ::std::string& OGReqSelectWhite::white() const {
  return *white_;
}
inline void OGReqSelectWhite::set_white(const ::std::string& value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqSelectWhite::set_white(const char* value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGReqSelectWhite::set_white(const char* value, size_t size) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqSelectWhite::mutable_white() {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  return white_;
}
inline ::std::string* OGReqSelectWhite::release_white() {
  clear_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = white_;
    white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckSelectWhite

// optional int64 result = 1;
inline bool OGAckSelectWhite::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckSelectWhite::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckSelectWhite::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckSelectWhite::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
inline ::google::protobuf::int64 OGAckSelectWhite::result() const {
  return result_;
}
inline void OGAckSelectWhite::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
}

// optional string roleName = 2;
inline bool OGAckSelectWhite::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckSelectWhite::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckSelectWhite::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckSelectWhite::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckSelectWhite::rolename() const {
  return *rolename_;
}
inline void OGAckSelectWhite::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckSelectWhite::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckSelectWhite::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckSelectWhite::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckSelectWhite::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 winTotal = 3;
inline bool OGAckSelectWhite::has_wintotal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckSelectWhite::set_has_wintotal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckSelectWhite::clear_has_wintotal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckSelectWhite::clear_wintotal() {
  wintotal_ = GOOGLE_LONGLONG(0);
  clear_has_wintotal();
}
inline ::google::protobuf::int64 OGAckSelectWhite::wintotal() const {
  return wintotal_;
}
inline void OGAckSelectWhite::set_wintotal(::google::protobuf::int64 value) {
  set_has_wintotal();
  wintotal_ = value;
}

// optional string white = 4;
inline bool OGAckSelectWhite::has_white() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckSelectWhite::set_has_white() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckSelectWhite::clear_has_white() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckSelectWhite::clear_white() {
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    white_->clear();
  }
  clear_has_white();
}
inline const ::std::string& OGAckSelectWhite::white() const {
  return *white_;
}
inline void OGAckSelectWhite::set_white(const ::std::string& value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGAckSelectWhite::set_white(const char* value) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(value);
}
inline void OGAckSelectWhite::set_white(const char* value, size_t size) {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  white_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckSelectWhite::mutable_white() {
  set_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    white_ = new ::std::string;
  }
  return white_;
}
inline ::std::string* OGAckSelectWhite::release_white() {
  clear_has_white();
  if (white_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = white_;
    white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckPet

// optional string petName = 1;
inline bool OGAckPet::has_petname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPet::set_has_petname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPet::clear_has_petname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPet::clear_petname() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    petname_->clear();
  }
  clear_has_petname();
}
inline const ::std::string& OGAckPet::petname() const {
  return *petname_;
}
inline void OGAckPet::set_petname(const ::std::string& value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPet::set_petname(const char* value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPet::set_petname(const char* value, size_t size) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPet::mutable_petname() {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  return petname_;
}
inline ::std::string* OGAckPet::release_petname() {
  clear_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = petname_;
    petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pinzhi = 2;
inline bool OGAckPet::has_pinzhi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPet::set_has_pinzhi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPet::clear_has_pinzhi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPet::clear_pinzhi() {
  pinzhi_ = 0;
  clear_has_pinzhi();
}
inline ::google::protobuf::int32 OGAckPet::pinzhi() const {
  return pinzhi_;
}
inline void OGAckPet::set_pinzhi(::google::protobuf::int32 value) {
  set_has_pinzhi();
  pinzhi_ = value;
}

// optional int32 blood = 3;
inline bool OGAckPet::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPet::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPet::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPet::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 OGAckPet::blood() const {
  return blood_;
}
inline void OGAckPet::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional int32 attack = 4;
inline bool OGAckPet::has_attack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPet::set_has_attack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPet::clear_has_attack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPet::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 OGAckPet::attack() const {
  return attack_;
}
inline void OGAckPet::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 award = 5;
inline bool OGAckPet::has_award() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPet::set_has_award() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPet::clear_has_award() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPet::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline ::google::protobuf::int32 OGAckPet::award() const {
  return award_;
}
inline void OGAckPet::set_award(::google::protobuf::int32 value) {
  set_has_award();
  award_ = value;
}

// -------------------------------------------------------------------

// OGReqPetList

// -------------------------------------------------------------------

// OGAckPetList_Pet

// optional string petName = 1;
inline bool OGAckPetList_Pet::has_petname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetList_Pet::set_has_petname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetList_Pet::clear_has_petname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetList_Pet::clear_petname() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    petname_->clear();
  }
  clear_has_petname();
}
inline const ::std::string& OGAckPetList_Pet::petname() const {
  return *petname_;
}
inline void OGAckPetList_Pet::set_petname(const ::std::string& value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPetList_Pet::set_petname(const char* value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPetList_Pet::set_petname(const char* value, size_t size) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetList_Pet::mutable_petname() {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  return petname_;
}
inline ::std::string* OGAckPetList_Pet::release_petname() {
  clear_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = petname_;
    petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pinzhi = 2;
inline bool OGAckPetList_Pet::has_pinzhi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetList_Pet::set_has_pinzhi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetList_Pet::clear_has_pinzhi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetList_Pet::clear_pinzhi() {
  pinzhi_ = 0;
  clear_has_pinzhi();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::pinzhi() const {
  return pinzhi_;
}
inline void OGAckPetList_Pet::set_pinzhi(::google::protobuf::int32 value) {
  set_has_pinzhi();
  pinzhi_ = value;
}

// optional int32 blood = 3;
inline bool OGAckPetList_Pet::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetList_Pet::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetList_Pet::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetList_Pet::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::blood() const {
  return blood_;
}
inline void OGAckPetList_Pet::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional int32 bloodMin = 4;
inline bool OGAckPetList_Pet::has_bloodmin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetList_Pet::set_has_bloodmin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetList_Pet::clear_has_bloodmin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetList_Pet::clear_bloodmin() {
  bloodmin_ = 0;
  clear_has_bloodmin();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::bloodmin() const {
  return bloodmin_;
}
inline void OGAckPetList_Pet::set_bloodmin(::google::protobuf::int32 value) {
  set_has_bloodmin();
  bloodmin_ = value;
}

// optional int32 bloodMax = 5;
inline bool OGAckPetList_Pet::has_bloodmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPetList_Pet::set_has_bloodmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPetList_Pet::clear_has_bloodmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPetList_Pet::clear_bloodmax() {
  bloodmax_ = 0;
  clear_has_bloodmax();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::bloodmax() const {
  return bloodmax_;
}
inline void OGAckPetList_Pet::set_bloodmax(::google::protobuf::int32 value) {
  set_has_bloodmax();
  bloodmax_ = value;
}

// optional int32 bloodPlus = 6;
inline bool OGAckPetList_Pet::has_bloodplus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckPetList_Pet::set_has_bloodplus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckPetList_Pet::clear_has_bloodplus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckPetList_Pet::clear_bloodplus() {
  bloodplus_ = 0;
  clear_has_bloodplus();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::bloodplus() const {
  return bloodplus_;
}
inline void OGAckPetList_Pet::set_bloodplus(::google::protobuf::int32 value) {
  set_has_bloodplus();
  bloodplus_ = value;
}

// optional int32 attack = 7;
inline bool OGAckPetList_Pet::has_attack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckPetList_Pet::set_has_attack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckPetList_Pet::clear_has_attack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckPetList_Pet::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::attack() const {
  return attack_;
}
inline void OGAckPetList_Pet::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 attackMin = 8;
inline bool OGAckPetList_Pet::has_attackmin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckPetList_Pet::set_has_attackmin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckPetList_Pet::clear_has_attackmin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckPetList_Pet::clear_attackmin() {
  attackmin_ = 0;
  clear_has_attackmin();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::attackmin() const {
  return attackmin_;
}
inline void OGAckPetList_Pet::set_attackmin(::google::protobuf::int32 value) {
  set_has_attackmin();
  attackmin_ = value;
}

// optional int32 attackMax = 9;
inline bool OGAckPetList_Pet::has_attackmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckPetList_Pet::set_has_attackmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckPetList_Pet::clear_has_attackmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckPetList_Pet::clear_attackmax() {
  attackmax_ = 0;
  clear_has_attackmax();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::attackmax() const {
  return attackmax_;
}
inline void OGAckPetList_Pet::set_attackmax(::google::protobuf::int32 value) {
  set_has_attackmax();
  attackmax_ = value;
}

// optional int32 attackPlus = 10;
inline bool OGAckPetList_Pet::has_attackplus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckPetList_Pet::set_has_attackplus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckPetList_Pet::clear_has_attackplus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckPetList_Pet::clear_attackplus() {
  attackplus_ = 0;
  clear_has_attackplus();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::attackplus() const {
  return attackplus_;
}
inline void OGAckPetList_Pet::set_attackplus(::google::protobuf::int32 value) {
  set_has_attackplus();
  attackplus_ = value;
}

// optional int32 award = 11;
inline bool OGAckPetList_Pet::has_award() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckPetList_Pet::set_has_award() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckPetList_Pet::clear_has_award() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckPetList_Pet::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::award() const {
  return award_;
}
inline void OGAckPetList_Pet::set_award(::google::protobuf::int32 value) {
  set_has_award();
  award_ = value;
}

// optional int32 awardMin = 12;
inline bool OGAckPetList_Pet::has_awardmin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckPetList_Pet::set_has_awardmin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckPetList_Pet::clear_has_awardmin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckPetList_Pet::clear_awardmin() {
  awardmin_ = 0;
  clear_has_awardmin();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::awardmin() const {
  return awardmin_;
}
inline void OGAckPetList_Pet::set_awardmin(::google::protobuf::int32 value) {
  set_has_awardmin();
  awardmin_ = value;
}

// optional int32 awardMax = 13;
inline bool OGAckPetList_Pet::has_awardmax() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckPetList_Pet::set_has_awardmax() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckPetList_Pet::clear_has_awardmax() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckPetList_Pet::clear_awardmax() {
  awardmax_ = 0;
  clear_has_awardmax();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::awardmax() const {
  return awardmax_;
}
inline void OGAckPetList_Pet::set_awardmax(::google::protobuf::int32 value) {
  set_has_awardmax();
  awardmax_ = value;
}

// optional int32 awardPlus = 14;
inline bool OGAckPetList_Pet::has_awardplus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckPetList_Pet::set_has_awardplus() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckPetList_Pet::clear_has_awardplus() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckPetList_Pet::clear_awardplus() {
  awardplus_ = 0;
  clear_has_awardplus();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::awardplus() const {
  return awardplus_;
}
inline void OGAckPetList_Pet::set_awardplus(::google::protobuf::int32 value) {
  set_has_awardplus();
  awardplus_ = value;
}

// optional int32 level = 15;
inline bool OGAckPetList_Pet::has_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OGAckPetList_Pet::set_has_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OGAckPetList_Pet::clear_has_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OGAckPetList_Pet::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::level() const {
  return level_;
}
inline void OGAckPetList_Pet::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 16;
inline bool OGAckPetList_Pet::has_exp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OGAckPetList_Pet::set_has_exp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OGAckPetList_Pet::clear_has_exp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OGAckPetList_Pet::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::exp() const {
  return exp_;
}
inline void OGAckPetList_Pet::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 reqexp = 17;
inline bool OGAckPetList_Pet::has_reqexp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OGAckPetList_Pet::set_has_reqexp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OGAckPetList_Pet::clear_has_reqexp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OGAckPetList_Pet::clear_reqexp() {
  reqexp_ = 0;
  clear_has_reqexp();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::reqexp() const {
  return reqexp_;
}
inline void OGAckPetList_Pet::set_reqexp(::google::protobuf::int32 value) {
  set_has_reqexp();
  reqexp_ = value;
}

// optional int32 petId = 18;
inline bool OGAckPetList_Pet::has_petid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OGAckPetList_Pet::set_has_petid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OGAckPetList_Pet::clear_has_petid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OGAckPetList_Pet::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::petid() const {
  return petid_;
}
inline void OGAckPetList_Pet::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 status = 19;
inline bool OGAckPetList_Pet::has_status() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OGAckPetList_Pet::set_has_status() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OGAckPetList_Pet::clear_has_status() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OGAckPetList_Pet::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::status() const {
  return status_;
}
inline void OGAckPetList_Pet::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string petPic = 20;
inline bool OGAckPetList_Pet::has_petpic() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OGAckPetList_Pet::set_has_petpic() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OGAckPetList_Pet::clear_has_petpic() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OGAckPetList_Pet::clear_petpic() {
  if (petpic_ != &::google::protobuf::internal::kEmptyString) {
    petpic_->clear();
  }
  clear_has_petpic();
}
inline const ::std::string& OGAckPetList_Pet::petpic() const {
  return *petpic_;
}
inline void OGAckPetList_Pet::set_petpic(const ::std::string& value) {
  set_has_petpic();
  if (petpic_ == &::google::protobuf::internal::kEmptyString) {
    petpic_ = new ::std::string;
  }
  petpic_->assign(value);
}
inline void OGAckPetList_Pet::set_petpic(const char* value) {
  set_has_petpic();
  if (petpic_ == &::google::protobuf::internal::kEmptyString) {
    petpic_ = new ::std::string;
  }
  petpic_->assign(value);
}
inline void OGAckPetList_Pet::set_petpic(const char* value, size_t size) {
  set_has_petpic();
  if (petpic_ == &::google::protobuf::internal::kEmptyString) {
    petpic_ = new ::std::string;
  }
  petpic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetList_Pet::mutable_petpic() {
  set_has_petpic();
  if (petpic_ == &::google::protobuf::internal::kEmptyString) {
    petpic_ = new ::std::string;
  }
  return petpic_;
}
inline ::std::string* OGAckPetList_Pet::release_petpic() {
  clear_has_petpic();
  if (petpic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = petpic_;
    petpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 maxLev = 21;
inline bool OGAckPetList_Pet::has_maxlev() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OGAckPetList_Pet::set_has_maxlev() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OGAckPetList_Pet::clear_has_maxlev() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OGAckPetList_Pet::clear_maxlev() {
  maxlev_ = 0;
  clear_has_maxlev();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::maxlev() const {
  return maxlev_;
}
inline void OGAckPetList_Pet::set_maxlev(::google::protobuf::int32 value) {
  set_has_maxlev();
  maxlev_ = value;
}

// optional int32 csvid = 22;
inline bool OGAckPetList_Pet::has_csvid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OGAckPetList_Pet::set_has_csvid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OGAckPetList_Pet::clear_has_csvid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OGAckPetList_Pet::clear_csvid() {
  csvid_ = 0;
  clear_has_csvid();
}
inline ::google::protobuf::int32 OGAckPetList_Pet::csvid() const {
  return csvid_;
}
inline void OGAckPetList_Pet::set_csvid(::google::protobuf::int32 value) {
  set_has_csvid();
  csvid_ = value;
}

// -------------------------------------------------------------------

// OGAckPetList

// repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
inline int OGAckPetList::petlist_size() const {
  return petlist_.size();
}
inline void OGAckPetList::clear_petlist() {
  petlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckPetList_Pet& OGAckPetList::petlist(int index) const {
  return petlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckPetList_Pet* OGAckPetList::mutable_petlist(int index) {
  return petlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckPetList_Pet* OGAckPetList::add_petlist() {
  return petlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetList_Pet >&
OGAckPetList::petlist() const {
  return petlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetList_Pet >*
OGAckPetList::mutable_petlist() {
  return &petlist_;
}

// -------------------------------------------------------------------

// OGReqPetReSet

// optional int32 petId = 1;
inline bool OGReqPetReSet::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqPetReSet::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqPetReSet::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqPetReSet::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGReqPetReSet::petid() const {
  return petid_;
}
inline void OGReqPetReSet::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// OGReqPetJoinFight

// optional int32 petId = 1;
inline bool OGReqPetJoinFight::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqPetJoinFight::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqPetJoinFight::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqPetJoinFight::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGReqPetJoinFight::petid() const {
  return petid_;
}
inline void OGReqPetJoinFight::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// OGReqPetChange

// optional int32 petId = 1;
inline bool OGReqPetChange::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqPetChange::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqPetChange::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqPetChange::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGReqPetChange::petid() const {
  return petid_;
}
inline void OGReqPetChange::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// OGAckPetChange

// optional string itemName = 1;
inline bool OGAckPetChange::has_itemname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetChange::set_has_itemname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetChange::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetChange::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& OGAckPetChange::itemname() const {
  return *itemname_;
}
inline void OGAckPetChange::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckPetChange::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckPetChange::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetChange::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* OGAckPetChange::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 itemNum = 2;
inline bool OGAckPetChange::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetChange::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetChange::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetChange::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 OGAckPetChange::itemnum() const {
  return itemnum_;
}
inline void OGAckPetChange::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional string tip = 3;
inline bool OGAckPetChange::has_tip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetChange::set_has_tip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetChange::clear_has_tip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetChange::clear_tip() {
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    tip_->clear();
  }
  clear_has_tip();
}
inline const ::std::string& OGAckPetChange::tip() const {
  return *tip_;
}
inline void OGAckPetChange::set_tip(const ::std::string& value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckPetChange::set_tip(const char* value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckPetChange::set_tip(const char* value, size_t size) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetChange::mutable_tip() {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  return tip_;
}
inline ::std::string* OGAckPetChange::release_tip() {
  clear_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tip_;
    tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pic = 4;
inline bool OGAckPetChange::has_pic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetChange::set_has_pic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetChange::clear_has_pic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetChange::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckPetChange::pic() const {
  return *pic_;
}
inline void OGAckPetChange::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckPetChange::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckPetChange::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetChange::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckPetChange::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqItemChange

// optional int32 debrisItemId = 1;
inline bool OGReqItemChange::has_debrisitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqItemChange::set_has_debrisitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqItemChange::clear_has_debrisitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqItemChange::clear_debrisitemid() {
  debrisitemid_ = 0;
  clear_has_debrisitemid();
}
inline ::google::protobuf::int32 OGReqItemChange::debrisitemid() const {
  return debrisitemid_;
}
inline void OGReqItemChange::set_debrisitemid(::google::protobuf::int32 value) {
  set_has_debrisitemid();
  debrisitemid_ = value;
}

// optional int32 evolveId = 2;
inline bool OGReqItemChange::has_evolveid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqItemChange::set_has_evolveid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqItemChange::clear_has_evolveid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqItemChange::clear_evolveid() {
  evolveid_ = 0;
  clear_has_evolveid();
}
inline ::google::protobuf::int32 OGReqItemChange::evolveid() const {
  return evolveid_;
}
inline void OGReqItemChange::set_evolveid(::google::protobuf::int32 value) {
  set_has_evolveid();
  evolveid_ = value;
}

// -------------------------------------------------------------------

// OGReqItemChangeData

// -------------------------------------------------------------------

// OGAckItemChangeData_Change

// optional int32 debrisId = 1;
inline bool OGAckItemChangeData_Change::has_debrisid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckItemChangeData_Change::set_has_debrisid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckItemChangeData_Change::clear_has_debrisid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckItemChangeData_Change::clear_debrisid() {
  debrisid_ = 0;
  clear_has_debrisid();
}
inline ::google::protobuf::int32 OGAckItemChangeData_Change::debrisid() const {
  return debrisid_;
}
inline void OGAckItemChangeData_Change::set_debrisid(::google::protobuf::int32 value) {
  set_has_debrisid();
  debrisid_ = value;
}

// optional int32 needNum = 2;
inline bool OGAckItemChangeData_Change::has_neednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckItemChangeData_Change::set_has_neednum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckItemChangeData_Change::clear_has_neednum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckItemChangeData_Change::clear_neednum() {
  neednum_ = 0;
  clear_has_neednum();
}
inline ::google::protobuf::int32 OGAckItemChangeData_Change::neednum() const {
  return neednum_;
}
inline void OGAckItemChangeData_Change::set_neednum(::google::protobuf::int32 value) {
  set_has_neednum();
  neednum_ = value;
}

// optional int32 petId = 3;
inline bool OGAckItemChangeData_Change::has_petid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckItemChangeData_Change::set_has_petid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckItemChangeData_Change::clear_has_petid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckItemChangeData_Change::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGAckItemChangeData_Change::petid() const {
  return petid_;
}
inline void OGAckItemChangeData_Change::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 jilv = 4;
inline bool OGAckItemChangeData_Change::has_jilv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckItemChangeData_Change::set_has_jilv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckItemChangeData_Change::clear_has_jilv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckItemChangeData_Change::clear_jilv() {
  jilv_ = 0;
  clear_has_jilv();
}
inline ::google::protobuf::int32 OGAckItemChangeData_Change::jilv() const {
  return jilv_;
}
inline void OGAckItemChangeData_Change::set_jilv(::google::protobuf::int32 value) {
  set_has_jilv();
  jilv_ = value;
}

// -------------------------------------------------------------------

// OGAckItemChangeData

// repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
inline int OGAckItemChangeData::changelist_size() const {
  return changelist_.size();
}
inline void OGAckItemChangeData::clear_changelist() {
  changelist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckItemChangeData_Change& OGAckItemChangeData::changelist(int index) const {
  return changelist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckItemChangeData_Change* OGAckItemChangeData::mutable_changelist(int index) {
  return changelist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckItemChangeData_Change* OGAckItemChangeData::add_changelist() {
  return changelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItemChangeData_Change >&
OGAckItemChangeData::changelist() const {
  return changelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItemChangeData_Change >*
OGAckItemChangeData::mutable_changelist() {
  return &changelist_;
}

// -------------------------------------------------------------------

// OGReqPetChangeData

// -------------------------------------------------------------------

// OGAckPetChangeData_ChangeData

// optional int32 lev = 1;
inline bool OGAckPetChangeData_ChangeData::has_lev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetChangeData_ChangeData::set_has_lev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetChangeData_ChangeData::clear_has_lev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetChangeData_ChangeData::clear_lev() {
  lev_ = 0;
  clear_has_lev();
}
inline ::google::protobuf::int32 OGAckPetChangeData_ChangeData::lev() const {
  return lev_;
}
inline void OGAckPetChangeData_ChangeData::set_lev(::google::protobuf::int32 value) {
  set_has_lev();
  lev_ = value;
}

// optional int32 min = 2;
inline bool OGAckPetChangeData_ChangeData::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetChangeData_ChangeData::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetChangeData_ChangeData::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetChangeData_ChangeData::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 OGAckPetChangeData_ChangeData::min() const {
  return min_;
}
inline void OGAckPetChangeData_ChangeData::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
}

// optional int32 max = 3;
inline bool OGAckPetChangeData_ChangeData::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetChangeData_ChangeData::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetChangeData_ChangeData::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetChangeData_ChangeData::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline ::google::protobuf::int32 OGAckPetChangeData_ChangeData::max() const {
  return max_;
}
inline void OGAckPetChangeData_ChangeData::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
}

// -------------------------------------------------------------------

// OGAckPetChangeData

// repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
inline int OGAckPetChangeData::datalist_size() const {
  return datalist_.size();
}
inline void OGAckPetChangeData::clear_datalist() {
  datalist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData& OGAckPetChangeData::datalist(int index) const {
  return datalist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData* OGAckPetChangeData::mutable_datalist(int index) {
  return datalist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData* OGAckPetChangeData::add_datalist() {
  return datalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData >&
OGAckPetChangeData::datalist() const {
  return datalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetChangeData_ChangeData >*
OGAckPetChangeData::mutable_datalist() {
  return &datalist_;
}

// -------------------------------------------------------------------

// OGAckItemChange

// optional int32 result = 1;
inline bool OGAckItemChange::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckItemChange::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckItemChange::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckItemChange::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckItemChange::result() const {
  return result_;
}
inline void OGAckItemChange::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string pic = 2;
inline bool OGAckItemChange::has_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckItemChange::set_has_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckItemChange::clear_has_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckItemChange::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckItemChange::pic() const {
  return *pic_;
}
inline void OGAckItemChange::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckItemChange::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckItemChange::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckItemChange::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckItemChange::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 evolveFld = 3;
inline bool OGAckItemChange::has_evolvefld() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckItemChange::set_has_evolvefld() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckItemChange::clear_has_evolvefld() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckItemChange::clear_evolvefld() {
  evolvefld_ = 0;
  clear_has_evolvefld();
}
inline ::google::protobuf::int32 OGAckItemChange::evolvefld() const {
  return evolvefld_;
}
inline void OGAckItemChange::set_evolvefld(::google::protobuf::int32 value) {
  set_has_evolvefld();
  evolvefld_ = value;
}

// optional int32 petId = 4;
inline bool OGAckItemChange::has_petid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckItemChange::set_has_petid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckItemChange::clear_has_petid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckItemChange::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGAckItemChange::petid() const {
  return petid_;
}
inline void OGAckItemChange::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// OGAckPetReSet

// optional int32 petId = 1;
inline bool OGAckPetReSet::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetReSet::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetReSet::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetReSet::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 OGAckPetReSet::petid() const {
  return petid_;
}
inline void OGAckPetReSet::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 blood = 2;
inline bool OGAckPetReSet::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetReSet::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetReSet::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetReSet::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 OGAckPetReSet::blood() const {
  return blood_;
}
inline void OGAckPetReSet::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional int32 attack = 3;
inline bool OGAckPetReSet::has_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetReSet::set_has_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetReSet::clear_has_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetReSet::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 OGAckPetReSet::attack() const {
  return attack_;
}
inline void OGAckPetReSet::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 award = 4;
inline bool OGAckPetReSet::has_award() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetReSet::set_has_award() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetReSet::clear_has_award() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetReSet::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline ::google::protobuf::int32 OGAckPetReSet::award() const {
  return award_;
}
inline void OGAckPetReSet::set_award(::google::protobuf::int32 value) {
  set_has_award();
  award_ = value;
}

// -------------------------------------------------------------------

// OGAckPetGridOnList_PetGrid

// optional int32 id = 1;
inline bool OGAckPetGridOnList_PetGrid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetGridOnList_PetGrid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetGridOnList_PetGrid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetGridOnList_PetGrid::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OGAckPetGridOnList_PetGrid::id() const {
  return id_;
}
inline void OGAckPetGridOnList_PetGrid::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 grid = 2;
inline bool OGAckPetGridOnList_PetGrid::has_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetGridOnList_PetGrid::set_has_grid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetGridOnList_PetGrid::clear_has_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetGridOnList_PetGrid::clear_grid() {
  grid_ = 0;
  clear_has_grid();
}
inline ::google::protobuf::int32 OGAckPetGridOnList_PetGrid::grid() const {
  return grid_;
}
inline void OGAckPetGridOnList_PetGrid::set_grid(::google::protobuf::int32 value) {
  set_has_grid();
  grid_ = value;
}

// optional string tips = 3;
inline bool OGAckPetGridOnList_PetGrid::has_tips() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetGridOnList_PetGrid::set_has_tips() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetGridOnList_PetGrid::clear_has_tips() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetGridOnList_PetGrid::clear_tips() {
  if (tips_ != &::google::protobuf::internal::kEmptyString) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& OGAckPetGridOnList_PetGrid::tips() const {
  return *tips_;
}
inline void OGAckPetGridOnList_PetGrid::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::kEmptyString) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
}
inline void OGAckPetGridOnList_PetGrid::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::kEmptyString) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
}
inline void OGAckPetGridOnList_PetGrid::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::kEmptyString) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetGridOnList_PetGrid::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::kEmptyString) {
    tips_ = new ::std::string;
  }
  return tips_;
}
inline ::std::string* OGAckPetGridOnList_PetGrid::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lev = 4;
inline bool OGAckPetGridOnList_PetGrid::has_lev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetGridOnList_PetGrid::set_has_lev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetGridOnList_PetGrid::clear_has_lev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetGridOnList_PetGrid::clear_lev() {
  lev_ = 0;
  clear_has_lev();
}
inline ::google::protobuf::int32 OGAckPetGridOnList_PetGrid::lev() const {
  return lev_;
}
inline void OGAckPetGridOnList_PetGrid::set_lev(::google::protobuf::int32 value) {
  set_has_lev();
  lev_ = value;
}

// optional int64 gold = 5;
inline bool OGAckPetGridOnList_PetGrid::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPetGridOnList_PetGrid::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPetGridOnList_PetGrid::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPetGridOnList_PetGrid::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckPetGridOnList_PetGrid::gold() const {
  return gold_;
}
inline void OGAckPetGridOnList_PetGrid::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// OGAckPetGridOnList

// repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
inline int OGAckPetGridOnList::petgridlist_size() const {
  return petgridlist_.size();
}
inline void OGAckPetGridOnList::clear_petgridlist() {
  petgridlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid& OGAckPetGridOnList::petgridlist(int index) const {
  return petgridlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid* OGAckPetGridOnList::mutable_petgridlist(int index) {
  return petgridlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid* OGAckPetGridOnList::add_petgridlist() {
  return petgridlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid >&
OGAckPetGridOnList::petgridlist() const {
  return petgridlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGridOnList_PetGrid >*
OGAckPetGridOnList::mutable_petgridlist() {
  return &petgridlist_;
}

// -------------------------------------------------------------------

// OGReqPetGrid

// -------------------------------------------------------------------

// OGAckPage

// optional int32 state = 1;
inline bool OGAckPage::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPage::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPage::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPage::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 OGAckPage::state() const {
  return state_;
}
inline void OGAckPage::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// OGReqPetFight

// -------------------------------------------------------------------

// OGAckPetFightResult

// optional int32 result = 1;
inline bool OGAckPetFightResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetFightResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetFightResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetFightResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckPetFightResult::result() const {
  return result_;
}
inline void OGAckPetFightResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 winResult = 2;
inline bool OGAckPetFightResult::has_winresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetFightResult::set_has_winresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetFightResult::clear_has_winresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetFightResult::clear_winresult() {
  winresult_ = 0;
  clear_has_winresult();
}
inline ::google::protobuf::int32 OGAckPetFightResult::winresult() const {
  return winresult_;
}
inline void OGAckPetFightResult::set_winresult(::google::protobuf::int32 value) {
  set_has_winresult();
  winresult_ = value;
}

// optional int32 petSkill = 3;
inline bool OGAckPetFightResult::has_petskill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetFightResult::set_has_petskill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetFightResult::clear_has_petskill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetFightResult::clear_petskill() {
  petskill_ = 0;
  clear_has_petskill();
}
inline ::google::protobuf::int32 OGAckPetFightResult::petskill() const {
  return petskill_;
}
inline void OGAckPetFightResult::set_petskill(::google::protobuf::int32 value) {
  set_has_petskill();
  petskill_ = value;
}

// optional int32 petJoinNum = 4;
inline bool OGAckPetFightResult::has_petjoinnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetFightResult::set_has_petjoinnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetFightResult::clear_has_petjoinnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetFightResult::clear_petjoinnum() {
  petjoinnum_ = 0;
  clear_has_petjoinnum();
}
inline ::google::protobuf::int32 OGAckPetFightResult::petjoinnum() const {
  return petjoinnum_;
}
inline void OGAckPetFightResult::set_petjoinnum(::google::protobuf::int32 value) {
  set_has_petjoinnum();
  petjoinnum_ = value;
}

// optional int32 petData = 5;
inline bool OGAckPetFightResult::has_petdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPetFightResult::set_has_petdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPetFightResult::clear_has_petdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPetFightResult::clear_petdata() {
  petdata_ = 0;
  clear_has_petdata();
}
inline ::google::protobuf::int32 OGAckPetFightResult::petdata() const {
  return petdata_;
}
inline void OGAckPetFightResult::set_petdata(::google::protobuf::int32 value) {
  set_has_petdata();
  petdata_ = value;
}

// optional int32 bossSkill = 6;
inline bool OGAckPetFightResult::has_bossskill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckPetFightResult::set_has_bossskill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckPetFightResult::clear_has_bossskill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckPetFightResult::clear_bossskill() {
  bossskill_ = 0;
  clear_has_bossskill();
}
inline ::google::protobuf::int32 OGAckPetFightResult::bossskill() const {
  return bossskill_;
}
inline void OGAckPetFightResult::set_bossskill(::google::protobuf::int32 value) {
  set_has_bossskill();
  bossskill_ = value;
}

// optional int32 bossJoinNum = 7;
inline bool OGAckPetFightResult::has_bossjoinnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckPetFightResult::set_has_bossjoinnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckPetFightResult::clear_has_bossjoinnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckPetFightResult::clear_bossjoinnum() {
  bossjoinnum_ = 0;
  clear_has_bossjoinnum();
}
inline ::google::protobuf::int32 OGAckPetFightResult::bossjoinnum() const {
  return bossjoinnum_;
}
inline void OGAckPetFightResult::set_bossjoinnum(::google::protobuf::int32 value) {
  set_has_bossjoinnum();
  bossjoinnum_ = value;
}

// optional int32 bossData = 8;
inline bool OGAckPetFightResult::has_bossdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckPetFightResult::set_has_bossdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckPetFightResult::clear_has_bossdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckPetFightResult::clear_bossdata() {
  bossdata_ = 0;
  clear_has_bossdata();
}
inline ::google::protobuf::int32 OGAckPetFightResult::bossdata() const {
  return bossdata_;
}
inline void OGAckPetFightResult::set_bossdata(::google::protobuf::int32 value) {
  set_has_bossdata();
  bossdata_ = value;
}

// optional int32 petTimes = 9;
inline bool OGAckPetFightResult::has_pettimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckPetFightResult::set_has_pettimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckPetFightResult::clear_has_pettimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckPetFightResult::clear_pettimes() {
  pettimes_ = 0;
  clear_has_pettimes();
}
inline ::google::protobuf::int32 OGAckPetFightResult::pettimes() const {
  return pettimes_;
}
inline void OGAckPetFightResult::set_pettimes(::google::protobuf::int32 value) {
  set_has_pettimes();
  pettimes_ = value;
}

// optional int32 petEffect = 10;
inline bool OGAckPetFightResult::has_peteffect() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckPetFightResult::set_has_peteffect() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckPetFightResult::clear_has_peteffect() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckPetFightResult::clear_peteffect() {
  peteffect_ = 0;
  clear_has_peteffect();
}
inline ::google::protobuf::int32 OGAckPetFightResult::peteffect() const {
  return peteffect_;
}
inline void OGAckPetFightResult::set_peteffect(::google::protobuf::int32 value) {
  set_has_peteffect();
  peteffect_ = value;
}

// optional int32 bossTimes = 11;
inline bool OGAckPetFightResult::has_bosstimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckPetFightResult::set_has_bosstimes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckPetFightResult::clear_has_bosstimes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckPetFightResult::clear_bosstimes() {
  bosstimes_ = 0;
  clear_has_bosstimes();
}
inline ::google::protobuf::int32 OGAckPetFightResult::bosstimes() const {
  return bosstimes_;
}
inline void OGAckPetFightResult::set_bosstimes(::google::protobuf::int32 value) {
  set_has_bosstimes();
  bosstimes_ = value;
}

// optional int32 bossEffect = 12;
inline bool OGAckPetFightResult::has_bosseffect() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckPetFightResult::set_has_bosseffect() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckPetFightResult::clear_has_bosseffect() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckPetFightResult::clear_bosseffect() {
  bosseffect_ = 0;
  clear_has_bosseffect();
}
inline ::google::protobuf::int32 OGAckPetFightResult::bosseffect() const {
  return bosseffect_;
}
inline void OGAckPetFightResult::set_bosseffect(::google::protobuf::int32 value) {
  set_has_bosseffect();
  bosseffect_ = value;
}

// optional int32 page = 13;
inline bool OGAckPetFightResult::has_page() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckPetFightResult::set_has_page() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckPetFightResult::clear_has_page() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckPetFightResult::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OGAckPetFightResult::page() const {
  return page_;
}
inline void OGAckPetFightResult::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// OGReqPetFlee

// -------------------------------------------------------------------

// OGReqPetGetAward

// -------------------------------------------------------------------

// OGAckPetGetAward_Award

// optional int32 type = 1;
inline bool OGAckPetGetAward_Award::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetGetAward_Award::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetGetAward_Award::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckPetGetAward_Award::type() const {
  return type_;
}
inline void OGAckPetGetAward_Award::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 num = 2;
inline bool OGAckPetGetAward_Award::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetGetAward_Award::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetGetAward_Award::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::int64 OGAckPetGetAward_Award::num() const {
  return num_;
}
inline void OGAckPetGetAward_Award::set_num(::google::protobuf::int64 value) {
  set_has_num();
  num_ = value;
}

// optional int32 ok = 3;
inline bool OGAckPetGetAward_Award::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetGetAward_Award::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetGetAward_Award::clear_ok() {
  ok_ = 0;
  clear_has_ok();
}
inline ::google::protobuf::int32 OGAckPetGetAward_Award::ok() const {
  return ok_;
}
inline void OGAckPetGetAward_Award::set_ok(::google::protobuf::int32 value) {
  set_has_ok();
  ok_ = value;
}

// optional string petName = 4;
inline bool OGAckPetGetAward_Award::has_petname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_petname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckPetGetAward_Award::clear_has_petname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckPetGetAward_Award::clear_petname() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    petname_->clear();
  }
  clear_has_petname();
}
inline const ::std::string& OGAckPetGetAward_Award::petname() const {
  return *petname_;
}
inline void OGAckPetGetAward_Award::set_petname(const ::std::string& value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPetGetAward_Award::set_petname(const char* value) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(value);
}
inline void OGAckPetGetAward_Award::set_petname(const char* value, size_t size) {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  petname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetGetAward_Award::mutable_petname() {
  set_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    petname_ = new ::std::string;
  }
  return petname_;
}
inline ::std::string* OGAckPetGetAward_Award::release_petname() {
  clear_has_petname();
  if (petname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = petname_;
    petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pic = 5;
inline bool OGAckPetGetAward_Award::has_pic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_pic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckPetGetAward_Award::clear_has_pic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckPetGetAward_Award::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckPetGetAward_Award::pic() const {
  return *pic_;
}
inline void OGAckPetGetAward_Award::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckPetGetAward_Award::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckPetGetAward_Award::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetGetAward_Award::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckPetGetAward_Award::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 itemId = 6;
inline bool OGAckPetGetAward_Award::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckPetGetAward_Award::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckPetGetAward_Award::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckPetGetAward_Award::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckPetGetAward_Award::itemid() const {
  return itemid_;
}
inline void OGAckPetGetAward_Award::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// OGAckPetGetAward

// repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
inline int OGAckPetGetAward::awardlist_size() const {
  return awardlist_.size();
}
inline void OGAckPetGetAward::clear_awardlist() {
  awardlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckPetGetAward_Award& OGAckPetGetAward::awardlist(int index) const {
  return awardlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckPetGetAward_Award* OGAckPetGetAward::mutable_awardlist(int index) {
  return awardlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckPetGetAward_Award* OGAckPetGetAward::add_awardlist() {
  return awardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGetAward_Award >&
OGAckPetGetAward::awardlist() const {
  return awardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckPetGetAward_Award >*
OGAckPetGetAward::mutable_awardlist() {
  return &awardlist_;
}

// optional int32 awardFlg = 2;
inline bool OGAckPetGetAward::has_awardflg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetGetAward::set_has_awardflg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetGetAward::clear_has_awardflg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetGetAward::clear_awardflg() {
  awardflg_ = 0;
  clear_has_awardflg();
}
inline ::google::protobuf::int32 OGAckPetGetAward::awardflg() const {
  return awardflg_;
}
inline void OGAckPetGetAward::set_awardflg(::google::protobuf::int32 value) {
  set_has_awardflg();
  awardflg_ = value;
}

// optional string roleName = 3;
inline bool OGAckPetGetAward::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckPetGetAward::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckPetGetAward::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckPetGetAward::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckPetGetAward::rolename() const {
  return *rolename_;
}
inline void OGAckPetGetAward::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckPetGetAward::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckPetGetAward::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPetGetAward::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckPetGetAward::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckRankList_Rank

// optional int32 rankId = 1;
inline bool OGAckRankList_Rank::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRankList_Rank::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRankList_Rank::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRankList_Rank::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 OGAckRankList_Rank::rankid() const {
  return rankid_;
}
inline void OGAckRankList_Rank::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional string roleName = 2;
inline bool OGAckRankList_Rank::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRankList_Rank::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRankList_Rank::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRankList_Rank::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckRankList_Rank::rolename() const {
  return *rolename_;
}
inline void OGAckRankList_Rank::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRankList_Rank::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRankList_Rank::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRankList_Rank::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckRankList_Rank::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 getGold = 3;
inline bool OGAckRankList_Rank::has_getgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRankList_Rank::set_has_getgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRankList_Rank::clear_has_getgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRankList_Rank::clear_getgold() {
  getgold_ = GOOGLE_LONGLONG(0);
  clear_has_getgold();
}
inline ::google::protobuf::int64 OGAckRankList_Rank::getgold() const {
  return getgold_;
}
inline void OGAckRankList_Rank::set_getgold(::google::protobuf::int64 value) {
  set_has_getgold();
  getgold_ = value;
}

// -------------------------------------------------------------------

// OGAckRankList

// repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
inline int OGAckRankList::ranklist_size() const {
  return ranklist_.size();
}
inline void OGAckRankList::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRankList_Rank& OGAckRankList::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRankList_Rank* OGAckRankList::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRankList_Rank* OGAckRankList::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRankList_Rank >&
OGAckRankList::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRankList_Rank >*
OGAckRankList::mutable_ranklist() {
  return &ranklist_;
}

// optional int32 type = 2;
inline bool OGAckRankList::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRankList::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRankList::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRankList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckRankList::type() const {
  return type_;
}
inline void OGAckRankList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// OGAckRank_Rank

// optional int32 rankId = 1;
inline bool OGAckRank_Rank::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRank_Rank::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRank_Rank::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRank_Rank::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 OGAckRank_Rank::rankid() const {
  return rankid_;
}
inline void OGAckRank_Rank::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional string roleName = 2;
inline bool OGAckRank_Rank::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRank_Rank::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRank_Rank::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRank_Rank::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckRank_Rank::rolename() const {
  return *rolename_;
}
inline void OGAckRank_Rank::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRank_Rank::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRank_Rank::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank_Rank::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckRank_Rank::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 getGold = 3;
inline bool OGAckRank_Rank::has_getgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRank_Rank::set_has_getgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRank_Rank::clear_has_getgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRank_Rank::clear_getgold() {
  getgold_ = GOOGLE_LONGLONG(0);
  clear_has_getgold();
}
inline ::google::protobuf::int64 OGAckRank_Rank::getgold() const {
  return getgold_;
}
inline void OGAckRank_Rank::set_getgold(::google::protobuf::int64 value) {
  set_has_getgold();
  getgold_ = value;
}

// -------------------------------------------------------------------

// OGAckRank

// repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
inline int OGAckRank::ranklista_size() const {
  return ranklista_.size();
}
inline void OGAckRank::clear_ranklista() {
  ranklista_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRank_Rank& OGAckRank::ranklista(int index) const {
  return ranklista_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::mutable_ranklista(int index) {
  return ranklista_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::add_ranklista() {
  return ranklista_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
OGAckRank::ranklista() const {
  return ranklista_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
OGAckRank::mutable_ranklista() {
  return &ranklista_;
}

// repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
inline int OGAckRank::ranklistb_size() const {
  return ranklistb_.size();
}
inline void OGAckRank::clear_ranklistb() {
  ranklistb_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRank_Rank& OGAckRank::ranklistb(int index) const {
  return ranklistb_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::mutable_ranklistb(int index) {
  return ranklistb_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::add_ranklistb() {
  return ranklistb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
OGAckRank::ranklistb() const {
  return ranklistb_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
OGAckRank::mutable_ranklistb() {
  return &ranklistb_;
}

// optional string roleName = 3;
inline bool OGAckRank::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRank::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRank::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRank::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckRank::rolename() const {
  return *rolename_;
}
inline void OGAckRank::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRank::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckRank::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckRank::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 aNum = 4;
inline bool OGAckRank::has_anum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRank::set_has_anum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRank::clear_has_anum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRank::clear_anum() {
  anum_ = 0;
  clear_has_anum();
}
inline ::google::protobuf::int32 OGAckRank::anum() const {
  return anum_;
}
inline void OGAckRank::set_anum(::google::protobuf::int32 value) {
  set_has_anum();
  anum_ = value;
}

// optional int64 aGold = 5;
inline bool OGAckRank::has_agold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckRank::set_has_agold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckRank::clear_has_agold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckRank::clear_agold() {
  agold_ = GOOGLE_LONGLONG(0);
  clear_has_agold();
}
inline ::google::protobuf::int64 OGAckRank::agold() const {
  return agold_;
}
inline void OGAckRank::set_agold(::google::protobuf::int64 value) {
  set_has_agold();
  agold_ = value;
}

// optional string aRoleName = 6;
inline bool OGAckRank::has_arolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckRank::set_has_arolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckRank::clear_has_arolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckRank::clear_arolename() {
  if (arolename_ != &::google::protobuf::internal::kEmptyString) {
    arolename_->clear();
  }
  clear_has_arolename();
}
inline const ::std::string& OGAckRank::arolename() const {
  return *arolename_;
}
inline void OGAckRank::set_arolename(const ::std::string& value) {
  set_has_arolename();
  if (arolename_ == &::google::protobuf::internal::kEmptyString) {
    arolename_ = new ::std::string;
  }
  arolename_->assign(value);
}
inline void OGAckRank::set_arolename(const char* value) {
  set_has_arolename();
  if (arolename_ == &::google::protobuf::internal::kEmptyString) {
    arolename_ = new ::std::string;
  }
  arolename_->assign(value);
}
inline void OGAckRank::set_arolename(const char* value, size_t size) {
  set_has_arolename();
  if (arolename_ == &::google::protobuf::internal::kEmptyString) {
    arolename_ = new ::std::string;
  }
  arolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_arolename() {
  set_has_arolename();
  if (arolename_ == &::google::protobuf::internal::kEmptyString) {
    arolename_ = new ::std::string;
  }
  return arolename_;
}
inline ::std::string* OGAckRank::release_arolename() {
  clear_has_arolename();
  if (arolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arolename_;
    arolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bNum = 7;
inline bool OGAckRank::has_bnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckRank::set_has_bnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckRank::clear_has_bnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckRank::clear_bnum() {
  bnum_ = 0;
  clear_has_bnum();
}
inline ::google::protobuf::int32 OGAckRank::bnum() const {
  return bnum_;
}
inline void OGAckRank::set_bnum(::google::protobuf::int32 value) {
  set_has_bnum();
  bnum_ = value;
}

// optional int64 bGold = 8;
inline bool OGAckRank::has_bgold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckRank::set_has_bgold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckRank::clear_has_bgold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckRank::clear_bgold() {
  bgold_ = GOOGLE_LONGLONG(0);
  clear_has_bgold();
}
inline ::google::protobuf::int64 OGAckRank::bgold() const {
  return bgold_;
}
inline void OGAckRank::set_bgold(::google::protobuf::int64 value) {
  set_has_bgold();
  bgold_ = value;
}

// optional string bRoleName = 9;
inline bool OGAckRank::has_brolename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckRank::set_has_brolename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckRank::clear_has_brolename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckRank::clear_brolename() {
  if (brolename_ != &::google::protobuf::internal::kEmptyString) {
    brolename_->clear();
  }
  clear_has_brolename();
}
inline const ::std::string& OGAckRank::brolename() const {
  return *brolename_;
}
inline void OGAckRank::set_brolename(const ::std::string& value) {
  set_has_brolename();
  if (brolename_ == &::google::protobuf::internal::kEmptyString) {
    brolename_ = new ::std::string;
  }
  brolename_->assign(value);
}
inline void OGAckRank::set_brolename(const char* value) {
  set_has_brolename();
  if (brolename_ == &::google::protobuf::internal::kEmptyString) {
    brolename_ = new ::std::string;
  }
  brolename_->assign(value);
}
inline void OGAckRank::set_brolename(const char* value, size_t size) {
  set_has_brolename();
  if (brolename_ == &::google::protobuf::internal::kEmptyString) {
    brolename_ = new ::std::string;
  }
  brolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_brolename() {
  set_has_brolename();
  if (brolename_ == &::google::protobuf::internal::kEmptyString) {
    brolename_ = new ::std::string;
  }
  return brolename_;
}
inline ::std::string* OGAckRank::release_brolename() {
  clear_has_brolename();
  if (brolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brolename_;
    brolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
inline int OGAckRank::lastweeka_size() const {
  return lastweeka_.size();
}
inline void OGAckRank::clear_lastweeka() {
  lastweeka_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRank_Rank& OGAckRank::lastweeka(int index) const {
  return lastweeka_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::mutable_lastweeka(int index) {
  return lastweeka_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::add_lastweeka() {
  return lastweeka_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
OGAckRank::lastweeka() const {
  return lastweeka_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
OGAckRank::mutable_lastweeka() {
  return &lastweeka_;
}

// repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
inline int OGAckRank::lastweekb_size() const {
  return lastweekb_.size();
}
inline void OGAckRank::clear_lastweekb() {
  lastweekb_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRank_Rank& OGAckRank::lastweekb(int index) const {
  return lastweekb_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::mutable_lastweekb(int index) {
  return lastweekb_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::add_lastweekb() {
  return lastweekb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
OGAckRank::lastweekb() const {
  return lastweekb_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
OGAckRank::mutable_lastweekb() {
  return &lastweekb_;
}

// repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
inline int OGAckRank::ranklistc_size() const {
  return ranklistc_.size();
}
inline void OGAckRank::clear_ranklistc() {
  ranklistc_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckRank_Rank& OGAckRank::ranklistc(int index) const {
  return ranklistc_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::mutable_ranklistc(int index) {
  return ranklistc_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckRank_Rank* OGAckRank::add_ranklistc() {
  return ranklistc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >&
OGAckRank::ranklistc() const {
  return ranklistc_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckRank_Rank >*
OGAckRank::mutable_ranklistc() {
  return &ranklistc_;
}

// optional string cRankName = 13;
inline bool OGAckRank::has_crankname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckRank::set_has_crankname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckRank::clear_has_crankname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckRank::clear_crankname() {
  if (crankname_ != &::google::protobuf::internal::kEmptyString) {
    crankname_->clear();
  }
  clear_has_crankname();
}
inline const ::std::string& OGAckRank::crankname() const {
  return *crankname_;
}
inline void OGAckRank::set_crankname(const ::std::string& value) {
  set_has_crankname();
  if (crankname_ == &::google::protobuf::internal::kEmptyString) {
    crankname_ = new ::std::string;
  }
  crankname_->assign(value);
}
inline void OGAckRank::set_crankname(const char* value) {
  set_has_crankname();
  if (crankname_ == &::google::protobuf::internal::kEmptyString) {
    crankname_ = new ::std::string;
  }
  crankname_->assign(value);
}
inline void OGAckRank::set_crankname(const char* value, size_t size) {
  set_has_crankname();
  if (crankname_ == &::google::protobuf::internal::kEmptyString) {
    crankname_ = new ::std::string;
  }
  crankname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_crankname() {
  set_has_crankname();
  if (crankname_ == &::google::protobuf::internal::kEmptyString) {
    crankname_ = new ::std::string;
  }
  return crankname_;
}
inline ::std::string* OGAckRank::release_crankname() {
  clear_has_crankname();
  if (crankname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = crankname_;
    crankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string aRankTip = 14;
inline bool OGAckRank::has_aranktip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckRank::set_has_aranktip() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckRank::clear_has_aranktip() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckRank::clear_aranktip() {
  if (aranktip_ != &::google::protobuf::internal::kEmptyString) {
    aranktip_->clear();
  }
  clear_has_aranktip();
}
inline const ::std::string& OGAckRank::aranktip() const {
  return *aranktip_;
}
inline void OGAckRank::set_aranktip(const ::std::string& value) {
  set_has_aranktip();
  if (aranktip_ == &::google::protobuf::internal::kEmptyString) {
    aranktip_ = new ::std::string;
  }
  aranktip_->assign(value);
}
inline void OGAckRank::set_aranktip(const char* value) {
  set_has_aranktip();
  if (aranktip_ == &::google::protobuf::internal::kEmptyString) {
    aranktip_ = new ::std::string;
  }
  aranktip_->assign(value);
}
inline void OGAckRank::set_aranktip(const char* value, size_t size) {
  set_has_aranktip();
  if (aranktip_ == &::google::protobuf::internal::kEmptyString) {
    aranktip_ = new ::std::string;
  }
  aranktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_aranktip() {
  set_has_aranktip();
  if (aranktip_ == &::google::protobuf::internal::kEmptyString) {
    aranktip_ = new ::std::string;
  }
  return aranktip_;
}
inline ::std::string* OGAckRank::release_aranktip() {
  clear_has_aranktip();
  if (aranktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aranktip_;
    aranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bRankTip = 15;
inline bool OGAckRank::has_branktip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OGAckRank::set_has_branktip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OGAckRank::clear_has_branktip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OGAckRank::clear_branktip() {
  if (branktip_ != &::google::protobuf::internal::kEmptyString) {
    branktip_->clear();
  }
  clear_has_branktip();
}
inline const ::std::string& OGAckRank::branktip() const {
  return *branktip_;
}
inline void OGAckRank::set_branktip(const ::std::string& value) {
  set_has_branktip();
  if (branktip_ == &::google::protobuf::internal::kEmptyString) {
    branktip_ = new ::std::string;
  }
  branktip_->assign(value);
}
inline void OGAckRank::set_branktip(const char* value) {
  set_has_branktip();
  if (branktip_ == &::google::protobuf::internal::kEmptyString) {
    branktip_ = new ::std::string;
  }
  branktip_->assign(value);
}
inline void OGAckRank::set_branktip(const char* value, size_t size) {
  set_has_branktip();
  if (branktip_ == &::google::protobuf::internal::kEmptyString) {
    branktip_ = new ::std::string;
  }
  branktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_branktip() {
  set_has_branktip();
  if (branktip_ == &::google::protobuf::internal::kEmptyString) {
    branktip_ = new ::std::string;
  }
  return branktip_;
}
inline ::std::string* OGAckRank::release_branktip() {
  clear_has_branktip();
  if (branktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branktip_;
    branktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cRankTip = 16;
inline bool OGAckRank::has_cranktip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OGAckRank::set_has_cranktip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OGAckRank::clear_has_cranktip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OGAckRank::clear_cranktip() {
  if (cranktip_ != &::google::protobuf::internal::kEmptyString) {
    cranktip_->clear();
  }
  clear_has_cranktip();
}
inline const ::std::string& OGAckRank::cranktip() const {
  return *cranktip_;
}
inline void OGAckRank::set_cranktip(const ::std::string& value) {
  set_has_cranktip();
  if (cranktip_ == &::google::protobuf::internal::kEmptyString) {
    cranktip_ = new ::std::string;
  }
  cranktip_->assign(value);
}
inline void OGAckRank::set_cranktip(const char* value) {
  set_has_cranktip();
  if (cranktip_ == &::google::protobuf::internal::kEmptyString) {
    cranktip_ = new ::std::string;
  }
  cranktip_->assign(value);
}
inline void OGAckRank::set_cranktip(const char* value, size_t size) {
  set_has_cranktip();
  if (cranktip_ == &::google::protobuf::internal::kEmptyString) {
    cranktip_ = new ::std::string;
  }
  cranktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_cranktip() {
  set_has_cranktip();
  if (cranktip_ == &::google::protobuf::internal::kEmptyString) {
    cranktip_ = new ::std::string;
  }
  return cranktip_;
}
inline ::std::string* OGAckRank::release_cranktip() {
  clear_has_cranktip();
  if (cranktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cranktip_;
    cranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string laRankTip = 17;
inline bool OGAckRank::has_laranktip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OGAckRank::set_has_laranktip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OGAckRank::clear_has_laranktip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OGAckRank::clear_laranktip() {
  if (laranktip_ != &::google::protobuf::internal::kEmptyString) {
    laranktip_->clear();
  }
  clear_has_laranktip();
}
inline const ::std::string& OGAckRank::laranktip() const {
  return *laranktip_;
}
inline void OGAckRank::set_laranktip(const ::std::string& value) {
  set_has_laranktip();
  if (laranktip_ == &::google::protobuf::internal::kEmptyString) {
    laranktip_ = new ::std::string;
  }
  laranktip_->assign(value);
}
inline void OGAckRank::set_laranktip(const char* value) {
  set_has_laranktip();
  if (laranktip_ == &::google::protobuf::internal::kEmptyString) {
    laranktip_ = new ::std::string;
  }
  laranktip_->assign(value);
}
inline void OGAckRank::set_laranktip(const char* value, size_t size) {
  set_has_laranktip();
  if (laranktip_ == &::google::protobuf::internal::kEmptyString) {
    laranktip_ = new ::std::string;
  }
  laranktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_laranktip() {
  set_has_laranktip();
  if (laranktip_ == &::google::protobuf::internal::kEmptyString) {
    laranktip_ = new ::std::string;
  }
  return laranktip_;
}
inline ::std::string* OGAckRank::release_laranktip() {
  clear_has_laranktip();
  if (laranktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = laranktip_;
    laranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string lbRankTip = 18;
inline bool OGAckRank::has_lbranktip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OGAckRank::set_has_lbranktip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OGAckRank::clear_has_lbranktip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OGAckRank::clear_lbranktip() {
  if (lbranktip_ != &::google::protobuf::internal::kEmptyString) {
    lbranktip_->clear();
  }
  clear_has_lbranktip();
}
inline const ::std::string& OGAckRank::lbranktip() const {
  return *lbranktip_;
}
inline void OGAckRank::set_lbranktip(const ::std::string& value) {
  set_has_lbranktip();
  if (lbranktip_ == &::google::protobuf::internal::kEmptyString) {
    lbranktip_ = new ::std::string;
  }
  lbranktip_->assign(value);
}
inline void OGAckRank::set_lbranktip(const char* value) {
  set_has_lbranktip();
  if (lbranktip_ == &::google::protobuf::internal::kEmptyString) {
    lbranktip_ = new ::std::string;
  }
  lbranktip_->assign(value);
}
inline void OGAckRank::set_lbranktip(const char* value, size_t size) {
  set_has_lbranktip();
  if (lbranktip_ == &::google::protobuf::internal::kEmptyString) {
    lbranktip_ = new ::std::string;
  }
  lbranktip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckRank::mutable_lbranktip() {
  set_has_lbranktip();
  if (lbranktip_ == &::google::protobuf::internal::kEmptyString) {
    lbranktip_ = new ::std::string;
  }
  return lbranktip_;
}
inline ::std::string* OGAckRank::release_lbranktip() {
  clear_has_lbranktip();
  if (lbranktip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lbranktip_;
    lbranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rankBtnOn = 19;
inline bool OGAckRank::has_rankbtnon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OGAckRank::set_has_rankbtnon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OGAckRank::clear_has_rankbtnon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OGAckRank::clear_rankbtnon() {
  rankbtnon_ = 0;
  clear_has_rankbtnon();
}
inline ::google::protobuf::int32 OGAckRank::rankbtnon() const {
  return rankbtnon_;
}
inline void OGAckRank::set_rankbtnon(::google::protobuf::int32 value) {
  set_has_rankbtnon();
  rankbtnon_ = value;
}

// -------------------------------------------------------------------

// OGReqRank

// optional string roleName = 1;
inline bool OGReqRank::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqRank::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqRank::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqRank::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqRank::rolename() const {
  return *rolename_;
}
inline void OGReqRank::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqRank::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqRank::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqRank::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqRank::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqRankToJS

// optional string roleName = 1;
inline bool OGReqRankToJS::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqRankToJS::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqRankToJS::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqRankToJS::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqRankToJS::rolename() const {
  return *rolename_;
}
inline void OGReqRankToJS::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqRankToJS::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqRankToJS::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqRankToJS::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqRankToJS::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 getGold1 = 2;
inline bool OGReqRankToJS::has_getgold1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqRankToJS::set_has_getgold1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqRankToJS::clear_has_getgold1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqRankToJS::clear_getgold1() {
  getgold1_ = GOOGLE_LONGLONG(0);
  clear_has_getgold1();
}
inline ::google::protobuf::int64 OGReqRankToJS::getgold1() const {
  return getgold1_;
}
inline void OGReqRankToJS::set_getgold1(::google::protobuf::int64 value) {
  set_has_getgold1();
  getgold1_ = value;
}

// optional int64 getGold4 = 3;
inline bool OGReqRankToJS::has_getgold4() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqRankToJS::set_has_getgold4() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqRankToJS::clear_has_getgold4() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqRankToJS::clear_getgold4() {
  getgold4_ = GOOGLE_LONGLONG(0);
  clear_has_getgold4();
}
inline ::google::protobuf::int64 OGReqRankToJS::getgold4() const {
  return getgold4_;
}
inline void OGReqRankToJS::set_getgold4(::google::protobuf::int64 value) {
  set_has_getgold4();
  getgold4_ = value;
}

// -------------------------------------------------------------------

// OGReqNotice

// optional int32 num = 1;
inline bool OGReqNotice::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqNotice::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqNotice::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqNotice::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGReqNotice::num() const {
  return num_;
}
inline void OGReqNotice::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 time = 2;
inline bool OGReqNotice::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqNotice::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqNotice::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqNotice::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 OGReqNotice::time() const {
  return time_;
}
inline void OGReqNotice::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional string content = 3;
inline bool OGReqNotice::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqNotice::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqNotice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGReqNotice::content() const {
  return *content_;
}
inline void OGReqNotice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGReqNotice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGReqNotice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqNotice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGReqNotice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string color = 4;
inline bool OGReqNotice::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqNotice::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqNotice::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqNotice::clear_color() {
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    color_->clear();
  }
  clear_has_color();
}
inline const ::std::string& OGReqNotice::color() const {
  return *color_;
}
inline void OGReqNotice::set_color(const ::std::string& value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void OGReqNotice::set_color(const char* value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void OGReqNotice::set_color(const char* value, size_t size) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqNotice::mutable_color() {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  return color_;
}
inline ::std::string* OGReqNotice::release_color() {
  clear_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = color_;
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sendTime = 5;
inline bool OGReqNotice::has_sendtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGReqNotice::set_has_sendtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGReqNotice::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGReqNotice::clear_sendtime() {
  if (sendtime_ != &::google::protobuf::internal::kEmptyString) {
    sendtime_->clear();
  }
  clear_has_sendtime();
}
inline const ::std::string& OGReqNotice::sendtime() const {
  return *sendtime_;
}
inline void OGReqNotice::set_sendtime(const ::std::string& value) {
  set_has_sendtime();
  if (sendtime_ == &::google::protobuf::internal::kEmptyString) {
    sendtime_ = new ::std::string;
  }
  sendtime_->assign(value);
}
inline void OGReqNotice::set_sendtime(const char* value) {
  set_has_sendtime();
  if (sendtime_ == &::google::protobuf::internal::kEmptyString) {
    sendtime_ = new ::std::string;
  }
  sendtime_->assign(value);
}
inline void OGReqNotice::set_sendtime(const char* value, size_t size) {
  set_has_sendtime();
  if (sendtime_ == &::google::protobuf::internal::kEmptyString) {
    sendtime_ = new ::std::string;
  }
  sendtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqNotice::mutable_sendtime() {
  set_has_sendtime();
  if (sendtime_ == &::google::protobuf::internal::kEmptyString) {
    sendtime_ = new ::std::string;
  }
  return sendtime_;
}
inline ::std::string* OGReqNotice::release_sendtime() {
  clear_has_sendtime();
  if (sendtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendtime_;
    sendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 6;
inline bool OGReqNotice::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGReqNotice::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGReqNotice::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGReqNotice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGReqNotice::type() const {
  return type_;
}
inline void OGReqNotice::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// OGGuangGao

// optional int32 flg = 1;
inline bool OGGuangGao::has_flg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGGuangGao::set_has_flg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGGuangGao::clear_has_flg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGGuangGao::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGGuangGao::flg() const {
  return flg_;
}
inline void OGGuangGao::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// optional string content = 2;
inline bool OGGuangGao::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGGuangGao::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGGuangGao::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGGuangGao::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGGuangGao::content() const {
  return *content_;
}
inline void OGGuangGao::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGGuangGao::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGGuangGao::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGGuangGao::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGGuangGao::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckMessage

// optional int32 type = 1;
inline bool OGAckMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckMessage::type() const {
  return type_;
}
inline void OGAckMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 2;
inline bool OGAckMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckMessage::content() const {
  return *content_;
}
inline void OGAckMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 subtype = 3;
inline bool OGAckMessage::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckMessage::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckMessage::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckMessage::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 OGAckMessage::subtype() const {
  return subtype_;
}
inline void OGAckMessage::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// optional int32 flg = 4;
inline bool OGAckMessage::has_flg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckMessage::set_has_flg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckMessage::clear_has_flg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckMessage::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGAckMessage::flg() const {
  return flg_;
}
inline void OGAckMessage::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// optional string roleName = 5;
inline bool OGAckMessage::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckMessage::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckMessage::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckMessage::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckMessage::rolename() const {
  return *rolename_;
}
inline void OGAckMessage::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckMessage::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckMessage::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMessage::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckMessage::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userid = 6;
inline bool OGAckMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckMessage::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGAckMessage::userid() const {
  return *userid_;
}
inline void OGAckMessage::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckMessage::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckMessage::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMessage::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGAckMessage::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rankType = 7;
inline bool OGAckMessage::has_ranktype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckMessage::set_has_ranktype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckMessage::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckMessage::clear_ranktype() {
  ranktype_ = 0;
  clear_has_ranktype();
}
inline ::google::protobuf::int32 OGAckMessage::ranktype() const {
  return ranktype_;
}
inline void OGAckMessage::set_ranktype(::google::protobuf::int32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// optional int32 rankNum = 8;
inline bool OGAckMessage::has_ranknum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckMessage::set_has_ranknum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckMessage::clear_has_ranknum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckMessage::clear_ranknum() {
  ranknum_ = 0;
  clear_has_ranknum();
}
inline ::google::protobuf::int32 OGAckMessage::ranknum() const {
  return ranknum_;
}
inline void OGAckMessage::set_ranknum(::google::protobuf::int32 value) {
  set_has_ranknum();
  ranknum_ = value;
}

// optional string tip = 9;
inline bool OGAckMessage::has_tip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckMessage::set_has_tip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckMessage::clear_has_tip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckMessage::clear_tip() {
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    tip_->clear();
  }
  clear_has_tip();
}
inline const ::std::string& OGAckMessage::tip() const {
  return *tip_;
}
inline void OGAckMessage::set_tip(const ::std::string& value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckMessage::set_tip(const char* value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckMessage::set_tip(const char* value, size_t size) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMessage::mutable_tip() {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  return tip_;
}
inline ::std::string* OGAckMessage::release_tip() {
  clear_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tip_;
    tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string time = 10;
inline bool OGAckMessage::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckMessage::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckMessage::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& OGAckMessage::time() const {
  return *time_;
}
inline void OGAckMessage::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void OGAckMessage::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void OGAckMessage::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMessage::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* OGAckMessage::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckStopGame

// optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
inline bool OGAckStopGame::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckStopGame::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckStopGame::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckStopGame::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::com::ourgame::texasSlots::OGAckStopGame_E_Status OGAckStopGame::status() const {
  return static_cast< ::com::ourgame::texasSlots::OGAckStopGame_E_Status >(status_);
}
inline void OGAckStopGame::set_status(::com::ourgame::texasSlots::OGAckStopGame_E_Status value) {
  GOOGLE_DCHECK(::com::ourgame::texasSlots::OGAckStopGame_E_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// OGAckMails_Mail

// optional int32 id = 1;
inline bool OGAckMails_Mail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckMails_Mail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckMails_Mail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckMails_Mail::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OGAckMails_Mail::id() const {
  return id_;
}
inline void OGAckMails_Mail::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string sendRoleName = 2;
inline bool OGAckMails_Mail::has_sendrolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckMails_Mail::set_has_sendrolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckMails_Mail::clear_has_sendrolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckMails_Mail::clear_sendrolename() {
  if (sendrolename_ != &::google::protobuf::internal::kEmptyString) {
    sendrolename_->clear();
  }
  clear_has_sendrolename();
}
inline const ::std::string& OGAckMails_Mail::sendrolename() const {
  return *sendrolename_;
}
inline void OGAckMails_Mail::set_sendrolename(const ::std::string& value) {
  set_has_sendrolename();
  if (sendrolename_ == &::google::protobuf::internal::kEmptyString) {
    sendrolename_ = new ::std::string;
  }
  sendrolename_->assign(value);
}
inline void OGAckMails_Mail::set_sendrolename(const char* value) {
  set_has_sendrolename();
  if (sendrolename_ == &::google::protobuf::internal::kEmptyString) {
    sendrolename_ = new ::std::string;
  }
  sendrolename_->assign(value);
}
inline void OGAckMails_Mail::set_sendrolename(const char* value, size_t size) {
  set_has_sendrolename();
  if (sendrolename_ == &::google::protobuf::internal::kEmptyString) {
    sendrolename_ = new ::std::string;
  }
  sendrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_sendrolename() {
  set_has_sendrolename();
  if (sendrolename_ == &::google::protobuf::internal::kEmptyString) {
    sendrolename_ = new ::std::string;
  }
  return sendrolename_;
}
inline ::std::string* OGAckMails_Mail::release_sendrolename() {
  clear_has_sendrolename();
  if (sendrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendrolename_;
    sendrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string recvRoleName = 3;
inline bool OGAckMails_Mail::has_recvrolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckMails_Mail::set_has_recvrolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckMails_Mail::clear_has_recvrolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckMails_Mail::clear_recvrolename() {
  if (recvrolename_ != &::google::protobuf::internal::kEmptyString) {
    recvrolename_->clear();
  }
  clear_has_recvrolename();
}
inline const ::std::string& OGAckMails_Mail::recvrolename() const {
  return *recvrolename_;
}
inline void OGAckMails_Mail::set_recvrolename(const ::std::string& value) {
  set_has_recvrolename();
  if (recvrolename_ == &::google::protobuf::internal::kEmptyString) {
    recvrolename_ = new ::std::string;
  }
  recvrolename_->assign(value);
}
inline void OGAckMails_Mail::set_recvrolename(const char* value) {
  set_has_recvrolename();
  if (recvrolename_ == &::google::protobuf::internal::kEmptyString) {
    recvrolename_ = new ::std::string;
  }
  recvrolename_->assign(value);
}
inline void OGAckMails_Mail::set_recvrolename(const char* value, size_t size) {
  set_has_recvrolename();
  if (recvrolename_ == &::google::protobuf::internal::kEmptyString) {
    recvrolename_ = new ::std::string;
  }
  recvrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_recvrolename() {
  set_has_recvrolename();
  if (recvrolename_ == &::google::protobuf::internal::kEmptyString) {
    recvrolename_ = new ::std::string;
  }
  return recvrolename_;
}
inline ::std::string* OGAckMails_Mail::release_recvrolename() {
  clear_has_recvrolename();
  if (recvrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recvrolename_;
    recvrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 4;
inline bool OGAckMails_Mail::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckMails_Mail::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckMails_Mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckMails_Mail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckMails_Mail::content() const {
  return *content_;
}
inline void OGAckMails_Mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckMails_Mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckMails_Mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckMails_Mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string createTime = 5;
inline bool OGAckMails_Mail::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckMails_Mail::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckMails_Mail::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckMails_Mail::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& OGAckMails_Mail::createtime() const {
  return *createtime_;
}
inline void OGAckMails_Mail::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void OGAckMails_Mail::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void OGAckMails_Mail::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* OGAckMails_Mail::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mailTitle = 6;
inline bool OGAckMails_Mail::has_mailtitle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckMails_Mail::set_has_mailtitle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckMails_Mail::clear_has_mailtitle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckMails_Mail::clear_mailtitle() {
  if (mailtitle_ != &::google::protobuf::internal::kEmptyString) {
    mailtitle_->clear();
  }
  clear_has_mailtitle();
}
inline const ::std::string& OGAckMails_Mail::mailtitle() const {
  return *mailtitle_;
}
inline void OGAckMails_Mail::set_mailtitle(const ::std::string& value) {
  set_has_mailtitle();
  if (mailtitle_ == &::google::protobuf::internal::kEmptyString) {
    mailtitle_ = new ::std::string;
  }
  mailtitle_->assign(value);
}
inline void OGAckMails_Mail::set_mailtitle(const char* value) {
  set_has_mailtitle();
  if (mailtitle_ == &::google::protobuf::internal::kEmptyString) {
    mailtitle_ = new ::std::string;
  }
  mailtitle_->assign(value);
}
inline void OGAckMails_Mail::set_mailtitle(const char* value, size_t size) {
  set_has_mailtitle();
  if (mailtitle_ == &::google::protobuf::internal::kEmptyString) {
    mailtitle_ = new ::std::string;
  }
  mailtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_mailtitle() {
  set_has_mailtitle();
  if (mailtitle_ == &::google::protobuf::internal::kEmptyString) {
    mailtitle_ = new ::std::string;
  }
  return mailtitle_;
}
inline ::std::string* OGAckMails_Mail::release_mailtitle() {
  clear_has_mailtitle();
  if (mailtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailtitle_;
    mailtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 awardType = 7;
inline bool OGAckMails_Mail::has_awardtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckMails_Mail::set_has_awardtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckMails_Mail::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckMails_Mail::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 OGAckMails_Mail::awardtype() const {
  return awardtype_;
}
inline void OGAckMails_Mail::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// optional int32 itemId = 8;
inline bool OGAckMails_Mail::has_itemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckMails_Mail::set_has_itemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckMails_Mail::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckMails_Mail::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckMails_Mail::itemid() const {
  return itemid_;
}
inline void OGAckMails_Mail::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemNum = 9;
inline bool OGAckMails_Mail::has_itemnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckMails_Mail::set_has_itemnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckMails_Mail::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckMails_Mail::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 OGAckMails_Mail::itemnum() const {
  return itemnum_;
}
inline void OGAckMails_Mail::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional int32 isRead = 10;
inline bool OGAckMails_Mail::has_isread() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OGAckMails_Mail::set_has_isread() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OGAckMails_Mail::clear_has_isread() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OGAckMails_Mail::clear_isread() {
  isread_ = 0;
  clear_has_isread();
}
inline ::google::protobuf::int32 OGAckMails_Mail::isread() const {
  return isread_;
}
inline void OGAckMails_Mail::set_isread(::google::protobuf::int32 value) {
  set_has_isread();
  isread_ = value;
}

// optional int32 isOk = 11;
inline bool OGAckMails_Mail::has_isok() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OGAckMails_Mail::set_has_isok() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OGAckMails_Mail::clear_has_isok() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OGAckMails_Mail::clear_isok() {
  isok_ = 0;
  clear_has_isok();
}
inline ::google::protobuf::int32 OGAckMails_Mail::isok() const {
  return isok_;
}
inline void OGAckMails_Mail::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
}

// optional string pic = 12;
inline bool OGAckMails_Mail::has_pic() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OGAckMails_Mail::set_has_pic() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OGAckMails_Mail::clear_has_pic() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OGAckMails_Mail::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckMails_Mail::pic() const {
  return *pic_;
}
inline void OGAckMails_Mail::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckMails_Mail::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckMails_Mail::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckMails_Mail::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string itemName = 13;
inline bool OGAckMails_Mail::has_itemname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OGAckMails_Mail::set_has_itemname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OGAckMails_Mail::clear_has_itemname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OGAckMails_Mail::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& OGAckMails_Mail::itemname() const {
  return *itemname_;
}
inline void OGAckMails_Mail::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckMails_Mail::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckMails_Mail::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* OGAckMails_Mail::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string itemTip = 14;
inline bool OGAckMails_Mail::has_itemtip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OGAckMails_Mail::set_has_itemtip() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OGAckMails_Mail::clear_has_itemtip() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OGAckMails_Mail::clear_itemtip() {
  if (itemtip_ != &::google::protobuf::internal::kEmptyString) {
    itemtip_->clear();
  }
  clear_has_itemtip();
}
inline const ::std::string& OGAckMails_Mail::itemtip() const {
  return *itemtip_;
}
inline void OGAckMails_Mail::set_itemtip(const ::std::string& value) {
  set_has_itemtip();
  if (itemtip_ == &::google::protobuf::internal::kEmptyString) {
    itemtip_ = new ::std::string;
  }
  itemtip_->assign(value);
}
inline void OGAckMails_Mail::set_itemtip(const char* value) {
  set_has_itemtip();
  if (itemtip_ == &::google::protobuf::internal::kEmptyString) {
    itemtip_ = new ::std::string;
  }
  itemtip_->assign(value);
}
inline void OGAckMails_Mail::set_itemtip(const char* value, size_t size) {
  set_has_itemtip();
  if (itemtip_ == &::google::protobuf::internal::kEmptyString) {
    itemtip_ = new ::std::string;
  }
  itemtip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMails_Mail::mutable_itemtip() {
  set_has_itemtip();
  if (itemtip_ == &::google::protobuf::internal::kEmptyString) {
    itemtip_ = new ::std::string;
  }
  return itemtip_;
}
inline ::std::string* OGAckMails_Mail::release_itemtip() {
  clear_has_itemtip();
  if (itemtip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemtip_;
    itemtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckMails

// repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
inline int OGAckMails::maillist_size() const {
  return maillist_.size();
}
inline void OGAckMails::clear_maillist() {
  maillist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckMails_Mail& OGAckMails::maillist(int index) const {
  return maillist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckMails_Mail* OGAckMails::mutable_maillist(int index) {
  return maillist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckMails_Mail* OGAckMails::add_maillist() {
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckMails_Mail >&
OGAckMails::maillist() const {
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckMails_Mail >*
OGAckMails::mutable_maillist() {
  return &maillist_;
}

// -------------------------------------------------------------------

// OGReqHandleMails

// optional int32 type = 1;
inline bool OGReqHandleMails::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqHandleMails::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqHandleMails::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqHandleMails::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGReqHandleMails::type() const {
  return type_;
}
inline void OGReqHandleMails::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string id = 2;
inline bool OGReqHandleMails::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqHandleMails::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqHandleMails::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqHandleMails::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& OGReqHandleMails::id() const {
  return *id_;
}
inline void OGReqHandleMails::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void OGReqHandleMails::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void OGReqHandleMails::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqHandleMails::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* OGReqHandleMails::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqMails

// -------------------------------------------------------------------

// OGAckMail

// optional int32 result = 1;
inline bool OGAckMail::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckMail::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckMail::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckMail::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckMail::result() const {
  return result_;
}
inline void OGAckMail::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string pic = 2;
inline bool OGAckMail::has_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckMail::set_has_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckMail::clear_has_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckMail::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckMail::pic() const {
  return *pic_;
}
inline void OGAckMail::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckMail::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckMail::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMail::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckMail::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 num = 3;
inline bool OGAckMail::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckMail::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckMail::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckMail::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGAckMail::num() const {
  return num_;
}
inline void OGAckMail::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 awardType = 4;
inline bool OGAckMail::has_awardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckMail::set_has_awardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckMail::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckMail::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 OGAckMail::awardtype() const {
  return awardtype_;
}
inline void OGAckMail::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// optional string errorMsg = 5;
inline bool OGAckMail::has_errormsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckMail::set_has_errormsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckMail::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckMail::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& OGAckMail::errormsg() const {
  return *errormsg_;
}
inline void OGAckMail::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void OGAckMail::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void OGAckMail::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckMail::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* OGAckMail::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 mailId = 6;
inline bool OGAckMail::has_mailid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckMail::set_has_mailid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckMail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckMail::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 OGAckMail::mailid() const {
  return mailid_;
}
inline void OGAckMail::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// OGAckUnreadMail

// -------------------------------------------------------------------

// OGAckItems_Item

// optional int32 id = 1;
inline bool OGAckItems_Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckItems_Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckItems_Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckItems_Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OGAckItems_Item::id() const {
  return id_;
}
inline void OGAckItems_Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 itemId = 2;
inline bool OGAckItems_Item::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckItems_Item::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckItems_Item::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckItems_Item::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckItems_Item::itemid() const {
  return itemid_;
}
inline void OGAckItems_Item::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemNum = 3;
inline bool OGAckItems_Item::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckItems_Item::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckItems_Item::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckItems_Item::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 OGAckItems_Item::itemnum() const {
  return itemnum_;
}
inline void OGAckItems_Item::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional string pic = 4;
inline bool OGAckItems_Item::has_pic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckItems_Item::set_has_pic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckItems_Item::clear_has_pic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckItems_Item::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckItems_Item::pic() const {
  return *pic_;
}
inline void OGAckItems_Item::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckItems_Item::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckItems_Item::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckItems_Item::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckItems_Item::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 5;
inline bool OGAckItems_Item::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckItems_Item::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckItems_Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckItems_Item::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OGAckItems_Item::name() const {
  return *name_;
}
inline void OGAckItems_Item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckItems_Item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckItems_Item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckItems_Item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OGAckItems_Item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 6;
inline bool OGAckItems_Item::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckItems_Item::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckItems_Item::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckItems_Item::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckItems_Item::type() const {
  return type_;
}
inline void OGAckItems_Item::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string tip = 7;
inline bool OGAckItems_Item::has_tip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckItems_Item::set_has_tip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckItems_Item::clear_has_tip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckItems_Item::clear_tip() {
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    tip_->clear();
  }
  clear_has_tip();
}
inline const ::std::string& OGAckItems_Item::tip() const {
  return *tip_;
}
inline void OGAckItems_Item::set_tip(const ::std::string& value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckItems_Item::set_tip(const char* value) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(value);
}
inline void OGAckItems_Item::set_tip(const char* value, size_t size) {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  tip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckItems_Item::mutable_tip() {
  set_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    tip_ = new ::std::string;
  }
  return tip_;
}
inline ::std::string* OGAckItems_Item::release_tip() {
  clear_has_tip();
  if (tip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tip_;
    tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 maxNum = 8;
inline bool OGAckItems_Item::has_maxnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckItems_Item::set_has_maxnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckItems_Item::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckItems_Item::clear_maxnum() {
  maxnum_ = 0;
  clear_has_maxnum();
}
inline ::google::protobuf::int32 OGAckItems_Item::maxnum() const {
  return maxnum_;
}
inline void OGAckItems_Item::set_maxnum(::google::protobuf::int32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional int32 effect = 9;
inline bool OGAckItems_Item::has_effect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckItems_Item::set_has_effect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckItems_Item::clear_has_effect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckItems_Item::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 OGAckItems_Item::effect() const {
  return effect_;
}
inline void OGAckItems_Item::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
}

// -------------------------------------------------------------------

// OGAckItems

// repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
inline int OGAckItems::itemlist_size() const {
  return itemlist_.size();
}
inline void OGAckItems::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckItems_Item& OGAckItems::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckItems_Item* OGAckItems::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckItems_Item* OGAckItems::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItems_Item >&
OGAckItems::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckItems_Item >*
OGAckItems::mutable_itemlist() {
  return &itemlist_;
}

// -------------------------------------------------------------------

// OGAckShopItemInfo_ItemInfo

// optional int32 itemId = 1;
inline bool OGAckShopItemInfo_ItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckShopItemInfo_ItemInfo::itemid() const {
  return itemid_;
}
inline void OGAckShopItemInfo_ItemInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemPrice = 2;
inline bool OGAckShopItemInfo_ItemInfo::has_itemprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_itemprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_itemprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_itemprice() {
  itemprice_ = 0;
  clear_has_itemprice();
}
inline ::google::protobuf::int32 OGAckShopItemInfo_ItemInfo::itemprice() const {
  return itemprice_;
}
inline void OGAckShopItemInfo_ItemInfo::set_itemprice(::google::protobuf::int32 value) {
  set_has_itemprice();
  itemprice_ = value;
}

// optional string shopDesc = 3;
inline bool OGAckShopItemInfo_ItemInfo::has_shopdesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_shopdesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_shopdesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_shopdesc() {
  if (shopdesc_ != &::google::protobuf::internal::kEmptyString) {
    shopdesc_->clear();
  }
  clear_has_shopdesc();
}
inline const ::std::string& OGAckShopItemInfo_ItemInfo::shopdesc() const {
  return *shopdesc_;
}
inline void OGAckShopItemInfo_ItemInfo::set_shopdesc(const ::std::string& value) {
  set_has_shopdesc();
  if (shopdesc_ == &::google::protobuf::internal::kEmptyString) {
    shopdesc_ = new ::std::string;
  }
  shopdesc_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_shopdesc(const char* value) {
  set_has_shopdesc();
  if (shopdesc_ == &::google::protobuf::internal::kEmptyString) {
    shopdesc_ = new ::std::string;
  }
  shopdesc_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_shopdesc(const char* value, size_t size) {
  set_has_shopdesc();
  if (shopdesc_ == &::google::protobuf::internal::kEmptyString) {
    shopdesc_ = new ::std::string;
  }
  shopdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::mutable_shopdesc() {
  set_has_shopdesc();
  if (shopdesc_ == &::google::protobuf::internal::kEmptyString) {
    shopdesc_ = new ::std::string;
  }
  return shopdesc_;
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::release_shopdesc() {
  clear_has_shopdesc();
  if (shopdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shopdesc_;
    shopdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shopPic = 4;
inline bool OGAckShopItemInfo_ItemInfo::has_shoppic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_shoppic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_shoppic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_shoppic() {
  if (shoppic_ != &::google::protobuf::internal::kEmptyString) {
    shoppic_->clear();
  }
  clear_has_shoppic();
}
inline const ::std::string& OGAckShopItemInfo_ItemInfo::shoppic() const {
  return *shoppic_;
}
inline void OGAckShopItemInfo_ItemInfo::set_shoppic(const ::std::string& value) {
  set_has_shoppic();
  if (shoppic_ == &::google::protobuf::internal::kEmptyString) {
    shoppic_ = new ::std::string;
  }
  shoppic_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_shoppic(const char* value) {
  set_has_shoppic();
  if (shoppic_ == &::google::protobuf::internal::kEmptyString) {
    shoppic_ = new ::std::string;
  }
  shoppic_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_shoppic(const char* value, size_t size) {
  set_has_shoppic();
  if (shoppic_ == &::google::protobuf::internal::kEmptyString) {
    shoppic_ = new ::std::string;
  }
  shoppic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::mutable_shoppic() {
  set_has_shoppic();
  if (shoppic_ == &::google::protobuf::internal::kEmptyString) {
    shoppic_ = new ::std::string;
  }
  return shoppic_;
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::release_shoppic() {
  clear_has_shoppic();
  if (shoppic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shoppic_;
    shoppic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 shopMaxNum = 5;
inline bool OGAckShopItemInfo_ItemInfo::has_shopmaxnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_shopmaxnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_shopmaxnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_shopmaxnum() {
  shopmaxnum_ = 0;
  clear_has_shopmaxnum();
}
inline ::google::protobuf::int32 OGAckShopItemInfo_ItemInfo::shopmaxnum() const {
  return shopmaxnum_;
}
inline void OGAckShopItemInfo_ItemInfo::set_shopmaxnum(::google::protobuf::int32 value) {
  set_has_shopmaxnum();
  shopmaxnum_ = value;
}

// optional string itemName = 6;
inline bool OGAckShopItemInfo_ItemInfo::has_itemname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckShopItemInfo_ItemInfo::set_has_itemname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckShopItemInfo_ItemInfo::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& OGAckShopItemInfo_ItemInfo::itemname() const {
  return *itemname_;
}
inline void OGAckShopItemInfo_ItemInfo::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void OGAckShopItemInfo_ItemInfo::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* OGAckShopItemInfo_ItemInfo::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckShopItemInfo

// repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
inline int OGAckShopItemInfo::shoplist_size() const {
  return shoplist_.size();
}
inline void OGAckShopItemInfo::clear_shoplist() {
  shoplist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo& OGAckShopItemInfo::shoplist(int index) const {
  return shoplist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo* OGAckShopItemInfo::mutable_shoplist(int index) {
  return shoplist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo* OGAckShopItemInfo::add_shoplist() {
  return shoplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo >&
OGAckShopItemInfo::shoplist() const {
  return shoplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckShopItemInfo_ItemInfo >*
OGAckShopItemInfo::mutable_shoplist() {
  return &shoplist_;
}

// -------------------------------------------------------------------

// OGReqShopItem

// optional int32 itemId = 1;
inline bool OGReqShopItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqShopItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqShopItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqShopItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGReqShopItem::itemid() const {
  return itemid_;
}
inline void OGReqShopItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// OGAckCutItems_Item

// optional int32 id = 1;
inline bool OGAckCutItems_Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckCutItems_Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckCutItems_Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckCutItems_Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OGAckCutItems_Item::id() const {
  return id_;
}
inline void OGAckCutItems_Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 itemNum = 2;
inline bool OGAckCutItems_Item::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckCutItems_Item::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckCutItems_Item::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckCutItems_Item::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 OGAckCutItems_Item::itemnum() const {
  return itemnum_;
}
inline void OGAckCutItems_Item::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional int32 flg = 3;
inline bool OGAckCutItems_Item::has_flg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckCutItems_Item::set_has_flg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckCutItems_Item::clear_has_flg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckCutItems_Item::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGAckCutItems_Item::flg() const {
  return flg_;
}
inline void OGAckCutItems_Item::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// -------------------------------------------------------------------

// OGAckCutItems

// repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
inline int OGAckCutItems::itemlist_size() const {
  return itemlist_.size();
}
inline void OGAckCutItems::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckCutItems_Item& OGAckCutItems::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckCutItems_Item* OGAckCutItems::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckCutItems_Item* OGAckCutItems::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckCutItems_Item >&
OGAckCutItems::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckCutItems_Item >*
OGAckCutItems::mutable_itemlist() {
  return &itemlist_;
}

// -------------------------------------------------------------------

// OGAckErrorMsg

// optional string content = 1;
inline bool OGAckErrorMsg::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckErrorMsg::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckErrorMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckErrorMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckErrorMsg::content() const {
  return *content_;
}
inline void OGAckErrorMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckErrorMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckErrorMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckErrorMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckErrorMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqBuyItem

// optional int32 itemId = 1;
inline bool OGReqBuyItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqBuyItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqBuyItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqBuyItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGReqBuyItem::itemid() const {
  return itemid_;
}
inline void OGReqBuyItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 2;
inline bool OGReqBuyItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqBuyItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqBuyItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqBuyItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGReqBuyItem::num() const {
  return num_;
}
inline void OGReqBuyItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// OGReqNewHandOver

// -------------------------------------------------------------------

// OGReqNewHandAward

// -------------------------------------------------------------------

// OGAckNewHandAward

// optional int32 itemId = 1;
inline bool OGAckNewHandAward::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckNewHandAward::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckNewHandAward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckNewHandAward::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckNewHandAward::itemid() const {
  return itemid_;
}
inline void OGAckNewHandAward::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemNum = 2;
inline bool OGAckNewHandAward::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckNewHandAward::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckNewHandAward::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckNewHandAward::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 OGAckNewHandAward::itemnum() const {
  return itemnum_;
}
inline void OGAckNewHandAward::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional string pic = 3;
inline bool OGAckNewHandAward::has_pic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckNewHandAward::set_has_pic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckNewHandAward::clear_has_pic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckNewHandAward::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckNewHandAward::pic() const {
  return *pic_;
}
inline void OGAckNewHandAward::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckNewHandAward::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckNewHandAward::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckNewHandAward::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckNewHandAward::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 4;
inline bool OGAckNewHandAward::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckNewHandAward::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckNewHandAward::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckNewHandAward::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OGAckNewHandAward::name() const {
  return *name_;
}
inline void OGAckNewHandAward::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckNewHandAward::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckNewHandAward::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckNewHandAward::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OGAckNewHandAward::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dis = 5;
inline bool OGAckNewHandAward::has_dis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckNewHandAward::set_has_dis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckNewHandAward::clear_has_dis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckNewHandAward::clear_dis() {
  if (dis_ != &::google::protobuf::internal::kEmptyString) {
    dis_->clear();
  }
  clear_has_dis();
}
inline const ::std::string& OGAckNewHandAward::dis() const {
  return *dis_;
}
inline void OGAckNewHandAward::set_dis(const ::std::string& value) {
  set_has_dis();
  if (dis_ == &::google::protobuf::internal::kEmptyString) {
    dis_ = new ::std::string;
  }
  dis_->assign(value);
}
inline void OGAckNewHandAward::set_dis(const char* value) {
  set_has_dis();
  if (dis_ == &::google::protobuf::internal::kEmptyString) {
    dis_ = new ::std::string;
  }
  dis_->assign(value);
}
inline void OGAckNewHandAward::set_dis(const char* value, size_t size) {
  set_has_dis();
  if (dis_ == &::google::protobuf::internal::kEmptyString) {
    dis_ = new ::std::string;
  }
  dis_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckNewHandAward::mutable_dis() {
  set_has_dis();
  if (dis_ == &::google::protobuf::internal::kEmptyString) {
    dis_ = new ::std::string;
  }
  return dis_;
}
inline ::std::string* OGAckNewHandAward::release_dis() {
  clear_has_dis();
  if (dis_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dis_;
    dis_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckPlayerLogot

// optional string userId = 1;
inline bool OGAckPlayerLogot::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPlayerLogot::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPlayerLogot::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPlayerLogot::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGAckPlayerLogot::userid() const {
  return *userid_;
}
inline void OGAckPlayerLogot::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckPlayerLogot::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckPlayerLogot::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckPlayerLogot::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGAckPlayerLogot::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckRankHour

// optional int32 type = 1;
inline bool OGAckRankHour::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckRankHour::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckRankHour::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckRankHour::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckRankHour::type() const {
  return type_;
}
inline void OGAckRankHour::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 week = 2;
inline bool OGAckRankHour::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckRankHour::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckRankHour::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckRankHour::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 OGAckRankHour::week() const {
  return week_;
}
inline void OGAckRankHour::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
}

// optional int32 hour = 3;
inline bool OGAckRankHour::has_hour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckRankHour::set_has_hour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckRankHour::clear_has_hour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckRankHour::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 OGAckRankHour::hour() const {
  return hour_;
}
inline void OGAckRankHour::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
}

// optional int32 minute = 4;
inline bool OGAckRankHour::has_minute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckRankHour::set_has_minute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckRankHour::clear_has_minute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckRankHour::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 OGAckRankHour::minute() const {
  return minute_;
}
inline void OGAckRankHour::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
}

// -------------------------------------------------------------------

// OGReqJpRecord

// optional string roleName = 1;
inline bool OGReqJpRecord::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqJpRecord::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqJpRecord::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqJpRecord::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqJpRecord::rolename() const {
  return *rolename_;
}
inline void OGReqJpRecord::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpRecord::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpRecord::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqJpRecord::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqJpRecord::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqJpStar

// optional string roleName = 1;
inline bool OGReqJpStar::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqJpStar::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqJpStar::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqJpStar::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqJpStar::rolename() const {
  return *rolename_;
}
inline void OGReqJpStar::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpStar::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpStar::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqJpStar::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqJpStar::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string jpStarName = 2;
inline bool OGReqJpStar::has_jpstarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqJpStar::set_has_jpstarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqJpStar::clear_has_jpstarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqJpStar::clear_jpstarname() {
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    jpstarname_->clear();
  }
  clear_has_jpstarname();
}
inline const ::std::string& OGReqJpStar::jpstarname() const {
  return *jpstarname_;
}
inline void OGReqJpStar::set_jpstarname(const ::std::string& value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void OGReqJpStar::set_jpstarname(const char* value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void OGReqJpStar::set_jpstarname(const char* value, size_t size) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqJpStar::mutable_jpstarname() {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  return jpstarname_;
}
inline ::std::string* OGReqJpStar::release_jpstarname() {
  clear_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpstarname_;
    jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 jpStarTemNum = 3;
inline bool OGReqJpStar::has_jpstartemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqJpStar::set_has_jpstartemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqJpStar::clear_has_jpstartemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqJpStar::clear_jpstartemnum() {
  jpstartemnum_ = GOOGLE_LONGLONG(0);
  clear_has_jpstartemnum();
}
inline ::google::protobuf::int64 OGReqJpStar::jpstartemnum() const {
  return jpstartemnum_;
}
inline void OGReqJpStar::set_jpstartemnum(::google::protobuf::int64 value) {
  set_has_jpstartemnum();
  jpstartemnum_ = value;
}

// optional string jpStarTime = 4;
inline bool OGReqJpStar::has_jpstartime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqJpStar::set_has_jpstartime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqJpStar::clear_has_jpstartime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqJpStar::clear_jpstartime() {
  if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
    jpstartime_->clear();
  }
  clear_has_jpstartime();
}
inline const ::std::string& OGReqJpStar::jpstartime() const {
  return *jpstartime_;
}
inline void OGReqJpStar::set_jpstartime(const ::std::string& value) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(value);
}
inline void OGReqJpStar::set_jpstartime(const char* value) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(value);
}
inline void OGReqJpStar::set_jpstartime(const char* value, size_t size) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqJpStar::mutable_jpstartime() {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  return jpstartime_;
}
inline ::std::string* OGReqJpStar::release_jpstartime() {
  clear_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpstartime_;
    jpstartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckJpRecord_JpRecord

// required string userId = 1;
inline bool OGAckJpRecord_JpRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckJpRecord_JpRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckJpRecord_JpRecord::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGAckJpRecord_JpRecord::userid() const {
  return *userid_;
}
inline void OGAckJpRecord_JpRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpRecord_JpRecord::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGAckJpRecord_JpRecord::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string roleName = 2;
inline bool OGAckJpRecord_JpRecord::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckJpRecord_JpRecord::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckJpRecord_JpRecord::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckJpRecord_JpRecord::rolename() const {
  return *rolename_;
}
inline void OGAckJpRecord_JpRecord::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpRecord_JpRecord::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckJpRecord_JpRecord::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 winGold = 3;
inline bool OGAckJpRecord_JpRecord::has_wingold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_wingold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckJpRecord_JpRecord::clear_has_wingold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckJpRecord_JpRecord::clear_wingold() {
  wingold_ = GOOGLE_LONGLONG(0);
  clear_has_wingold();
}
inline ::google::protobuf::int64 OGAckJpRecord_JpRecord::wingold() const {
  return wingold_;
}
inline void OGAckJpRecord_JpRecord::set_wingold(::google::protobuf::int64 value) {
  set_has_wingold();
  wingold_ = value;
}

// required int64 currJp = 4;
inline bool OGAckJpRecord_JpRecord::has_currjp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_currjp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckJpRecord_JpRecord::clear_has_currjp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckJpRecord_JpRecord::clear_currjp() {
  currjp_ = GOOGLE_LONGLONG(0);
  clear_has_currjp();
}
inline ::google::protobuf::int64 OGAckJpRecord_JpRecord::currjp() const {
  return currjp_;
}
inline void OGAckJpRecord_JpRecord::set_currjp(::google::protobuf::int64 value) {
  set_has_currjp();
  currjp_ = value;
}

// required int32 showType = 5;
inline bool OGAckJpRecord_JpRecord::has_showtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_showtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckJpRecord_JpRecord::clear_has_showtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckJpRecord_JpRecord::clear_showtype() {
  showtype_ = 0;
  clear_has_showtype();
}
inline ::google::protobuf::int32 OGAckJpRecord_JpRecord::showtype() const {
  return showtype_;
}
inline void OGAckJpRecord_JpRecord::set_showtype(::google::protobuf::int32 value) {
  set_has_showtype();
  showtype_ = value;
}

// required string gameName = 6;
inline bool OGAckJpRecord_JpRecord::has_gamename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_gamename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckJpRecord_JpRecord::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckJpRecord_JpRecord::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& OGAckJpRecord_JpRecord::gamename() const {
  return *gamename_;
}
inline void OGAckJpRecord_JpRecord::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpRecord_JpRecord::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  return gamename_;
}
inline ::std::string* OGAckJpRecord_JpRecord::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string createtime = 7;
inline bool OGAckJpRecord_JpRecord::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckJpRecord_JpRecord::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckJpRecord_JpRecord::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& OGAckJpRecord_JpRecord::createtime() const {
  return *createtime_;
}
inline void OGAckJpRecord_JpRecord::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void OGAckJpRecord_JpRecord::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpRecord_JpRecord::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* OGAckJpRecord_JpRecord::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 gameId = 8;
inline bool OGAckJpRecord_JpRecord::has_gameid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckJpRecord_JpRecord::set_has_gameid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckJpRecord_JpRecord::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckJpRecord_JpRecord::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 OGAckJpRecord_JpRecord::gameid() const {
  return gameid_;
}
inline void OGAckJpRecord_JpRecord::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// OGAckJpRecord

// repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
inline int OGAckJpRecord::jprecordlist_size() const {
  return jprecordlist_.size();
}
inline void OGAckJpRecord::clear_jprecordlist() {
  jprecordlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord& OGAckJpRecord::jprecordlist(int index) const {
  return jprecordlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord* OGAckJpRecord::mutable_jprecordlist(int index) {
  return jprecordlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord* OGAckJpRecord::add_jprecordlist() {
  return jprecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord >&
OGAckJpRecord::jprecordlist() const {
  return jprecordlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpRecord_JpRecord >*
OGAckJpRecord::mutable_jprecordlist() {
  return &jprecordlist_;
}

// required int32 tipOn = 2;
inline bool OGAckJpRecord::has_tipon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckJpRecord::set_has_tipon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckJpRecord::clear_has_tipon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckJpRecord::clear_tipon() {
  tipon_ = 0;
  clear_has_tipon();
}
inline ::google::protobuf::int32 OGAckJpRecord::tipon() const {
  return tipon_;
}
inline void OGAckJpRecord::set_tipon(::google::protobuf::int32 value) {
  set_has_tipon();
  tipon_ = value;
}

// optional string tipText = 3;
inline bool OGAckJpRecord::has_tiptext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckJpRecord::set_has_tiptext() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckJpRecord::clear_has_tiptext() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckJpRecord::clear_tiptext() {
  if (tiptext_ != &::google::protobuf::internal::kEmptyString) {
    tiptext_->clear();
  }
  clear_has_tiptext();
}
inline const ::std::string& OGAckJpRecord::tiptext() const {
  return *tiptext_;
}
inline void OGAckJpRecord::set_tiptext(const ::std::string& value) {
  set_has_tiptext();
  if (tiptext_ == &::google::protobuf::internal::kEmptyString) {
    tiptext_ = new ::std::string;
  }
  tiptext_->assign(value);
}
inline void OGAckJpRecord::set_tiptext(const char* value) {
  set_has_tiptext();
  if (tiptext_ == &::google::protobuf::internal::kEmptyString) {
    tiptext_ = new ::std::string;
  }
  tiptext_->assign(value);
}
inline void OGAckJpRecord::set_tiptext(const char* value, size_t size) {
  set_has_tiptext();
  if (tiptext_ == &::google::protobuf::internal::kEmptyString) {
    tiptext_ = new ::std::string;
  }
  tiptext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpRecord::mutable_tiptext() {
  set_has_tiptext();
  if (tiptext_ == &::google::protobuf::internal::kEmptyString) {
    tiptext_ = new ::std::string;
  }
  return tiptext_;
}
inline ::std::string* OGAckJpRecord::release_tiptext() {
  clear_has_tiptext();
  if (tiptext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiptext_;
    tiptext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckLoginJpMsg

// optional string content = 1;
inline bool OGAckLoginJpMsg::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckLoginJpMsg::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckLoginJpMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckLoginJpMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckLoginJpMsg::content() const {
  return *content_;
}
inline void OGAckLoginJpMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginJpMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginJpMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginJpMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckLoginJpMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqLoginGetAward

// optional string roleName = 1;
inline bool OGReqLoginGetAward::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqLoginGetAward::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqLoginGetAward::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqLoginGetAward::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqLoginGetAward::rolename() const {
  return *rolename_;
}
inline void OGReqLoginGetAward::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqLoginGetAward::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqLoginGetAward::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqLoginGetAward::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqLoginGetAward::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lev = 2;
inline bool OGReqLoginGetAward::has_lev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqLoginGetAward::set_has_lev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqLoginGetAward::clear_has_lev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqLoginGetAward::clear_lev() {
  lev_ = 0;
  clear_has_lev();
}
inline ::google::protobuf::int32 OGReqLoginGetAward::lev() const {
  return lev_;
}
inline void OGReqLoginGetAward::set_lev(::google::protobuf::int32 value) {
  set_has_lev();
  lev_ = value;
}

// -------------------------------------------------------------------

// OGAckLoginGetAward

// optional int32 pos = 1;
inline bool OGAckLoginGetAward::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckLoginGetAward::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckLoginGetAward::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckLoginGetAward::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::pos() const {
  return pos_;
}
inline void OGAckLoginGetAward::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string pic = 2;
inline bool OGAckLoginGetAward::has_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckLoginGetAward::set_has_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckLoginGetAward::clear_has_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckLoginGetAward::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckLoginGetAward::pic() const {
  return *pic_;
}
inline void OGAckLoginGetAward::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckLoginGetAward::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckLoginGetAward::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginGetAward::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckLoginGetAward::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 3;
inline bool OGAckLoginGetAward::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckLoginGetAward::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckLoginGetAward::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckLoginGetAward::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckLoginGetAward::content() const {
  return *content_;
}
inline void OGAckLoginGetAward::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginGetAward::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginGetAward::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginGetAward::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckLoginGetAward::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 itemtype = 4;
inline bool OGAckLoginGetAward::has_itemtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckLoginGetAward::set_has_itemtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckLoginGetAward::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckLoginGetAward::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::itemtype() const {
  return itemtype_;
}
inline void OGAckLoginGetAward::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
}

// optional int32 itemid = 5;
inline bool OGAckLoginGetAward::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckLoginGetAward::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckLoginGetAward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckLoginGetAward::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::itemid() const {
  return itemid_;
}
inline void OGAckLoginGetAward::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 6;
inline bool OGAckLoginGetAward::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckLoginGetAward::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckLoginGetAward::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckLoginGetAward::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::num() const {
  return num_;
}
inline void OGAckLoginGetAward::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional string roleName = 7;
inline bool OGAckLoginGetAward::has_rolename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckLoginGetAward::set_has_rolename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckLoginGetAward::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckLoginGetAward::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckLoginGetAward::rolename() const {
  return *rolename_;
}
inline void OGAckLoginGetAward::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckLoginGetAward::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckLoginGetAward::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginGetAward::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckLoginGetAward::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 ok = 8;
inline bool OGAckLoginGetAward::has_ok() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OGAckLoginGetAward::set_has_ok() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OGAckLoginGetAward::clear_has_ok() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OGAckLoginGetAward::clear_ok() {
  ok_ = 0;
  clear_has_ok();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::ok() const {
  return ok_;
}
inline void OGAckLoginGetAward::set_ok(::google::protobuf::int32 value) {
  set_has_ok();
  ok_ = value;
}

// optional int32 jilv = 9;
inline bool OGAckLoginGetAward::has_jilv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OGAckLoginGetAward::set_has_jilv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OGAckLoginGetAward::clear_has_jilv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OGAckLoginGetAward::clear_jilv() {
  jilv_ = 0;
  clear_has_jilv();
}
inline ::google::protobuf::int32 OGAckLoginGetAward::jilv() const {
  return jilv_;
}
inline void OGAckLoginGetAward::set_jilv(::google::protobuf::int32 value) {
  set_has_jilv();
  jilv_ = value;
}

// -------------------------------------------------------------------

// OGAckLoginAwardList_Award

// optional int32 pos = 1;
inline bool OGAckLoginAwardList_Award::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckLoginAwardList_Award::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckLoginAwardList_Award::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 OGAckLoginAwardList_Award::pos() const {
  return pos_;
}
inline void OGAckLoginAwardList_Award::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string pic = 2;
inline bool OGAckLoginAwardList_Award::has_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckLoginAwardList_Award::clear_has_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckLoginAwardList_Award::clear_pic() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& OGAckLoginAwardList_Award::pic() const {
  return *pic_;
}
inline void OGAckLoginAwardList_Award::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckLoginAwardList_Award::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
}
inline void OGAckLoginAwardList_Award::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginAwardList_Award::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    pic_ = new ::std::string;
  }
  return pic_;
}
inline ::std::string* OGAckLoginAwardList_Award::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lev = 3;
inline bool OGAckLoginAwardList_Award::has_lev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_lev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckLoginAwardList_Award::clear_has_lev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckLoginAwardList_Award::clear_lev() {
  lev_ = 0;
  clear_has_lev();
}
inline ::google::protobuf::int32 OGAckLoginAwardList_Award::lev() const {
  return lev_;
}
inline void OGAckLoginAwardList_Award::set_lev(::google::protobuf::int32 value) {
  set_has_lev();
  lev_ = value;
}

// optional string content = 4;
inline bool OGAckLoginAwardList_Award::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckLoginAwardList_Award::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckLoginAwardList_Award::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckLoginAwardList_Award::content() const {
  return *content_;
}
inline void OGAckLoginAwardList_Award::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginAwardList_Award::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckLoginAwardList_Award::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginAwardList_Award::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckLoginAwardList_Award::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 num = 5;
inline bool OGAckLoginAwardList_Award::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckLoginAwardList_Award::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckLoginAwardList_Award::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGAckLoginAwardList_Award::num() const {
  return num_;
}
inline void OGAckLoginAwardList_Award::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 type = 6;
inline bool OGAckLoginAwardList_Award::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckLoginAwardList_Award::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckLoginAwardList_Award::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckLoginAwardList_Award::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckLoginAwardList_Award::type() const {
  return type_;
}
inline void OGAckLoginAwardList_Award::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// OGAckLoginAwardList

// repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
inline int OGAckLoginAwardList::awardlist_size() const {
  return awardlist_.size();
}
inline void OGAckLoginAwardList::clear_awardlist() {
  awardlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckLoginAwardList_Award& OGAckLoginAwardList::awardlist(int index) const {
  return awardlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckLoginAwardList_Award* OGAckLoginAwardList::mutable_awardlist(int index) {
  return awardlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckLoginAwardList_Award* OGAckLoginAwardList::add_awardlist() {
  return awardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckLoginAwardList_Award >&
OGAckLoginAwardList::awardlist() const {
  return awardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckLoginAwardList_Award >*
OGAckLoginAwardList::mutable_awardlist() {
  return &awardlist_;
}

// optional string roleName = 2;
inline bool OGAckLoginAwardList::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckLoginAwardList::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckLoginAwardList::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckLoginAwardList::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckLoginAwardList::rolename() const {
  return *rolename_;
}
inline void OGAckLoginAwardList::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckLoginAwardList::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckLoginAwardList::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckLoginAwardList::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckLoginAwardList::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqDoubleJpResult

// optional int64 needGold = 1;
inline bool OGReqDoubleJpResult::has_needgold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqDoubleJpResult::set_has_needgold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqDoubleJpResult::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqDoubleJpResult::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 OGReqDoubleJpResult::needgold() const {
  return needgold_;
}
inline void OGReqDoubleJpResult::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// optional string roleName = 2;
inline bool OGReqDoubleJpResult::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqDoubleJpResult::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqDoubleJpResult::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqDoubleJpResult::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqDoubleJpResult::rolename() const {
  return *rolename_;
}
inline void OGReqDoubleJpResult::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqDoubleJpResult::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqDoubleJpResult::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqDoubleJpResult::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqDoubleJpResult::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userId = 3;
inline bool OGReqDoubleJpResult::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqDoubleJpResult::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqDoubleJpResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqDoubleJpResult::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& OGReqDoubleJpResult::userid() const {
  return *userid_;
}
inline void OGReqDoubleJpResult::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqDoubleJpResult::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void OGReqDoubleJpResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqDoubleJpResult::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* OGReqDoubleJpResult::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 daygold = 4;
inline bool OGReqDoubleJpResult::has_daygold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqDoubleJpResult::set_has_daygold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqDoubleJpResult::clear_has_daygold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqDoubleJpResult::clear_daygold() {
  daygold_ = GOOGLE_LONGLONG(0);
  clear_has_daygold();
}
inline ::google::protobuf::int64 OGReqDoubleJpResult::daygold() const {
  return daygold_;
}
inline void OGReqDoubleJpResult::set_daygold(::google::protobuf::int64 value) {
  set_has_daygold();
  daygold_ = value;
}

// optional int64 weekgold = 5;
inline bool OGReqDoubleJpResult::has_weekgold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGReqDoubleJpResult::set_has_weekgold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGReqDoubleJpResult::clear_has_weekgold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGReqDoubleJpResult::clear_weekgold() {
  weekgold_ = GOOGLE_LONGLONG(0);
  clear_has_weekgold();
}
inline ::google::protobuf::int64 OGReqDoubleJpResult::weekgold() const {
  return weekgold_;
}
inline void OGReqDoubleJpResult::set_weekgold(::google::protobuf::int64 value) {
  set_has_weekgold();
  weekgold_ = value;
}

// optional int64 monthgold = 6;
inline bool OGReqDoubleJpResult::has_monthgold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGReqDoubleJpResult::set_has_monthgold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGReqDoubleJpResult::clear_has_monthgold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGReqDoubleJpResult::clear_monthgold() {
  monthgold_ = GOOGLE_LONGLONG(0);
  clear_has_monthgold();
}
inline ::google::protobuf::int64 OGReqDoubleJpResult::monthgold() const {
  return monthgold_;
}
inline void OGReqDoubleJpResult::set_monthgold(::google::protobuf::int64 value) {
  set_has_monthgold();
  monthgold_ = value;
}

// -------------------------------------------------------------------

// OGAckDoubleJpResult

// optional int64 gold = 1;
inline bool OGAckDoubleJpResult::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckDoubleJpResult::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckDoubleJpResult::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckDoubleJpResult::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckDoubleJpResult::gold() const {
  return gold_;
}
inline void OGAckDoubleJpResult::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional string roleName = 2;
inline bool OGAckDoubleJpResult::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckDoubleJpResult::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckDoubleJpResult::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckDoubleJpResult::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckDoubleJpResult::rolename() const {
  return *rolename_;
}
inline void OGAckDoubleJpResult::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleJpResult::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckDoubleJpResult::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckDoubleJpResult::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckDoubleJpResult::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 needGold = 3;
inline bool OGAckDoubleJpResult::has_needgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckDoubleJpResult::set_has_needgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckDoubleJpResult::clear_has_needgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckDoubleJpResult::clear_needgold() {
  needgold_ = GOOGLE_LONGLONG(0);
  clear_has_needgold();
}
inline ::google::protobuf::int64 OGAckDoubleJpResult::needgold() const {
  return needgold_;
}
inline void OGAckDoubleJpResult::set_needgold(::google::protobuf::int64 value) {
  set_has_needgold();
  needgold_ = value;
}

// optional int64 jp = 4;
inline bool OGAckDoubleJpResult::has_jp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckDoubleJpResult::set_has_jp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckDoubleJpResult::clear_has_jp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckDoubleJpResult::clear_jp() {
  jp_ = GOOGLE_LONGLONG(0);
  clear_has_jp();
}
inline ::google::protobuf::int64 OGAckDoubleJpResult::jp() const {
  return jp_;
}
inline void OGAckDoubleJpResult::set_jp(::google::protobuf::int64 value) {
  set_has_jp();
  jp_ = value;
}

// optional int32 id = 5;
inline bool OGAckDoubleJpResult::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGAckDoubleJpResult::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGAckDoubleJpResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGAckDoubleJpResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OGAckDoubleJpResult::id() const {
  return id_;
}
inline void OGAckDoubleJpResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 jilv1 = 6;
inline bool OGAckDoubleJpResult::has_jilv1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGAckDoubleJpResult::set_has_jilv1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGAckDoubleJpResult::clear_has_jilv1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGAckDoubleJpResult::clear_jilv1() {
  jilv1_ = 0;
  clear_has_jilv1();
}
inline ::google::protobuf::int32 OGAckDoubleJpResult::jilv1() const {
  return jilv1_;
}
inline void OGAckDoubleJpResult::set_jilv1(::google::protobuf::int32 value) {
  set_has_jilv1();
  jilv1_ = value;
}

// optional int32 jilv2 = 7;
inline bool OGAckDoubleJpResult::has_jilv2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OGAckDoubleJpResult::set_has_jilv2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OGAckDoubleJpResult::clear_has_jilv2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OGAckDoubleJpResult::clear_jilv2() {
  jilv2_ = 0;
  clear_has_jilv2();
}
inline ::google::protobuf::int32 OGAckDoubleJpResult::jilv2() const {
  return jilv2_;
}
inline void OGAckDoubleJpResult::set_jilv2(::google::protobuf::int32 value) {
  set_has_jilv2();
  jilv2_ = value;
}

// -------------------------------------------------------------------

// OGAckDoublePlus_DoublePlus

// optional int32 startLev = 1;
inline bool OGAckDoublePlus_DoublePlus::has_startlev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckDoublePlus_DoublePlus::set_has_startlev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckDoublePlus_DoublePlus::clear_has_startlev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckDoublePlus_DoublePlus::clear_startlev() {
  startlev_ = 0;
  clear_has_startlev();
}
inline ::google::protobuf::int32 OGAckDoublePlus_DoublePlus::startlev() const {
  return startlev_;
}
inline void OGAckDoublePlus_DoublePlus::set_startlev(::google::protobuf::int32 value) {
  set_has_startlev();
  startlev_ = value;
}

// optional int32 plus = 2;
inline bool OGAckDoublePlus_DoublePlus::has_plus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckDoublePlus_DoublePlus::set_has_plus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckDoublePlus_DoublePlus::clear_has_plus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckDoublePlus_DoublePlus::clear_plus() {
  plus_ = 0;
  clear_has_plus();
}
inline ::google::protobuf::int32 OGAckDoublePlus_DoublePlus::plus() const {
  return plus_;
}
inline void OGAckDoublePlus_DoublePlus::set_plus(::google::protobuf::int32 value) {
  set_has_plus();
  plus_ = value;
}

// -------------------------------------------------------------------

// OGAckDoublePlus

// repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
inline int OGAckDoublePlus::doublepluslist_size() const {
  return doublepluslist_.size();
}
inline void OGAckDoublePlus::clear_doublepluslist() {
  doublepluslist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus& OGAckDoublePlus::doublepluslist(int index) const {
  return doublepluslist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus* OGAckDoublePlus::mutable_doublepluslist(int index) {
  return doublepluslist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus* OGAckDoublePlus::add_doublepluslist() {
  return doublepluslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus >&
OGAckDoublePlus::doublepluslist() const {
  return doublepluslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckDoublePlus_DoublePlus >*
OGAckDoublePlus::mutable_doublepluslist() {
  return &doublepluslist_;
}

// -------------------------------------------------------------------

// OGReqGetPlayer

// optional string rolename = 1;
inline bool OGReqGetPlayer::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqGetPlayer::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqGetPlayer::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqGetPlayer::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqGetPlayer::rolename() const {
  return *rolename_;
}
inline void OGReqGetPlayer::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqGetPlayer::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqGetPlayer::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqGetPlayer::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqGetPlayer::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqChangePutGold

// optional int64 gold = 1;
inline bool OGReqChangePutGold::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqChangePutGold::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqChangePutGold::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqChangePutGold::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGReqChangePutGold::gold() const {
  return gold_;
}
inline void OGReqChangePutGold::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 freeFlg = 2;
inline bool OGReqChangePutGold::has_freeflg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqChangePutGold::set_has_freeflg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqChangePutGold::clear_has_freeflg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqChangePutGold::clear_freeflg() {
  freeflg_ = GOOGLE_LONGLONG(0);
  clear_has_freeflg();
}
inline ::google::protobuf::int64 OGReqChangePutGold::freeflg() const {
  return freeflg_;
}
inline void OGReqChangePutGold::set_freeflg(::google::protobuf::int64 value) {
  set_has_freeflg();
  freeflg_ = value;
}

// optional int64 whiteGld = 3;
inline bool OGReqChangePutGold::has_whitegld() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqChangePutGold::set_has_whitegld() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqChangePutGold::clear_has_whitegld() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqChangePutGold::clear_whitegld() {
  whitegld_ = GOOGLE_LONGLONG(0);
  clear_has_whitegld();
}
inline ::google::protobuf::int64 OGReqChangePutGold::whitegld() const {
  return whitegld_;
}
inline void OGReqChangePutGold::set_whitegld(::google::protobuf::int64 value) {
  set_has_whitegld();
  whitegld_ = value;
}

// -------------------------------------------------------------------

// OGReqPetReturnAward

// optional int32 action = 1;
inline bool OGReqPetReturnAward::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqPetReturnAward::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqPetReturnAward::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqPetReturnAward::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 OGReqPetReturnAward::action() const {
  return action_;
}
inline void OGReqPetReturnAward::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// OGAckPetReturnAward

// optional int32 type = 1;
inline bool OGAckPetReturnAward::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckPetReturnAward::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckPetReturnAward::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckPetReturnAward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OGAckPetReturnAward::type() const {
  return type_;
}
inline void OGAckPetReturnAward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 gold = 2;
inline bool OGAckPetReturnAward::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckPetReturnAward::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckPetReturnAward::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckPetReturnAward::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGAckPetReturnAward::gold() const {
  return gold_;
}
inline void OGAckPetReturnAward::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// OGReqGetPutGoldAward

// optional int64 gold = 1;
inline bool OGReqGetPutGoldAward::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqGetPutGoldAward::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqGetPutGoldAward::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 OGReqGetPutGoldAward::gold() const {
  return gold_;
}
inline void OGReqGetPutGoldAward::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional string roleName = 2;
inline bool OGReqGetPutGoldAward::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGReqGetPutGoldAward::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGReqGetPutGoldAward::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqGetPutGoldAward::rolename() const {
  return *rolename_;
}
inline void OGReqGetPutGoldAward::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqGetPutGoldAward::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqGetPutGoldAward::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqGetPutGoldAward::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqGetPutGoldAward::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 putGold = 3;
inline bool OGReqGetPutGoldAward::has_putgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_putgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGReqGetPutGoldAward::clear_has_putgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGReqGetPutGoldAward::clear_putgold() {
  putgold_ = GOOGLE_LONGLONG(0);
  clear_has_putgold();
}
inline ::google::protobuf::int64 OGReqGetPutGoldAward::putgold() const {
  return putgold_;
}
inline void OGReqGetPutGoldAward::set_putgold(::google::protobuf::int64 value) {
  set_has_putgold();
  putgold_ = value;
}

// optional int32 action = 4;
inline bool OGReqGetPutGoldAward::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGReqGetPutGoldAward::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGReqGetPutGoldAward::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 OGReqGetPutGoldAward::action() const {
  return action_;
}
inline void OGReqGetPutGoldAward::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// optional int32 com = 5;
inline bool OGReqGetPutGoldAward::has_com() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_com() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OGReqGetPutGoldAward::clear_has_com() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OGReqGetPutGoldAward::clear_com() {
  com_ = 0;
  clear_has_com();
}
inline ::google::protobuf::int32 OGReqGetPutGoldAward::com() const {
  return com_;
}
inline void OGReqGetPutGoldAward::set_com(::google::protobuf::int32 value) {
  set_has_com();
  com_ = value;
}

// optional int64 putGoldSum = 6;
inline bool OGReqGetPutGoldAward::has_putgoldsum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OGReqGetPutGoldAward::set_has_putgoldsum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OGReqGetPutGoldAward::clear_has_putgoldsum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OGReqGetPutGoldAward::clear_putgoldsum() {
  putgoldsum_ = GOOGLE_LONGLONG(0);
  clear_has_putgoldsum();
}
inline ::google::protobuf::int64 OGReqGetPutGoldAward::putgoldsum() const {
  return putgoldsum_;
}
inline void OGReqGetPutGoldAward::set_putgoldsum(::google::protobuf::int64 value) {
  set_has_putgoldsum();
  putgoldsum_ = value;
}

// -------------------------------------------------------------------

// OGAckReSetFeed_PlayerFeed

// optional string roleName = 1;
inline bool OGAckReSetFeed_PlayerFeed::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckReSetFeed_PlayerFeed::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckReSetFeed_PlayerFeed::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckReSetFeed_PlayerFeed::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckReSetFeed_PlayerFeed::rolename() const {
  return *rolename_;
}
inline void OGAckReSetFeed_PlayerFeed::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckReSetFeed_PlayerFeed::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckReSetFeed_PlayerFeed::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckReSetFeed_PlayerFeed::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckReSetFeed_PlayerFeed::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 feed = 2;
inline bool OGAckReSetFeed_PlayerFeed::has_feed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckReSetFeed_PlayerFeed::set_has_feed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckReSetFeed_PlayerFeed::clear_has_feed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckReSetFeed_PlayerFeed::clear_feed() {
  feed_ = 0;
  clear_has_feed();
}
inline ::google::protobuf::int32 OGAckReSetFeed_PlayerFeed::feed() const {
  return feed_;
}
inline void OGAckReSetFeed_PlayerFeed::set_feed(::google::protobuf::int32 value) {
  set_has_feed();
  feed_ = value;
}

// -------------------------------------------------------------------

// OGAckReSetFeed

// repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
inline int OGAckReSetFeed::playerfeedlist_size() const {
  return playerfeedlist_.size();
}
inline void OGAckReSetFeed::clear_playerfeedlist() {
  playerfeedlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed& OGAckReSetFeed::playerfeedlist(int index) const {
  return playerfeedlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed* OGAckReSetFeed::mutable_playerfeedlist(int index) {
  return playerfeedlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed* OGAckReSetFeed::add_playerfeedlist() {
  return playerfeedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed >&
OGAckReSetFeed::playerfeedlist() const {
  return playerfeedlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckReSetFeed_PlayerFeed >*
OGAckReSetFeed::mutable_playerfeedlist() {
  return &playerfeedlist_;
}

// -------------------------------------------------------------------

// OGReqJpStart

// optional string roleName = 1;
inline bool OGReqJpStart::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqJpStart::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqJpStart::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqJpStart::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGReqJpStart::rolename() const {
  return *rolename_;
}
inline void OGReqJpStart::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpStart::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGReqJpStart::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqJpStart::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGReqJpStart::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckJpStart

// optional string roleName = 1;
inline bool OGAckJpStart::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckJpStart::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckJpStart::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckJpStart::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OGAckJpStart::rolename() const {
  return *rolename_;
}
inline void OGAckJpStart::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckJpStart::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OGAckJpStart::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpStart::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OGAckJpStart::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string jpStarName = 2;
inline bool OGAckJpStart::has_jpstarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckJpStart::set_has_jpstarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckJpStart::clear_has_jpstarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckJpStart::clear_jpstarname() {
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    jpstarname_->clear();
  }
  clear_has_jpstarname();
}
inline const ::std::string& OGAckJpStart::jpstarname() const {
  return *jpstarname_;
}
inline void OGAckJpStart::set_jpstarname(const ::std::string& value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void OGAckJpStart::set_jpstarname(const char* value) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(value);
}
inline void OGAckJpStart::set_jpstarname(const char* value, size_t size) {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  jpstarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpStart::mutable_jpstarname() {
  set_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    jpstarname_ = new ::std::string;
  }
  return jpstarname_;
}
inline ::std::string* OGAckJpStart::release_jpstarname() {
  clear_has_jpstarname();
  if (jpstarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpstarname_;
    jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 jpStarTemNum = 3;
inline bool OGAckJpStart::has_jpstartemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckJpStart::set_has_jpstartemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckJpStart::clear_has_jpstartemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckJpStart::clear_jpstartemnum() {
  jpstartemnum_ = GOOGLE_LONGLONG(0);
  clear_has_jpstartemnum();
}
inline ::google::protobuf::int64 OGAckJpStart::jpstartemnum() const {
  return jpstartemnum_;
}
inline void OGAckJpStart::set_jpstartemnum(::google::protobuf::int64 value) {
  set_has_jpstartemnum();
  jpstartemnum_ = value;
}

// optional string jpStarTime = 4;
inline bool OGAckJpStart::has_jpstartime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OGAckJpStart::set_has_jpstartime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OGAckJpStart::clear_has_jpstartime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OGAckJpStart::clear_jpstartime() {
  if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
    jpstartime_->clear();
  }
  clear_has_jpstartime();
}
inline const ::std::string& OGAckJpStart::jpstartime() const {
  return *jpstartime_;
}
inline void OGAckJpStart::set_jpstartime(const ::std::string& value) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(value);
}
inline void OGAckJpStart::set_jpstartime(const char* value) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(value);
}
inline void OGAckJpStart::set_jpstartime(const char* value, size_t size) {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  jpstartime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpStart::mutable_jpstartime() {
  set_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    jpstartime_ = new ::std::string;
  }
  return jpstartime_;
}
inline ::std::string* OGAckJpStart::release_jpstartime() {
  clear_has_jpstartime();
  if (jpstartime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jpstartime_;
    jpstartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqBindPhone

// -------------------------------------------------------------------

// OGAckBindPhone

// optional int32 result = 1;
inline bool OGAckBindPhone::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckBindPhone::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckBindPhone::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckBindPhone::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckBindPhone::result() const {
  return result_;
}
inline void OGAckBindPhone::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string phone = 2;
inline bool OGAckBindPhone::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckBindPhone::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckBindPhone::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckBindPhone::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& OGAckBindPhone::phone() const {
  return *phone_;
}
inline void OGAckBindPhone::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGAckBindPhone::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGAckBindPhone::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckBindPhone::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* OGAckBindPhone::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqGetPhoneCode

// optional string phone = 1;
inline bool OGReqGetPhoneCode::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqGetPhoneCode::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqGetPhoneCode::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqGetPhoneCode::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& OGReqGetPhoneCode::phone() const {
  return *phone_;
}
inline void OGReqGetPhoneCode::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGReqGetPhoneCode::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGReqGetPhoneCode::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGReqGetPhoneCode::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* OGReqGetPhoneCode::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckGetPhoneCode

// optional string msg = 1;
inline bool OGAckGetPhoneCode::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckGetPhoneCode::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckGetPhoneCode::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckGetPhoneCode::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& OGAckGetPhoneCode::msg() const {
  return *msg_;
}
inline void OGAckGetPhoneCode::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OGAckGetPhoneCode::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OGAckGetPhoneCode::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGetPhoneCode::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* OGAckGetPhoneCode::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGReqGetPhoneAward

// optional int32 code = 1;
inline bool OGReqGetPhoneAward::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGReqGetPhoneAward::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGReqGetPhoneAward::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGReqGetPhoneAward::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 OGReqGetPhoneAward::code() const {
  return code_;
}
inline void OGReqGetPhoneAward::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// OGAckGetPhoneAward

// optional string msg = 1;
inline bool OGAckGetPhoneAward::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckGetPhoneAward::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckGetPhoneAward::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckGetPhoneAward::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& OGAckGetPhoneAward::msg() const {
  return *msg_;
}
inline void OGAckGetPhoneAward::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OGAckGetPhoneAward::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OGAckGetPhoneAward::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGetPhoneAward::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* OGAckGetPhoneAward::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 result = 2;
inline bool OGAckGetPhoneAward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckGetPhoneAward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckGetPhoneAward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckGetPhoneAward::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OGAckGetPhoneAward::result() const {
  return result_;
}
inline void OGAckGetPhoneAward::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string phone = 3;
inline bool OGAckGetPhoneAward::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckGetPhoneAward::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckGetPhoneAward::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckGetPhoneAward::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& OGAckGetPhoneAward::phone() const {
  return *phone_;
}
inline void OGAckGetPhoneAward::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGAckGetPhoneAward::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OGAckGetPhoneAward::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckGetPhoneAward::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* OGAckGetPhoneAward::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckAddJpNum

// optional int64 addJpNum = 1;
inline bool OGAckAddJpNum::has_addjpnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckAddJpNum::set_has_addjpnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckAddJpNum::clear_has_addjpnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckAddJpNum::clear_addjpnum() {
  addjpnum_ = GOOGLE_LONGLONG(0);
  clear_has_addjpnum();
}
inline ::google::protobuf::int64 OGAckAddJpNum::addjpnum() const {
  return addjpnum_;
}
inline void OGAckAddJpNum::set_addjpnum(::google::protobuf::int64 value) {
  set_has_addjpnum();
  addjpnum_ = value;
}

// optional int32 flg = 2;
inline bool OGAckAddJpNum::has_flg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckAddJpNum::set_has_flg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckAddJpNum::clear_has_flg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckAddJpNum::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 OGAckAddJpNum::flg() const {
  return flg_;
}
inline void OGAckAddJpNum::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
}

// -------------------------------------------------------------------

// OGAckJpHall_HallContent

// optional string name = 1;
inline bool OGAckJpHall_HallContent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckJpHall_HallContent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckJpHall_HallContent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckJpHall_HallContent::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OGAckJpHall_HallContent::name() const {
  return *name_;
}
inline void OGAckJpHall_HallContent::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckJpHall_HallContent::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OGAckJpHall_HallContent::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpHall_HallContent::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OGAckJpHall_HallContent::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 golod = 2;
inline bool OGAckJpHall_HallContent::has_golod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckJpHall_HallContent::set_has_golod() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckJpHall_HallContent::clear_has_golod() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckJpHall_HallContent::clear_golod() {
  golod_ = GOOGLE_LONGLONG(0);
  clear_has_golod();
}
inline ::google::protobuf::int64 OGAckJpHall_HallContent::golod() const {
  return golod_;
}
inline void OGAckJpHall_HallContent::set_golod(::google::protobuf::int64 value) {
  set_has_golod();
  golod_ = value;
}

// optional string time = 3;
inline bool OGAckJpHall_HallContent::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OGAckJpHall_HallContent::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OGAckJpHall_HallContent::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OGAckJpHall_HallContent::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& OGAckJpHall_HallContent::time() const {
  return *time_;
}
inline void OGAckJpHall_HallContent::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void OGAckJpHall_HallContent::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void OGAckJpHall_HallContent::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckJpHall_HallContent::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* OGAckJpHall_HallContent::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckJpHall

// repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
inline int OGAckJpHall::contentlist_size() const {
  return contentlist_.size();
}
inline void OGAckJpHall::clear_contentlist() {
  contentlist_.Clear();
}
inline const ::com::ourgame::texasSlots::OGAckJpHall_HallContent& OGAckJpHall::contentlist(int index) const {
  return contentlist_.Get(index);
}
inline ::com::ourgame::texasSlots::OGAckJpHall_HallContent* OGAckJpHall::mutable_contentlist(int index) {
  return contentlist_.Mutable(index);
}
inline ::com::ourgame::texasSlots::OGAckJpHall_HallContent* OGAckJpHall::add_contentlist() {
  return contentlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpHall_HallContent >&
OGAckJpHall::contentlist() const {
  return contentlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ourgame::texasSlots::OGAckJpHall_HallContent >*
OGAckJpHall::mutable_contentlist() {
  return &contentlist_;
}

// -------------------------------------------------------------------

// OGAckAd

// optional int32 on = 1;
inline bool OGAckAd::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckAd::set_has_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckAd::clear_has_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckAd::clear_on() {
  on_ = 0;
  clear_has_on();
}
inline ::google::protobuf::int32 OGAckAd::on() const {
  return on_;
}
inline void OGAckAd::set_on(::google::protobuf::int32 value) {
  set_has_on();
  on_ = value;
}

// optional string content = 2;
inline bool OGAckAd::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OGAckAd::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OGAckAd::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OGAckAd::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OGAckAd::content() const {
  return *content_;
}
inline void OGAckAd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckAd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OGAckAd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OGAckAd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OGAckAd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OGAckLeaveGame

// -------------------------------------------------------------------

// OGAckYDFreeTimes

// optional int32 num = 1;
inline bool OGAckYDFreeTimes::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OGAckYDFreeTimes::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OGAckYDFreeTimes::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OGAckYDFreeTimes::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 OGAckYDFreeTimes::num() const {
  return num_;
}
inline void OGAckYDFreeTimes::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace texasSlots
}  // namespace ourgame
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType>() {
  return ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult>() {
  return ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType>() {
  return ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult>() {
  return ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType>() {
  return ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckRoom_E_TRResult>() {
  return ::com::ourgame::texasSlots::OGAckRoom_E_TRResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGReqExitType_E_MsgType>() {
  return ::com::ourgame::texasSlots::OGReqExitType_E_MsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckExit_E_MsgType>() {
  return ::com::ourgame::texasSlots::OGAckExit_E_MsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGReqDoubleGame_E_TIMES>() {
  return ::com::ourgame::texasSlots::OGReqDoubleGame_E_TIMES_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGReqDoubleGame_E_COLOUR>() {
  return ::com::ourgame::texasSlots::OGReqDoubleGame_E_COLOUR_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckDoubleResult_E_Result>() {
  return ::com::ourgame::texasSlots::OGAckDoubleResult_E_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ourgame::texasSlots::OGAckStopGame_E_Status>() {
  return ::com::ourgame::texasSlots::OGAckStopGame_E_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::ourgame::texasSlots::E_TRCardColorType>() {
  return com::ourgame::texasSlots::E_TRCardColorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::ourgame::texasSlots::E_TRCardNumber>() {
  return com::ourgame::texasSlots::E_TRCardNumber_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OGTexasSlotsProtocol_2eproto__INCLUDED
