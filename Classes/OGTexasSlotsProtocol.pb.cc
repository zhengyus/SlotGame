// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OGTexasSlotsProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ourgame {
namespace texasSlots {

namespace {

const ::google::protobuf::Descriptor* OGReqTRLogin1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqTRLogin1_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLinkServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLinkServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_TRResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGReqTRLogin2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqTRLogin2_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoleLoginMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoleLoginMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_TRResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoleMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoleMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetUpdatedMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetUpdatedMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoomList_Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoomList_Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqJoinRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqJoinRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoom_RoomBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoom_RoomBet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckRoom_E_ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckRoom_E_TRResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGAckBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqExitType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqExitType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGReqExitType_E_MsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGAckExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckExit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckExit_E_MsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGReqStartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqStartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqDoubleGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqDoubleGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_TIMES_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_COLOUR_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGAckGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckGameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameToJSupport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameToJSupport_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckDoubleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckDoubleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckDoubleResult_E_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGReqDoubleGetGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqDoubleGetGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckDoubleGetGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckDoubleGetGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameLoseMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLoseMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqJP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqJP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRoleUpLev_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRoleUpLev_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqReadDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqReadDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPool_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqMailsToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqMailsToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqAddWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqAddWhite_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqWhiteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqWhiteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckWhiteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckWhiteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckWhiteList_White_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckWhiteList_White_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqDelWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqDelWhite_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqSelectWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqSelectWhite_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckSelectWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckSelectWhite_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetList_Pet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetList_Pet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetReSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetReSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetJoinFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetJoinFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqItemChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqItemChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqItemChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqItemChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckItemChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckItemChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckItemChangeData_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckItemChangeData_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetChangeData_ChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetChangeData_ChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckItemChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckItemChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetReSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetReSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetGridOnList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetGridOnList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetGridOnList_PetGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetGridOnList_PetGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetFightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetFightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetFlee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetFlee_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetGetAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetGetAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetGetAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetGetAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetGetAward_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetGetAward_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRankList_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRankList_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRank_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRank_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqRankToJS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqRankToJS_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGGuangGao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGGuangGao_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckStopGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckStopGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OGAckStopGame_E_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OGAckMails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckMails_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckMails_Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckMails_Mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqHandleMails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqHandleMails_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqMails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqMails_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckUnreadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckUnreadMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckItems_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckItems_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckShopItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckShopItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckShopItemInfo_ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckShopItemInfo_ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckCutItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckCutItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckCutItems_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckCutItems_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqNewHandOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqNewHandOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqNewHandAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqNewHandAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckNewHandAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckNewHandAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPlayerLogot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPlayerLogot_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckRankHour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckRankHour_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqJpRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqJpRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqJpStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqJpStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJpRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJpRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJpRecord_JpRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJpRecord_JpRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLoginJpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLoginJpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqLoginGetAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqLoginGetAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLoginGetAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLoginGetAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLoginAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLoginAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLoginAwardList_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLoginAwardList_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqDoubleJpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqDoubleJpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckDoubleJpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckDoubleJpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckDoublePlus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckDoublePlus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckDoublePlus_DoublePlus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckDoublePlus_DoublePlus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqGetPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqGetPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqChangePutGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqChangePutGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqPetReturnAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqPetReturnAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckPetReturnAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckPetReturnAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqGetPutGoldAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqGetPutGoldAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckReSetFeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckReSetFeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckReSetFeed_PlayerFeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckReSetFeed_PlayerFeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqJpStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqJpStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJpStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJpStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqBindPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqBindPhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckBindPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckBindPhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqGetPhoneCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqGetPhoneCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckGetPhoneCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckGetPhoneCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGReqGetPhoneAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGReqGetPhoneAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckGetPhoneAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckGetPhoneAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckAddJpNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckAddJpNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJpHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJpHall_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckJpHall_HallContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckJpHall_HallContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* OGAckYDFreeTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OGAckYDFreeTimes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* E_TRCardColorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_TRCardNumber_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto() {
  protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OGTexasSlotsProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  OGReqTRLogin1_descriptor_ = file->message_type(0);
  static const int OGReqTRLogin1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin1, userid_),
  };
  OGReqTRLogin1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqTRLogin1_descriptor_,
      OGReqTRLogin1::default_instance_,
      OGReqTRLogin1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqTRLogin1));
  OGAckLinkServer_descriptor_ = file->message_type(1);
  static const int OGAckLinkServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, linkip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, linkport_),
  };
  OGAckLinkServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLinkServer_descriptor_,
      OGAckLinkServer::default_instance_,
      OGAckLinkServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLinkServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLinkServer));
  OGAckLinkServer_E_ErrorType_descriptor_ = OGAckLinkServer_descriptor_->enum_type(0);
  OGAckLinkServer_E_TRResult_descriptor_ = OGAckLinkServer_descriptor_->enum_type(1);
  OGReqTRLogin2_descriptor_ = file->message_type(2);
  static const int OGReqTRLogin2_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, comfromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, entrance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, come_),
  };
  OGReqTRLogin2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqTRLogin2_descriptor_,
      OGReqTRLogin2::default_instance_,
      OGReqTRLogin2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqTRLogin2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqTRLogin2));
  OGAckRoleLoginMsg_descriptor_ = file->message_type(3);
  static const int OGAckRoleLoginMsg_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, reqexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, gridnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, newhand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, mailnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, newhandaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, petfightaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, loginnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, loginawardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, comefromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, topranktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, doubleuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, fondle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, fourtimeson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, newgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, content_),
  };
  OGAckRoleLoginMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoleLoginMsg_descriptor_,
      OGAckRoleLoginMsg::default_instance_,
      OGAckRoleLoginMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleLoginMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoleLoginMsg));
  OGAckRoleLoginMsg_E_ErrorType_descriptor_ = OGAckRoleLoginMsg_descriptor_->enum_type(0);
  OGAckRoleLoginMsg_E_TRResult_descriptor_ = OGAckRoleLoginMsg_descriptor_->enum_type(1);
  OGAckRoleMsg_descriptor_ = file->message_type(4);
  static const int OGAckRoleMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, reqexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, gridnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, loginawardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, fondle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, newgold_),
  };
  OGAckRoleMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoleMsg_descriptor_,
      OGAckRoleMsg::default_instance_,
      OGAckRoleMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoleMsg));
  OGAckPetUpdatedMsg_descriptor_ = file->message_type(5);
  static const int OGAckPetUpdatedMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, bloodplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, attackplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, awardplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, reqexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, flg_),
  };
  OGAckPetUpdatedMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetUpdatedMsg_descriptor_,
      OGAckPetUpdatedMsg::default_instance_,
      OGAckPetUpdatedMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetUpdatedMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetUpdatedMsg));
  OGAckGameServer_descriptor_ = file->message_type(6);
  static const int OGAckGameServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, client_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, linkip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, linkport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, gameid_),
  };
  OGAckGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckGameServer_descriptor_,
      OGAckGameServer::default_instance_,
      OGAckGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckGameServer));
  OGAckRoomList_descriptor_ = file->message_type(7);
  static const int OGAckRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList, roomlist_),
  };
  OGAckRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoomList_descriptor_,
      OGAckRoomList::default_instance_,
      OGAckRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoomList));
  OGAckRoomList_Room_descriptor_ = OGAckRoomList_descriptor_->nested_type(0);
  static const int OGAckRoomList_Room_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomtip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, roomon_),
  };
  OGAckRoomList_Room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoomList_Room_descriptor_,
      OGAckRoomList_Room::default_instance_,
      OGAckRoomList_Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoomList_Room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoomList_Room));
  OGReqJoinRoom_descriptor_ = file->message_type(8);
  static const int OGReqJoinRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJoinRoom, roomid_),
  };
  OGReqJoinRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqJoinRoom_descriptor_,
      OGReqJoinRoom::default_instance_,
      OGReqJoinRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJoinRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJoinRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqJoinRoom));
  OGAckRoom_descriptor_ = file->message_type(9);
  static const int OGAckRoom_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roommaxline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roommaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roombasegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roompic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, roomdoubleon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, freeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, fourtimeson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, betlist_),
  };
  OGAckRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoom_descriptor_,
      OGAckRoom::default_instance_,
      OGAckRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoom));
  OGAckRoom_RoomBet_descriptor_ = OGAckRoom_descriptor_->nested_type(0);
  static const int OGAckRoom_RoomBet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom_RoomBet, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom_RoomBet, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom_RoomBet, bet_),
  };
  OGAckRoom_RoomBet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoom_RoomBet_descriptor_,
      OGAckRoom_RoomBet::default_instance_,
      OGAckRoom_RoomBet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom_RoomBet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoom_RoomBet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoom_RoomBet));
  OGAckRoom_E_ErrorType_descriptor_ = OGAckRoom_descriptor_->enum_type(0);
  OGAckRoom_E_TRResult_descriptor_ = OGAckRoom_descriptor_->enum_type(1);
  OGAckBoss_descriptor_ = file->message_type(10);
  static const int OGAckBoss_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, bossneedgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, roompic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, bosspic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, petcurrgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, bossblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, bossbloodmax_),
  };
  OGAckBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckBoss_descriptor_,
      OGAckBoss::default_instance_,
      OGAckBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckBoss));
  OGReqExitType_descriptor_ = file->message_type(11);
  static const int OGReqExitType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqExitType, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqExitType, result_),
  };
  OGReqExitType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqExitType_descriptor_,
      OGReqExitType::default_instance_,
      OGReqExitType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqExitType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqExitType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqExitType));
  OGReqExitType_E_MsgType_descriptor_ = OGReqExitType_descriptor_->enum_type(0);
  OGAckExit_descriptor_ = file->message_type(12);
  static const int OGAckExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckExit, msgtype_),
  };
  OGAckExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckExit_descriptor_,
      OGAckExit::default_instance_,
      OGAckExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckExit));
  OGAckExit_E_MsgType_descriptor_ = OGAckExit_descriptor_->enum_type(0);
  OGReqStartGame_descriptor_ = file->message_type(13);
  static const int OGReqStartGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqStartGame, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqStartGame, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqStartGame, auto__),
  };
  OGReqStartGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqStartGame_descriptor_,
      OGReqStartGame::default_instance_,
      OGReqStartGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqStartGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqStartGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqStartGame));
  OGReqDoubleGame_descriptor_ = file->message_type(14);
  static const int OGReqDoubleGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGame, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGame, colour_),
  };
  OGReqDoubleGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqDoubleGame_descriptor_,
      OGReqDoubleGame::default_instance_,
      OGReqDoubleGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqDoubleGame));
  OGReqDoubleGame_E_TIMES_descriptor_ = OGReqDoubleGame_descriptor_->enum_type(0);
  OGReqDoubleGame_E_COLOUR_descriptor_ = OGReqDoubleGame_descriptor_->enum_type(1);
  OGAckGameResult_descriptor_ = file->message_type(15);
  static const int OGAckGameResult_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, grid15_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, winexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, jplinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, petwinexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, petwingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, wrongmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, freeflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, goldplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, freetimes_),
  };
  OGAckGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckGameResult_descriptor_,
      OGAckGameResult::default_instance_,
      OGAckGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckGameResult));
  GameToJSupport_descriptor_ = file->message_type(16);
  static const int GameToJSupport_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, winexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, jplinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, jppass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, jp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, bigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, petwingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, jpbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, petwinexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, str1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, freeflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, goldplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, jpstarname_),
  };
  GameToJSupport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameToJSupport_descriptor_,
      GameToJSupport::default_instance_,
      GameToJSupport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToJSupport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameToJSupport));
  OGAckDoubleResult_descriptor_ = file->message_type(17);
  static const int OGAckDoubleResult_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, cardnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, getgoldflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, bigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, goldplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, goldplusvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, colour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, whiteflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, doubletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, freetimes_),
  };
  OGAckDoubleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckDoubleResult_descriptor_,
      OGAckDoubleResult::default_instance_,
      OGAckDoubleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckDoubleResult));
  OGAckDoubleResult_E_Result_descriptor_ = OGAckDoubleResult_descriptor_->enum_type(0);
  OGReqDoubleGetGold_descriptor_ = file->message_type(18);
  static const int OGReqDoubleGetGold_offsets_[1] = {
  };
  OGReqDoubleGetGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqDoubleGetGold_descriptor_,
      OGReqDoubleGetGold::default_instance_,
      OGReqDoubleGetGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGetGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleGetGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqDoubleGetGold));
  OGAckDoubleGetGold_descriptor_ = file->message_type(19);
  static const int OGAckDoubleGetGold_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, goldplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, goldplusvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, page_),
  };
  OGAckDoubleGetGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckDoubleGetGold_descriptor_,
      OGAckDoubleGetGold::default_instance_,
      OGAckDoubleGetGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleGetGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckDoubleGetGold));
  GameLoseMoney_descriptor_ = file->message_type(20);
  static const int GameLoseMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoseMoney, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoseMoney, needgold_),
  };
  GameLoseMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLoseMoney_descriptor_,
      GameLoseMoney::default_instance_,
      GameLoseMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoseMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoseMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLoseMoney));
  ReqJP_descriptor_ = file->message_type(21);
  static const int ReqJP_offsets_[1] = {
  };
  ReqJP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqJP_descriptor_,
      ReqJP::default_instance_,
      ReqJP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqJP));
  OGAckJP_descriptor_ = file->message_type(22);
  static const int OGAckJP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJP, jp_),
  };
  OGAckJP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJP_descriptor_,
      OGAckJP::default_instance_,
      OGAckJP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJP));
  OGAckRoleUpLev_descriptor_ = file->message_type(23);
  static const int OGAckRoleUpLev_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleUpLev, curlev_),
  };
  OGAckRoleUpLev_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRoleUpLev_descriptor_,
      OGAckRoleUpLev::default_instance_,
      OGAckRoleUpLev_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleUpLev, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRoleUpLev, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRoleUpLev));
  OGReqReadDB_descriptor_ = file->message_type(24);
  static const int OGReqReadDB_offsets_[1] = {
  };
  OGReqReadDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqReadDB_descriptor_,
      OGReqReadDB::default_instance_,
      OGReqReadDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqReadDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqReadDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqReadDB));
  OGReqPool_descriptor_ = file->message_type(25);
  static const int OGReqPool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPool, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPool, value_),
  };
  OGReqPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPool_descriptor_,
      OGReqPool::default_instance_,
      OGReqPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPool));
  OGReqMailsToPlayer_descriptor_ = file->message_type(26);
  static const int OGReqMailsToPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqMailsToPlayer, players_),
  };
  OGReqMailsToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqMailsToPlayer_descriptor_,
      OGReqMailsToPlayer::default_instance_,
      OGReqMailsToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqMailsToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqMailsToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqMailsToPlayer));
  OGReqAddWhite_descriptor_ = file->message_type(27);
  static const int OGReqAddWhite_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_upjilv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, total_downjilv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, white_),
  };
  OGReqAddWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqAddWhite_descriptor_,
      OGReqAddWhite::default_instance_,
      OGReqAddWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqAddWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqAddWhite));
  OGReqWhiteList_descriptor_ = file->message_type(28);
  static const int OGReqWhiteList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqWhiteList, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqWhiteList, white_),
  };
  OGReqWhiteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqWhiteList_descriptor_,
      OGReqWhiteList::default_instance_,
      OGReqWhiteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqWhiteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqWhiteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqWhiteList));
  OGAckWhiteList_descriptor_ = file->message_type(29);
  static const int OGAckWhiteList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList, whitelist_),
  };
  OGAckWhiteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckWhiteList_descriptor_,
      OGAckWhiteList::default_instance_,
      OGAckWhiteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckWhiteList));
  OGAckWhiteList_White_descriptor_ = OGAckWhiteList_descriptor_->nested_type(0);
  static const int OGAckWhiteList_White_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_upjilv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, total_downjilv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, winday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, winmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, wintotal_),
  };
  OGAckWhiteList_White_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckWhiteList_White_descriptor_,
      OGAckWhiteList_White::default_instance_,
      OGAckWhiteList_White_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckWhiteList_White, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckWhiteList_White));
  OGReqDelWhite_descriptor_ = file->message_type(30);
  static const int OGReqDelWhite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, white_),
  };
  OGReqDelWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqDelWhite_descriptor_,
      OGReqDelWhite::default_instance_,
      OGReqDelWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDelWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqDelWhite));
  OGReqSelectWhite_descriptor_ = file->message_type(31);
  static const int OGReqSelectWhite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqSelectWhite, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqSelectWhite, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqSelectWhite, white_),
  };
  OGReqSelectWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqSelectWhite_descriptor_,
      OGReqSelectWhite::default_instance_,
      OGReqSelectWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqSelectWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqSelectWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqSelectWhite));
  OGAckSelectWhite_descriptor_ = file->message_type(32);
  static const int OGAckSelectWhite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, wintotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, white_),
  };
  OGAckSelectWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckSelectWhite_descriptor_,
      OGAckSelectWhite::default_instance_,
      OGAckSelectWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckSelectWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckSelectWhite));
  OGAckPet_descriptor_ = file->message_type(33);
  static const int OGAckPet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, petname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, pinzhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, award_),
  };
  OGAckPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPet_descriptor_,
      OGAckPet::default_instance_,
      OGAckPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPet));
  OGReqPetList_descriptor_ = file->message_type(34);
  static const int OGReqPetList_offsets_[1] = {
  };
  OGReqPetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetList_descriptor_,
      OGReqPetList::default_instance_,
      OGReqPetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetList));
  OGAckPetList_descriptor_ = file->message_type(35);
  static const int OGAckPetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList, petlist_),
  };
  OGAckPetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetList_descriptor_,
      OGAckPetList::default_instance_,
      OGAckPetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetList));
  OGAckPetList_Pet_descriptor_ = OGAckPetList_descriptor_->nested_type(0);
  static const int OGAckPetList_Pet_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, petname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, pinzhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, bloodmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, bloodmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, bloodplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, attackmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, attackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, attackplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, awardmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, awardmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, awardplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, reqexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, petpic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, maxlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, csvid_),
  };
  OGAckPetList_Pet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetList_Pet_descriptor_,
      OGAckPetList_Pet::default_instance_,
      OGAckPetList_Pet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetList_Pet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetList_Pet));
  OGReqPetReSet_descriptor_ = file->message_type(36);
  static const int OGReqPetReSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReSet, petid_),
  };
  OGReqPetReSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetReSet_descriptor_,
      OGReqPetReSet::default_instance_,
      OGReqPetReSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetReSet));
  OGReqPetJoinFight_descriptor_ = file->message_type(37);
  static const int OGReqPetJoinFight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetJoinFight, petid_),
  };
  OGReqPetJoinFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetJoinFight_descriptor_,
      OGReqPetJoinFight::default_instance_,
      OGReqPetJoinFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetJoinFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetJoinFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetJoinFight));
  OGReqPetChange_descriptor_ = file->message_type(38);
  static const int OGReqPetChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetChange, petid_),
  };
  OGReqPetChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetChange_descriptor_,
      OGReqPetChange::default_instance_,
      OGReqPetChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetChange));
  OGAckPetChange_descriptor_ = file->message_type(39);
  static const int OGAckPetChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, pic_),
  };
  OGAckPetChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetChange_descriptor_,
      OGAckPetChange::default_instance_,
      OGAckPetChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetChange));
  OGReqItemChange_descriptor_ = file->message_type(40);
  static const int OGReqItemChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChange, debrisitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChange, evolveid_),
  };
  OGReqItemChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqItemChange_descriptor_,
      OGReqItemChange::default_instance_,
      OGReqItemChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqItemChange));
  OGReqItemChangeData_descriptor_ = file->message_type(41);
  static const int OGReqItemChangeData_offsets_[1] = {
  };
  OGReqItemChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqItemChangeData_descriptor_,
      OGReqItemChangeData::default_instance_,
      OGReqItemChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqItemChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqItemChangeData));
  OGAckItemChangeData_descriptor_ = file->message_type(42);
  static const int OGAckItemChangeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData, changelist_),
  };
  OGAckItemChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckItemChangeData_descriptor_,
      OGAckItemChangeData::default_instance_,
      OGAckItemChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckItemChangeData));
  OGAckItemChangeData_Change_descriptor_ = OGAckItemChangeData_descriptor_->nested_type(0);
  static const int OGAckItemChangeData_Change_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, debrisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, neednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, jilv_),
  };
  OGAckItemChangeData_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckItemChangeData_Change_descriptor_,
      OGAckItemChangeData_Change::default_instance_,
      OGAckItemChangeData_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChangeData_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckItemChangeData_Change));
  OGReqPetChangeData_descriptor_ = file->message_type(43);
  static const int OGReqPetChangeData_offsets_[1] = {
  };
  OGReqPetChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetChangeData_descriptor_,
      OGReqPetChangeData::default_instance_,
      OGReqPetChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetChangeData));
  OGAckPetChangeData_descriptor_ = file->message_type(44);
  static const int OGAckPetChangeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData, datalist_),
  };
  OGAckPetChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetChangeData_descriptor_,
      OGAckPetChangeData::default_instance_,
      OGAckPetChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetChangeData));
  OGAckPetChangeData_ChangeData_descriptor_ = OGAckPetChangeData_descriptor_->nested_type(0);
  static const int OGAckPetChangeData_ChangeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData_ChangeData, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData_ChangeData, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData_ChangeData, max_),
  };
  OGAckPetChangeData_ChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetChangeData_ChangeData_descriptor_,
      OGAckPetChangeData_ChangeData::default_instance_,
      OGAckPetChangeData_ChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData_ChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetChangeData_ChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetChangeData_ChangeData));
  OGAckItemChange_descriptor_ = file->message_type(45);
  static const int OGAckItemChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, evolvefld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, petid_),
  };
  OGAckItemChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckItemChange_descriptor_,
      OGAckItemChange::default_instance_,
      OGAckItemChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItemChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckItemChange));
  OGAckPetReSet_descriptor_ = file->message_type(46);
  static const int OGAckPetReSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, award_),
  };
  OGAckPetReSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetReSet_descriptor_,
      OGAckPetReSet::default_instance_,
      OGAckPetReSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetReSet));
  OGAckPetGridOnList_descriptor_ = file->message_type(47);
  static const int OGAckPetGridOnList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList, petgridlist_),
  };
  OGAckPetGridOnList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetGridOnList_descriptor_,
      OGAckPetGridOnList::default_instance_,
      OGAckPetGridOnList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetGridOnList));
  OGAckPetGridOnList_PetGrid_descriptor_ = OGAckPetGridOnList_descriptor_->nested_type(0);
  static const int OGAckPetGridOnList_PetGrid_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, tips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, gold_),
  };
  OGAckPetGridOnList_PetGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetGridOnList_PetGrid_descriptor_,
      OGAckPetGridOnList_PetGrid::default_instance_,
      OGAckPetGridOnList_PetGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGridOnList_PetGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetGridOnList_PetGrid));
  OGReqPetGrid_descriptor_ = file->message_type(48);
  static const int OGReqPetGrid_offsets_[1] = {
  };
  OGReqPetGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetGrid_descriptor_,
      OGReqPetGrid::default_instance_,
      OGReqPetGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetGrid));
  OGAckPage_descriptor_ = file->message_type(49);
  static const int OGAckPage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPage, state_),
  };
  OGAckPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPage_descriptor_,
      OGAckPage::default_instance_,
      OGAckPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPage));
  OGReqPetFight_descriptor_ = file->message_type(50);
  static const int OGReqPetFight_offsets_[1] = {
  };
  OGReqPetFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetFight_descriptor_,
      OGReqPetFight::default_instance_,
      OGReqPetFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetFight));
  OGAckPetFightResult_descriptor_ = file->message_type(51);
  static const int OGAckPetFightResult_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, winresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, petskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, petjoinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, petdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, bossskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, bossjoinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, bossdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, pettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, peteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, bosstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, bosseffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, page_),
  };
  OGAckPetFightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetFightResult_descriptor_,
      OGAckPetFightResult::default_instance_,
      OGAckPetFightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetFightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetFightResult));
  OGReqPetFlee_descriptor_ = file->message_type(52);
  static const int OGReqPetFlee_offsets_[1] = {
  };
  OGReqPetFlee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetFlee_descriptor_,
      OGReqPetFlee::default_instance_,
      OGReqPetFlee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetFlee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetFlee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetFlee));
  OGReqPetGetAward_descriptor_ = file->message_type(53);
  static const int OGReqPetGetAward_offsets_[1] = {
  };
  OGReqPetGetAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetGetAward_descriptor_,
      OGReqPetGetAward::default_instance_,
      OGReqPetGetAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetGetAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetGetAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetGetAward));
  OGAckPetGetAward_descriptor_ = file->message_type(54);
  static const int OGAckPetGetAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward, awardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward, awardflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward, rolename_),
  };
  OGAckPetGetAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetGetAward_descriptor_,
      OGAckPetGetAward::default_instance_,
      OGAckPetGetAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetGetAward));
  OGAckPetGetAward_Award_descriptor_ = OGAckPetGetAward_descriptor_->nested_type(0);
  static const int OGAckPetGetAward_Award_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, petname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, itemid_),
  };
  OGAckPetGetAward_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetGetAward_Award_descriptor_,
      OGAckPetGetAward_Award::default_instance_,
      OGAckPetGetAward_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetGetAward_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetGetAward_Award));
  OGAckRankList_descriptor_ = file->message_type(55);
  static const int OGAckRankList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList, type_),
  };
  OGAckRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRankList_descriptor_,
      OGAckRankList::default_instance_,
      OGAckRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRankList));
  OGAckRankList_Rank_descriptor_ = OGAckRankList_descriptor_->nested_type(0);
  static const int OGAckRankList_Rank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList_Rank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList_Rank, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList_Rank, getgold_),
  };
  OGAckRankList_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRankList_Rank_descriptor_,
      OGAckRankList_Rank::default_instance_,
      OGAckRankList_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankList_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRankList_Rank));
  OGAckRank_descriptor_ = file->message_type(56);
  static const int OGAckRank_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, ranklista_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, ranklistb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, anum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, agold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, arolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, bnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, bgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, brolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, lastweeka_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, lastweekb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, ranklistc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, crankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, aranktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, branktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, cranktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, laranktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, lbranktip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, rankbtnon_),
  };
  OGAckRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRank_descriptor_,
      OGAckRank::default_instance_,
      OGAckRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRank));
  OGAckRank_Rank_descriptor_ = OGAckRank_descriptor_->nested_type(0);
  static const int OGAckRank_Rank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank_Rank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank_Rank, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank_Rank, getgold_),
  };
  OGAckRank_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRank_Rank_descriptor_,
      OGAckRank_Rank::default_instance_,
      OGAckRank_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRank_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRank_Rank));
  OGReqRank_descriptor_ = file->message_type(57);
  static const int OGReqRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRank, rolename_),
  };
  OGReqRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqRank_descriptor_,
      OGReqRank::default_instance_,
      OGReqRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqRank));
  OGReqRankToJS_descriptor_ = file->message_type(58);
  static const int OGReqRankToJS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRankToJS, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRankToJS, getgold1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRankToJS, getgold4_),
  };
  OGReqRankToJS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqRankToJS_descriptor_,
      OGReqRankToJS::default_instance_,
      OGReqRankToJS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRankToJS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqRankToJS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqRankToJS));
  OGReqNotice_descriptor_ = file->message_type(59);
  static const int OGReqNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, type_),
  };
  OGReqNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqNotice_descriptor_,
      OGReqNotice::default_instance_,
      OGReqNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqNotice));
  OGGuangGao_descriptor_ = file->message_type(60);
  static const int OGGuangGao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGGuangGao, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGGuangGao, content_),
  };
  OGGuangGao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGGuangGao_descriptor_,
      OGGuangGao::default_instance_,
      OGGuangGao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGGuangGao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGGuangGao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGGuangGao));
  OGAckMessage_descriptor_ = file->message_type(61);
  static const int OGAckMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, ranknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, time_),
  };
  OGAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckMessage_descriptor_,
      OGAckMessage::default_instance_,
      OGAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckMessage));
  OGAckStopGame_descriptor_ = file->message_type(62);
  static const int OGAckStopGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckStopGame, status_),
  };
  OGAckStopGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckStopGame_descriptor_,
      OGAckStopGame::default_instance_,
      OGAckStopGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckStopGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckStopGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckStopGame));
  OGAckStopGame_E_Status_descriptor_ = OGAckStopGame_descriptor_->enum_type(0);
  OGAckMails_descriptor_ = file->message_type(63);
  static const int OGAckMails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails, maillist_),
  };
  OGAckMails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckMails_descriptor_,
      OGAckMails::default_instance_,
      OGAckMails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckMails));
  OGAckMails_Mail_descriptor_ = OGAckMails_descriptor_->nested_type(0);
  static const int OGAckMails_Mail_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, sendrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, recvrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, mailtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, itemtip_),
  };
  OGAckMails_Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckMails_Mail_descriptor_,
      OGAckMails_Mail::default_instance_,
      OGAckMails_Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMails_Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckMails_Mail));
  OGReqHandleMails_descriptor_ = file->message_type(64);
  static const int OGReqHandleMails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqHandleMails, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqHandleMails, id_),
  };
  OGReqHandleMails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqHandleMails_descriptor_,
      OGReqHandleMails::default_instance_,
      OGReqHandleMails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqHandleMails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqHandleMails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqHandleMails));
  OGReqMails_descriptor_ = file->message_type(65);
  static const int OGReqMails_offsets_[1] = {
  };
  OGReqMails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqMails_descriptor_,
      OGReqMails::default_instance_,
      OGReqMails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqMails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqMails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqMails));
  OGAckMail_descriptor_ = file->message_type(66);
  static const int OGAckMail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, mailid_),
  };
  OGAckMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckMail_descriptor_,
      OGAckMail::default_instance_,
      OGAckMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckMail));
  OGAckUnreadMail_descriptor_ = file->message_type(67);
  static const int OGAckUnreadMail_offsets_[1] = {
  };
  OGAckUnreadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckUnreadMail_descriptor_,
      OGAckUnreadMail::default_instance_,
      OGAckUnreadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckUnreadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckUnreadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckUnreadMail));
  OGAckItems_descriptor_ = file->message_type(68);
  static const int OGAckItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems, itemlist_),
  };
  OGAckItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckItems_descriptor_,
      OGAckItems::default_instance_,
      OGAckItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckItems));
  OGAckItems_Item_descriptor_ = OGAckItems_descriptor_->nested_type(0);
  static const int OGAckItems_Item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, effect_),
  };
  OGAckItems_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckItems_Item_descriptor_,
      OGAckItems_Item::default_instance_,
      OGAckItems_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckItems_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckItems_Item));
  OGAckShopItemInfo_descriptor_ = file->message_type(69);
  static const int OGAckShopItemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo, shoplist_),
  };
  OGAckShopItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckShopItemInfo_descriptor_,
      OGAckShopItemInfo::default_instance_,
      OGAckShopItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckShopItemInfo));
  OGAckShopItemInfo_ItemInfo_descriptor_ = OGAckShopItemInfo_descriptor_->nested_type(0);
  static const int OGAckShopItemInfo_ItemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, itemprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, shopdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, shoppic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, shopmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, itemname_),
  };
  OGAckShopItemInfo_ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckShopItemInfo_ItemInfo_descriptor_,
      OGAckShopItemInfo_ItemInfo::default_instance_,
      OGAckShopItemInfo_ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckShopItemInfo_ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckShopItemInfo_ItemInfo));
  OGReqShopItem_descriptor_ = file->message_type(70);
  static const int OGReqShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqShopItem, itemid_),
  };
  OGReqShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqShopItem_descriptor_,
      OGReqShopItem::default_instance_,
      OGReqShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqShopItem));
  OGAckCutItems_descriptor_ = file->message_type(71);
  static const int OGAckCutItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems, itemlist_),
  };
  OGAckCutItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckCutItems_descriptor_,
      OGAckCutItems::default_instance_,
      OGAckCutItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckCutItems));
  OGAckCutItems_Item_descriptor_ = OGAckCutItems_descriptor_->nested_type(0);
  static const int OGAckCutItems_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems_Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems_Item, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems_Item, flg_),
  };
  OGAckCutItems_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckCutItems_Item_descriptor_,
      OGAckCutItems_Item::default_instance_,
      OGAckCutItems_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckCutItems_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckCutItems_Item));
  OGAckErrorMsg_descriptor_ = file->message_type(72);
  static const int OGAckErrorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckErrorMsg, content_),
  };
  OGAckErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckErrorMsg_descriptor_,
      OGAckErrorMsg::default_instance_,
      OGAckErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckErrorMsg));
  OGReqBuyItem_descriptor_ = file->message_type(73);
  static const int OGReqBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBuyItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBuyItem, num_),
  };
  OGReqBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqBuyItem_descriptor_,
      OGReqBuyItem::default_instance_,
      OGReqBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqBuyItem));
  OGReqNewHandOver_descriptor_ = file->message_type(74);
  static const int OGReqNewHandOver_offsets_[1] = {
  };
  OGReqNewHandOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqNewHandOver_descriptor_,
      OGReqNewHandOver::default_instance_,
      OGReqNewHandOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNewHandOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNewHandOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqNewHandOver));
  OGReqNewHandAward_descriptor_ = file->message_type(75);
  static const int OGReqNewHandAward_offsets_[1] = {
  };
  OGReqNewHandAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqNewHandAward_descriptor_,
      OGReqNewHandAward::default_instance_,
      OGReqNewHandAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNewHandAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqNewHandAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqNewHandAward));
  OGAckNewHandAward_descriptor_ = file->message_type(76);
  static const int OGAckNewHandAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, dis_),
  };
  OGAckNewHandAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckNewHandAward_descriptor_,
      OGAckNewHandAward::default_instance_,
      OGAckNewHandAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckNewHandAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckNewHandAward));
  OGAckPlayerLogot_descriptor_ = file->message_type(77);
  static const int OGAckPlayerLogot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPlayerLogot, userid_),
  };
  OGAckPlayerLogot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPlayerLogot_descriptor_,
      OGAckPlayerLogot::default_instance_,
      OGAckPlayerLogot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPlayerLogot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPlayerLogot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPlayerLogot));
  OGAckRankHour_descriptor_ = file->message_type(78);
  static const int OGAckRankHour_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, minute_),
  };
  OGAckRankHour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckRankHour_descriptor_,
      OGAckRankHour::default_instance_,
      OGAckRankHour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckRankHour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckRankHour));
  OGReqJpRecord_descriptor_ = file->message_type(79);
  static const int OGReqJpRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpRecord, rolename_),
  };
  OGReqJpRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqJpRecord_descriptor_,
      OGReqJpRecord::default_instance_,
      OGReqJpRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqJpRecord));
  OGReqJpStar_descriptor_ = file->message_type(80);
  static const int OGReqJpStar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, jpstarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, jpstartemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, jpstartime_),
  };
  OGReqJpStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqJpStar_descriptor_,
      OGReqJpStar::default_instance_,
      OGReqJpStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqJpStar));
  OGAckJpRecord_descriptor_ = file->message_type(81);
  static const int OGAckJpRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord, jprecordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord, tipon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord, tiptext_),
  };
  OGAckJpRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJpRecord_descriptor_,
      OGAckJpRecord::default_instance_,
      OGAckJpRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJpRecord));
  OGAckJpRecord_JpRecord_descriptor_ = OGAckJpRecord_descriptor_->nested_type(0);
  static const int OGAckJpRecord_JpRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, currjp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, gameid_),
  };
  OGAckJpRecord_JpRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJpRecord_JpRecord_descriptor_,
      OGAckJpRecord_JpRecord::default_instance_,
      OGAckJpRecord_JpRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpRecord_JpRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJpRecord_JpRecord));
  OGAckLoginJpMsg_descriptor_ = file->message_type(82);
  static const int OGAckLoginJpMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginJpMsg, content_),
  };
  OGAckLoginJpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLoginJpMsg_descriptor_,
      OGAckLoginJpMsg::default_instance_,
      OGAckLoginJpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginJpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginJpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLoginJpMsg));
  OGReqLoginGetAward_descriptor_ = file->message_type(83);
  static const int OGReqLoginGetAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqLoginGetAward, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqLoginGetAward, lev_),
  };
  OGReqLoginGetAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqLoginGetAward_descriptor_,
      OGReqLoginGetAward::default_instance_,
      OGReqLoginGetAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqLoginGetAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqLoginGetAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqLoginGetAward));
  OGAckLoginGetAward_descriptor_ = file->message_type(84);
  static const int OGAckLoginGetAward_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, jilv_),
  };
  OGAckLoginGetAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLoginGetAward_descriptor_,
      OGAckLoginGetAward::default_instance_,
      OGAckLoginGetAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginGetAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLoginGetAward));
  OGAckLoginAwardList_descriptor_ = file->message_type(85);
  static const int OGAckLoginAwardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList, awardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList, rolename_),
  };
  OGAckLoginAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLoginAwardList_descriptor_,
      OGAckLoginAwardList::default_instance_,
      OGAckLoginAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLoginAwardList));
  OGAckLoginAwardList_Award_descriptor_ = OGAckLoginAwardList_descriptor_->nested_type(0);
  static const int OGAckLoginAwardList_Award_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, type_),
  };
  OGAckLoginAwardList_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLoginAwardList_Award_descriptor_,
      OGAckLoginAwardList_Award::default_instance_,
      OGAckLoginAwardList_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLoginAwardList_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLoginAwardList_Award));
  OGReqDoubleJpResult_descriptor_ = file->message_type(86);
  static const int OGReqDoubleJpResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, daygold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, weekgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, monthgold_),
  };
  OGReqDoubleJpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqDoubleJpResult_descriptor_,
      OGReqDoubleJpResult::default_instance_,
      OGReqDoubleJpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqDoubleJpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqDoubleJpResult));
  OGAckDoubleJpResult_descriptor_ = file->message_type(87);
  static const int OGAckDoubleJpResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, jp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, jilv1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, jilv2_),
  };
  OGAckDoubleJpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckDoubleJpResult_descriptor_,
      OGAckDoubleJpResult::default_instance_,
      OGAckDoubleJpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoubleJpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckDoubleJpResult));
  OGAckDoublePlus_descriptor_ = file->message_type(88);
  static const int OGAckDoublePlus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus, doublepluslist_),
  };
  OGAckDoublePlus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckDoublePlus_descriptor_,
      OGAckDoublePlus::default_instance_,
      OGAckDoublePlus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckDoublePlus));
  OGAckDoublePlus_DoublePlus_descriptor_ = OGAckDoublePlus_descriptor_->nested_type(0);
  static const int OGAckDoublePlus_DoublePlus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus_DoublePlus, startlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus_DoublePlus, plus_),
  };
  OGAckDoublePlus_DoublePlus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckDoublePlus_DoublePlus_descriptor_,
      OGAckDoublePlus_DoublePlus::default_instance_,
      OGAckDoublePlus_DoublePlus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus_DoublePlus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckDoublePlus_DoublePlus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckDoublePlus_DoublePlus));
  OGReqGetPlayer_descriptor_ = file->message_type(89);
  static const int OGReqGetPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPlayer, rolename_),
  };
  OGReqGetPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqGetPlayer_descriptor_,
      OGReqGetPlayer::default_instance_,
      OGReqGetPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqGetPlayer));
  OGReqChangePutGold_descriptor_ = file->message_type(90);
  static const int OGReqChangePutGold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqChangePutGold, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqChangePutGold, freeflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqChangePutGold, whitegld_),
  };
  OGReqChangePutGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqChangePutGold_descriptor_,
      OGReqChangePutGold::default_instance_,
      OGReqChangePutGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqChangePutGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqChangePutGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqChangePutGold));
  OGReqPetReturnAward_descriptor_ = file->message_type(91);
  static const int OGReqPetReturnAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReturnAward, action_),
  };
  OGReqPetReturnAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqPetReturnAward_descriptor_,
      OGReqPetReturnAward::default_instance_,
      OGReqPetReturnAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReturnAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqPetReturnAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqPetReturnAward));
  OGAckPetReturnAward_descriptor_ = file->message_type(92);
  static const int OGAckPetReturnAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReturnAward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReturnAward, gold_),
  };
  OGAckPetReturnAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckPetReturnAward_descriptor_,
      OGAckPetReturnAward::default_instance_,
      OGAckPetReturnAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReturnAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckPetReturnAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckPetReturnAward));
  OGReqGetPutGoldAward_descriptor_ = file->message_type(93);
  static const int OGReqGetPutGoldAward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, putgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, putgoldsum_),
  };
  OGReqGetPutGoldAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqGetPutGoldAward_descriptor_,
      OGReqGetPutGoldAward::default_instance_,
      OGReqGetPutGoldAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPutGoldAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqGetPutGoldAward));
  OGAckReSetFeed_descriptor_ = file->message_type(94);
  static const int OGAckReSetFeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed, playerfeedlist_),
  };
  OGAckReSetFeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckReSetFeed_descriptor_,
      OGAckReSetFeed::default_instance_,
      OGAckReSetFeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckReSetFeed));
  OGAckReSetFeed_PlayerFeed_descriptor_ = OGAckReSetFeed_descriptor_->nested_type(0);
  static const int OGAckReSetFeed_PlayerFeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed_PlayerFeed, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed_PlayerFeed, feed_),
  };
  OGAckReSetFeed_PlayerFeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckReSetFeed_PlayerFeed_descriptor_,
      OGAckReSetFeed_PlayerFeed::default_instance_,
      OGAckReSetFeed_PlayerFeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed_PlayerFeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckReSetFeed_PlayerFeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckReSetFeed_PlayerFeed));
  OGReqJpStart_descriptor_ = file->message_type(95);
  static const int OGReqJpStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStart, rolename_),
  };
  OGReqJpStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqJpStart_descriptor_,
      OGReqJpStart::default_instance_,
      OGReqJpStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqJpStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqJpStart));
  OGAckJpStart_descriptor_ = file->message_type(96);
  static const int OGAckJpStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, jpstarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, jpstartemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, jpstartime_),
  };
  OGAckJpStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJpStart_descriptor_,
      OGAckJpStart::default_instance_,
      OGAckJpStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJpStart));
  OGReqBindPhone_descriptor_ = file->message_type(97);
  static const int OGReqBindPhone_offsets_[1] = {
  };
  OGReqBindPhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqBindPhone_descriptor_,
      OGReqBindPhone::default_instance_,
      OGReqBindPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBindPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqBindPhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqBindPhone));
  OGAckBindPhone_descriptor_ = file->message_type(98);
  static const int OGAckBindPhone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBindPhone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBindPhone, phone_),
  };
  OGAckBindPhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckBindPhone_descriptor_,
      OGAckBindPhone::default_instance_,
      OGAckBindPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBindPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckBindPhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckBindPhone));
  OGReqGetPhoneCode_descriptor_ = file->message_type(99);
  static const int OGReqGetPhoneCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneCode, phone_),
  };
  OGReqGetPhoneCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqGetPhoneCode_descriptor_,
      OGReqGetPhoneCode::default_instance_,
      OGReqGetPhoneCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqGetPhoneCode));
  OGAckGetPhoneCode_descriptor_ = file->message_type(100);
  static const int OGAckGetPhoneCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneCode, msg_),
  };
  OGAckGetPhoneCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckGetPhoneCode_descriptor_,
      OGAckGetPhoneCode::default_instance_,
      OGAckGetPhoneCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckGetPhoneCode));
  OGReqGetPhoneAward_descriptor_ = file->message_type(101);
  static const int OGReqGetPhoneAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneAward, code_),
  };
  OGReqGetPhoneAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGReqGetPhoneAward_descriptor_,
      OGReqGetPhoneAward::default_instance_,
      OGReqGetPhoneAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGReqGetPhoneAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGReqGetPhoneAward));
  OGAckGetPhoneAward_descriptor_ = file->message_type(102);
  static const int OGAckGetPhoneAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneAward, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneAward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneAward, phone_),
  };
  OGAckGetPhoneAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckGetPhoneAward_descriptor_,
      OGAckGetPhoneAward::default_instance_,
      OGAckGetPhoneAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckGetPhoneAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckGetPhoneAward));
  OGAckAddJpNum_descriptor_ = file->message_type(103);
  static const int OGAckAddJpNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAddJpNum, addjpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAddJpNum, flg_),
  };
  OGAckAddJpNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckAddJpNum_descriptor_,
      OGAckAddJpNum::default_instance_,
      OGAckAddJpNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAddJpNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAddJpNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckAddJpNum));
  OGAckJpHall_descriptor_ = file->message_type(104);
  static const int OGAckJpHall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall, contentlist_),
  };
  OGAckJpHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJpHall_descriptor_,
      OGAckJpHall::default_instance_,
      OGAckJpHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJpHall));
  OGAckJpHall_HallContent_descriptor_ = OGAckJpHall_descriptor_->nested_type(0);
  static const int OGAckJpHall_HallContent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall_HallContent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall_HallContent, golod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall_HallContent, time_),
  };
  OGAckJpHall_HallContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckJpHall_HallContent_descriptor_,
      OGAckJpHall_HallContent::default_instance_,
      OGAckJpHall_HallContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall_HallContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckJpHall_HallContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckJpHall_HallContent));
  OGAckAd_descriptor_ = file->message_type(105);
  static const int OGAckAd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAd, on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAd, content_),
  };
  OGAckAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckAd_descriptor_,
      OGAckAd::default_instance_,
      OGAckAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckAd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckAd));
  OGAckLeaveGame_descriptor_ = file->message_type(106);
  static const int OGAckLeaveGame_offsets_[1] = {
  };
  OGAckLeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckLeaveGame_descriptor_,
      OGAckLeaveGame::default_instance_,
      OGAckLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckLeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckLeaveGame));
  OGAckYDFreeTimes_descriptor_ = file->message_type(107);
  static const int OGAckYDFreeTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckYDFreeTimes, num_),
  };
  OGAckYDFreeTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OGAckYDFreeTimes_descriptor_,
      OGAckYDFreeTimes::default_instance_,
      OGAckYDFreeTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckYDFreeTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OGAckYDFreeTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OGAckYDFreeTimes));
  E_TRCardColorType_descriptor_ = file->enum_type(0);
  E_TRCardNumber_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OGTexasSlotsProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqTRLogin1_descriptor_, &OGReqTRLogin1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLinkServer_descriptor_, &OGAckLinkServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqTRLogin2_descriptor_, &OGReqTRLogin2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoleLoginMsg_descriptor_, &OGAckRoleLoginMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoleMsg_descriptor_, &OGAckRoleMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetUpdatedMsg_descriptor_, &OGAckPetUpdatedMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckGameServer_descriptor_, &OGAckGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoomList_descriptor_, &OGAckRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoomList_Room_descriptor_, &OGAckRoomList_Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqJoinRoom_descriptor_, &OGReqJoinRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoom_descriptor_, &OGAckRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoom_RoomBet_descriptor_, &OGAckRoom_RoomBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckBoss_descriptor_, &OGAckBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqExitType_descriptor_, &OGReqExitType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckExit_descriptor_, &OGAckExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqStartGame_descriptor_, &OGReqStartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqDoubleGame_descriptor_, &OGReqDoubleGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckGameResult_descriptor_, &OGAckGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameToJSupport_descriptor_, &GameToJSupport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckDoubleResult_descriptor_, &OGAckDoubleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqDoubleGetGold_descriptor_, &OGReqDoubleGetGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckDoubleGetGold_descriptor_, &OGAckDoubleGetGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLoseMoney_descriptor_, &GameLoseMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqJP_descriptor_, &ReqJP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJP_descriptor_, &OGAckJP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRoleUpLev_descriptor_, &OGAckRoleUpLev::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqReadDB_descriptor_, &OGReqReadDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPool_descriptor_, &OGReqPool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqMailsToPlayer_descriptor_, &OGReqMailsToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqAddWhite_descriptor_, &OGReqAddWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqWhiteList_descriptor_, &OGReqWhiteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckWhiteList_descriptor_, &OGAckWhiteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckWhiteList_White_descriptor_, &OGAckWhiteList_White::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqDelWhite_descriptor_, &OGReqDelWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqSelectWhite_descriptor_, &OGReqSelectWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckSelectWhite_descriptor_, &OGAckSelectWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPet_descriptor_, &OGAckPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetList_descriptor_, &OGReqPetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetList_descriptor_, &OGAckPetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetList_Pet_descriptor_, &OGAckPetList_Pet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetReSet_descriptor_, &OGReqPetReSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetJoinFight_descriptor_, &OGReqPetJoinFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetChange_descriptor_, &OGReqPetChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetChange_descriptor_, &OGAckPetChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqItemChange_descriptor_, &OGReqItemChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqItemChangeData_descriptor_, &OGReqItemChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckItemChangeData_descriptor_, &OGAckItemChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckItemChangeData_Change_descriptor_, &OGAckItemChangeData_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetChangeData_descriptor_, &OGReqPetChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetChangeData_descriptor_, &OGAckPetChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetChangeData_ChangeData_descriptor_, &OGAckPetChangeData_ChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckItemChange_descriptor_, &OGAckItemChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetReSet_descriptor_, &OGAckPetReSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetGridOnList_descriptor_, &OGAckPetGridOnList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetGridOnList_PetGrid_descriptor_, &OGAckPetGridOnList_PetGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetGrid_descriptor_, &OGReqPetGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPage_descriptor_, &OGAckPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetFight_descriptor_, &OGReqPetFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetFightResult_descriptor_, &OGAckPetFightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetFlee_descriptor_, &OGReqPetFlee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetGetAward_descriptor_, &OGReqPetGetAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetGetAward_descriptor_, &OGAckPetGetAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetGetAward_Award_descriptor_, &OGAckPetGetAward_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRankList_descriptor_, &OGAckRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRankList_Rank_descriptor_, &OGAckRankList_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRank_descriptor_, &OGAckRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRank_Rank_descriptor_, &OGAckRank_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqRank_descriptor_, &OGReqRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqRankToJS_descriptor_, &OGReqRankToJS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqNotice_descriptor_, &OGReqNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGGuangGao_descriptor_, &OGGuangGao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckMessage_descriptor_, &OGAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckStopGame_descriptor_, &OGAckStopGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckMails_descriptor_, &OGAckMails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckMails_Mail_descriptor_, &OGAckMails_Mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqHandleMails_descriptor_, &OGReqHandleMails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqMails_descriptor_, &OGReqMails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckMail_descriptor_, &OGAckMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckUnreadMail_descriptor_, &OGAckUnreadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckItems_descriptor_, &OGAckItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckItems_Item_descriptor_, &OGAckItems_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckShopItemInfo_descriptor_, &OGAckShopItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckShopItemInfo_ItemInfo_descriptor_, &OGAckShopItemInfo_ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqShopItem_descriptor_, &OGReqShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckCutItems_descriptor_, &OGAckCutItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckCutItems_Item_descriptor_, &OGAckCutItems_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckErrorMsg_descriptor_, &OGAckErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqBuyItem_descriptor_, &OGReqBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqNewHandOver_descriptor_, &OGReqNewHandOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqNewHandAward_descriptor_, &OGReqNewHandAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckNewHandAward_descriptor_, &OGAckNewHandAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPlayerLogot_descriptor_, &OGAckPlayerLogot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckRankHour_descriptor_, &OGAckRankHour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqJpRecord_descriptor_, &OGReqJpRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqJpStar_descriptor_, &OGReqJpStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJpRecord_descriptor_, &OGAckJpRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJpRecord_JpRecord_descriptor_, &OGAckJpRecord_JpRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLoginJpMsg_descriptor_, &OGAckLoginJpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqLoginGetAward_descriptor_, &OGReqLoginGetAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLoginGetAward_descriptor_, &OGAckLoginGetAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLoginAwardList_descriptor_, &OGAckLoginAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLoginAwardList_Award_descriptor_, &OGAckLoginAwardList_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqDoubleJpResult_descriptor_, &OGReqDoubleJpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckDoubleJpResult_descriptor_, &OGAckDoubleJpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckDoublePlus_descriptor_, &OGAckDoublePlus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckDoublePlus_DoublePlus_descriptor_, &OGAckDoublePlus_DoublePlus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqGetPlayer_descriptor_, &OGReqGetPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqChangePutGold_descriptor_, &OGReqChangePutGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqPetReturnAward_descriptor_, &OGReqPetReturnAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckPetReturnAward_descriptor_, &OGAckPetReturnAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqGetPutGoldAward_descriptor_, &OGReqGetPutGoldAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckReSetFeed_descriptor_, &OGAckReSetFeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckReSetFeed_PlayerFeed_descriptor_, &OGAckReSetFeed_PlayerFeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqJpStart_descriptor_, &OGReqJpStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJpStart_descriptor_, &OGAckJpStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqBindPhone_descriptor_, &OGReqBindPhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckBindPhone_descriptor_, &OGAckBindPhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqGetPhoneCode_descriptor_, &OGReqGetPhoneCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckGetPhoneCode_descriptor_, &OGAckGetPhoneCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGReqGetPhoneAward_descriptor_, &OGReqGetPhoneAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckGetPhoneAward_descriptor_, &OGAckGetPhoneAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckAddJpNum_descriptor_, &OGAckAddJpNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJpHall_descriptor_, &OGAckJpHall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckJpHall_HallContent_descriptor_, &OGAckJpHall_HallContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckAd_descriptor_, &OGAckAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckLeaveGame_descriptor_, &OGAckLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OGAckYDFreeTimes_descriptor_, &OGAckYDFreeTimes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto() {
  delete OGReqTRLogin1::default_instance_;
  delete OGReqTRLogin1_reflection_;
  delete OGAckLinkServer::default_instance_;
  delete OGAckLinkServer_reflection_;
  delete OGReqTRLogin2::default_instance_;
  delete OGReqTRLogin2_reflection_;
  delete OGAckRoleLoginMsg::default_instance_;
  delete OGAckRoleLoginMsg_reflection_;
  delete OGAckRoleMsg::default_instance_;
  delete OGAckRoleMsg_reflection_;
  delete OGAckPetUpdatedMsg::default_instance_;
  delete OGAckPetUpdatedMsg_reflection_;
  delete OGAckGameServer::default_instance_;
  delete OGAckGameServer_reflection_;
  delete OGAckRoomList::default_instance_;
  delete OGAckRoomList_reflection_;
  delete OGAckRoomList_Room::default_instance_;
  delete OGAckRoomList_Room_reflection_;
  delete OGReqJoinRoom::default_instance_;
  delete OGReqJoinRoom_reflection_;
  delete OGAckRoom::default_instance_;
  delete OGAckRoom_reflection_;
  delete OGAckRoom_RoomBet::default_instance_;
  delete OGAckRoom_RoomBet_reflection_;
  delete OGAckBoss::default_instance_;
  delete OGAckBoss_reflection_;
  delete OGReqExitType::default_instance_;
  delete OGReqExitType_reflection_;
  delete OGAckExit::default_instance_;
  delete OGAckExit_reflection_;
  delete OGReqStartGame::default_instance_;
  delete OGReqStartGame_reflection_;
  delete OGReqDoubleGame::default_instance_;
  delete OGReqDoubleGame_reflection_;
  delete OGAckGameResult::default_instance_;
  delete OGAckGameResult_reflection_;
  delete GameToJSupport::default_instance_;
  delete GameToJSupport_reflection_;
  delete OGAckDoubleResult::default_instance_;
  delete OGAckDoubleResult_reflection_;
  delete OGReqDoubleGetGold::default_instance_;
  delete OGReqDoubleGetGold_reflection_;
  delete OGAckDoubleGetGold::default_instance_;
  delete OGAckDoubleGetGold_reflection_;
  delete GameLoseMoney::default_instance_;
  delete GameLoseMoney_reflection_;
  delete ReqJP::default_instance_;
  delete ReqJP_reflection_;
  delete OGAckJP::default_instance_;
  delete OGAckJP_reflection_;
  delete OGAckRoleUpLev::default_instance_;
  delete OGAckRoleUpLev_reflection_;
  delete OGReqReadDB::default_instance_;
  delete OGReqReadDB_reflection_;
  delete OGReqPool::default_instance_;
  delete OGReqPool_reflection_;
  delete OGReqMailsToPlayer::default_instance_;
  delete OGReqMailsToPlayer_reflection_;
  delete OGReqAddWhite::default_instance_;
  delete OGReqAddWhite_reflection_;
  delete OGReqWhiteList::default_instance_;
  delete OGReqWhiteList_reflection_;
  delete OGAckWhiteList::default_instance_;
  delete OGAckWhiteList_reflection_;
  delete OGAckWhiteList_White::default_instance_;
  delete OGAckWhiteList_White_reflection_;
  delete OGReqDelWhite::default_instance_;
  delete OGReqDelWhite_reflection_;
  delete OGReqSelectWhite::default_instance_;
  delete OGReqSelectWhite_reflection_;
  delete OGAckSelectWhite::default_instance_;
  delete OGAckSelectWhite_reflection_;
  delete OGAckPet::default_instance_;
  delete OGAckPet_reflection_;
  delete OGReqPetList::default_instance_;
  delete OGReqPetList_reflection_;
  delete OGAckPetList::default_instance_;
  delete OGAckPetList_reflection_;
  delete OGAckPetList_Pet::default_instance_;
  delete OGAckPetList_Pet_reflection_;
  delete OGReqPetReSet::default_instance_;
  delete OGReqPetReSet_reflection_;
  delete OGReqPetJoinFight::default_instance_;
  delete OGReqPetJoinFight_reflection_;
  delete OGReqPetChange::default_instance_;
  delete OGReqPetChange_reflection_;
  delete OGAckPetChange::default_instance_;
  delete OGAckPetChange_reflection_;
  delete OGReqItemChange::default_instance_;
  delete OGReqItemChange_reflection_;
  delete OGReqItemChangeData::default_instance_;
  delete OGReqItemChangeData_reflection_;
  delete OGAckItemChangeData::default_instance_;
  delete OGAckItemChangeData_reflection_;
  delete OGAckItemChangeData_Change::default_instance_;
  delete OGAckItemChangeData_Change_reflection_;
  delete OGReqPetChangeData::default_instance_;
  delete OGReqPetChangeData_reflection_;
  delete OGAckPetChangeData::default_instance_;
  delete OGAckPetChangeData_reflection_;
  delete OGAckPetChangeData_ChangeData::default_instance_;
  delete OGAckPetChangeData_ChangeData_reflection_;
  delete OGAckItemChange::default_instance_;
  delete OGAckItemChange_reflection_;
  delete OGAckPetReSet::default_instance_;
  delete OGAckPetReSet_reflection_;
  delete OGAckPetGridOnList::default_instance_;
  delete OGAckPetGridOnList_reflection_;
  delete OGAckPetGridOnList_PetGrid::default_instance_;
  delete OGAckPetGridOnList_PetGrid_reflection_;
  delete OGReqPetGrid::default_instance_;
  delete OGReqPetGrid_reflection_;
  delete OGAckPage::default_instance_;
  delete OGAckPage_reflection_;
  delete OGReqPetFight::default_instance_;
  delete OGReqPetFight_reflection_;
  delete OGAckPetFightResult::default_instance_;
  delete OGAckPetFightResult_reflection_;
  delete OGReqPetFlee::default_instance_;
  delete OGReqPetFlee_reflection_;
  delete OGReqPetGetAward::default_instance_;
  delete OGReqPetGetAward_reflection_;
  delete OGAckPetGetAward::default_instance_;
  delete OGAckPetGetAward_reflection_;
  delete OGAckPetGetAward_Award::default_instance_;
  delete OGAckPetGetAward_Award_reflection_;
  delete OGAckRankList::default_instance_;
  delete OGAckRankList_reflection_;
  delete OGAckRankList_Rank::default_instance_;
  delete OGAckRankList_Rank_reflection_;
  delete OGAckRank::default_instance_;
  delete OGAckRank_reflection_;
  delete OGAckRank_Rank::default_instance_;
  delete OGAckRank_Rank_reflection_;
  delete OGReqRank::default_instance_;
  delete OGReqRank_reflection_;
  delete OGReqRankToJS::default_instance_;
  delete OGReqRankToJS_reflection_;
  delete OGReqNotice::default_instance_;
  delete OGReqNotice_reflection_;
  delete OGGuangGao::default_instance_;
  delete OGGuangGao_reflection_;
  delete OGAckMessage::default_instance_;
  delete OGAckMessage_reflection_;
  delete OGAckStopGame::default_instance_;
  delete OGAckStopGame_reflection_;
  delete OGAckMails::default_instance_;
  delete OGAckMails_reflection_;
  delete OGAckMails_Mail::default_instance_;
  delete OGAckMails_Mail_reflection_;
  delete OGReqHandleMails::default_instance_;
  delete OGReqHandleMails_reflection_;
  delete OGReqMails::default_instance_;
  delete OGReqMails_reflection_;
  delete OGAckMail::default_instance_;
  delete OGAckMail_reflection_;
  delete OGAckUnreadMail::default_instance_;
  delete OGAckUnreadMail_reflection_;
  delete OGAckItems::default_instance_;
  delete OGAckItems_reflection_;
  delete OGAckItems_Item::default_instance_;
  delete OGAckItems_Item_reflection_;
  delete OGAckShopItemInfo::default_instance_;
  delete OGAckShopItemInfo_reflection_;
  delete OGAckShopItemInfo_ItemInfo::default_instance_;
  delete OGAckShopItemInfo_ItemInfo_reflection_;
  delete OGReqShopItem::default_instance_;
  delete OGReqShopItem_reflection_;
  delete OGAckCutItems::default_instance_;
  delete OGAckCutItems_reflection_;
  delete OGAckCutItems_Item::default_instance_;
  delete OGAckCutItems_Item_reflection_;
  delete OGAckErrorMsg::default_instance_;
  delete OGAckErrorMsg_reflection_;
  delete OGReqBuyItem::default_instance_;
  delete OGReqBuyItem_reflection_;
  delete OGReqNewHandOver::default_instance_;
  delete OGReqNewHandOver_reflection_;
  delete OGReqNewHandAward::default_instance_;
  delete OGReqNewHandAward_reflection_;
  delete OGAckNewHandAward::default_instance_;
  delete OGAckNewHandAward_reflection_;
  delete OGAckPlayerLogot::default_instance_;
  delete OGAckPlayerLogot_reflection_;
  delete OGAckRankHour::default_instance_;
  delete OGAckRankHour_reflection_;
  delete OGReqJpRecord::default_instance_;
  delete OGReqJpRecord_reflection_;
  delete OGReqJpStar::default_instance_;
  delete OGReqJpStar_reflection_;
  delete OGAckJpRecord::default_instance_;
  delete OGAckJpRecord_reflection_;
  delete OGAckJpRecord_JpRecord::default_instance_;
  delete OGAckJpRecord_JpRecord_reflection_;
  delete OGAckLoginJpMsg::default_instance_;
  delete OGAckLoginJpMsg_reflection_;
  delete OGReqLoginGetAward::default_instance_;
  delete OGReqLoginGetAward_reflection_;
  delete OGAckLoginGetAward::default_instance_;
  delete OGAckLoginGetAward_reflection_;
  delete OGAckLoginAwardList::default_instance_;
  delete OGAckLoginAwardList_reflection_;
  delete OGAckLoginAwardList_Award::default_instance_;
  delete OGAckLoginAwardList_Award_reflection_;
  delete OGReqDoubleJpResult::default_instance_;
  delete OGReqDoubleJpResult_reflection_;
  delete OGAckDoubleJpResult::default_instance_;
  delete OGAckDoubleJpResult_reflection_;
  delete OGAckDoublePlus::default_instance_;
  delete OGAckDoublePlus_reflection_;
  delete OGAckDoublePlus_DoublePlus::default_instance_;
  delete OGAckDoublePlus_DoublePlus_reflection_;
  delete OGReqGetPlayer::default_instance_;
  delete OGReqGetPlayer_reflection_;
  delete OGReqChangePutGold::default_instance_;
  delete OGReqChangePutGold_reflection_;
  delete OGReqPetReturnAward::default_instance_;
  delete OGReqPetReturnAward_reflection_;
  delete OGAckPetReturnAward::default_instance_;
  delete OGAckPetReturnAward_reflection_;
  delete OGReqGetPutGoldAward::default_instance_;
  delete OGReqGetPutGoldAward_reflection_;
  delete OGAckReSetFeed::default_instance_;
  delete OGAckReSetFeed_reflection_;
  delete OGAckReSetFeed_PlayerFeed::default_instance_;
  delete OGAckReSetFeed_PlayerFeed_reflection_;
  delete OGReqJpStart::default_instance_;
  delete OGReqJpStart_reflection_;
  delete OGAckJpStart::default_instance_;
  delete OGAckJpStart_reflection_;
  delete OGReqBindPhone::default_instance_;
  delete OGReqBindPhone_reflection_;
  delete OGAckBindPhone::default_instance_;
  delete OGAckBindPhone_reflection_;
  delete OGReqGetPhoneCode::default_instance_;
  delete OGReqGetPhoneCode_reflection_;
  delete OGAckGetPhoneCode::default_instance_;
  delete OGAckGetPhoneCode_reflection_;
  delete OGReqGetPhoneAward::default_instance_;
  delete OGReqGetPhoneAward_reflection_;
  delete OGAckGetPhoneAward::default_instance_;
  delete OGAckGetPhoneAward_reflection_;
  delete OGAckAddJpNum::default_instance_;
  delete OGAckAddJpNum_reflection_;
  delete OGAckJpHall::default_instance_;
  delete OGAckJpHall_reflection_;
  delete OGAckJpHall_HallContent::default_instance_;
  delete OGAckJpHall_HallContent_reflection_;
  delete OGAckAd::default_instance_;
  delete OGAckAd_reflection_;
  delete OGAckLeaveGame::default_instance_;
  delete OGAckLeaveGame_reflection_;
  delete OGAckYDFreeTimes::default_instance_;
  delete OGAckYDFreeTimes_reflection_;
}

void protobuf_AddDesc_OGTexasSlotsProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032OGTexasSlotsProtocol.proto\022\026com.ourgam"
    "e.texasSlots\"\037\n\rOGReqTRLogin1\022\016\n\006UserId\030"
    "\001 \001(\t\"\226\002\n\017OGAckLinkServer\022B\n\006Result\030\001 \002("
    "\01622.com.ourgame.texasSlots.OGAckLinkServ"
    "er.E_TRResult\022C\n\006Reason\030\002 \001(\01623.com.ourg"
    "ame.texasSlots.OGAckLinkServer.E_ErrorTy"
    "pe\022\016\n\006LinkIp\030\003 \001(\t\022\020\n\010LinkPort\030\004 \001(\005\"+\n\013"
    "E_ErrorType\022\016\n\nET_UNKNOWN\020\000\022\014\n\010ET_TYPE1\020"
    "\001\"+\n\nE_TRResult\022\016\n\nET_SUCCESS\020\000\022\r\n\tET_FA"
    "ILED\020\001\"\224\001\n\rOGReqTRLogin2\022\016\n\006UserId\030\001 \001(\t"
    "\022\014\n\004Cert\030\002 \001(\t\022\016\n\006gameId\030\003 \001(\005\022\021\n\tcomfro"
    "mId\030\004 \001(\005\022\020\n\010userName\030\005 \001(\t\022\020\n\010nickName\030"
    "\006 \001(\t\022\020\n\010entrance\030\007 \001(\t\022\014\n\004come\030\010 \001(\t\"\360\005"
    "\n\021OGAckRoleLoginMsg\022D\n\006Result\030\001 \002(\01624.co"
    "m.ourgame.texasSlots.OGAckRoleLoginMsg.E"
    "_TRResult\022E\n\006Reason\030\002 \001(\01625.com.ourgame."
    "texasSlots.OGAckRoleLoginMsg.E_ErrorType"
    "\022\016\n\006userId\030\003 \001(\t\022\020\n\010roleName\030\004 \001(\t\022\r\n\005le"
    "vel\030\005 \001(\005\022\013\n\003exp\030\006 \001(\005\022\014\n\004gold\030\007 \001(\003\022\016\n\006"
    "reqExp\030\010 \001(\005\022\013\n\003pic\030\t \001(\t\022\017\n\007gridNum\030\n \001"
    "(\005\022\017\n\007newHand\030\013 \001(\010\022\017\n\007mailNum\030\014 \001(\005\022\024\n\014"
    "newHandAward\030\r \001(\010\022\025\n\rpetFightAward\030\016 \001("
    "\005\022\017\n\007freeNum\030\017 \001(\005\022\020\n\010loginnum\030\020 \001(\005\022\025\n\r"
    "loginawardnum\030\021 \001(\005\022\022\n\ncomeFromId\030\022 \001(\005\022"
    "\022\n\ntopRankTip\030\023 \001(\t\022\021\n\tdoubleUse\030\024 \001(\003\022\014"
    "\n\004feed\030\025 \001(\005\022\016\n\006fondle\030\026 \001(\005\022\023\n\013fourTime"
    "sOn\030\027 \001(\005\022\017\n\007newGold\030\030 \001(\003\022\017\n\007content\030\031 "
    "\001(\t\"\215\001\n\013E_ErrorType\022\016\n\nET_UNKNOWN\020\000\022\014\n\010E"
    "T_TYPE1\020\001\022\014\n\010ET_TYPE2\020\002\022\014\n\010ET_TYPE3\020\003\022\014\n"
    "\010ET_TYPE4\020\004\022\014\n\010ET_TYPE5\020\005\022\014\n\010ET_TYPE6\020\006\022"
    "\014\n\010ET_TYPE7\020\007\022\014\n\010ET_TYPE8\020\010\"+\n\nE_TRResul"
    "t\022\016\n\nET_SUCCESS\020\000\022\r\n\tET_FAILED\020\001\"\260\001\n\014OGA"
    "ckRoleMsg\022\r\n\005level\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\014\n"
    "\004gold\030\003 \001(\003\022\016\n\006reqExp\030\004 \001(\005\022\017\n\007gridNum\030\005"
    " \001(\005\022\017\n\007freeNum\030\006 \001(\005\022\025\n\rloginawardnum\030\007"
    " \001(\005\022\014\n\004feed\030\010 \001(\005\022\016\n\006fondle\030\t \001(\005\022\017\n\007ne"
    "wGold\030\n \001(\003\"\226\001\n\022OGAckPetUpdatedMsg\022\r\n\005pe"
    "tId\030\001 \001(\005\022\021\n\tbloodPlus\030\002 \001(\005\022\022\n\nattackPl"
    "us\030\003 \001(\005\022\021\n\tawardPlus\030\004 \001(\005\022\r\n\005level\030\005 \001"
    "(\005\022\013\n\003exp\030\006 \001(\005\022\016\n\006reqexp\030\007 \001(\005\022\013\n\003flg\030\010"
    " \001(\005\"X\n\017OGAckGameServer\022\023\n\013client_port\030\001"
    " \001(\005\022\016\n\006LinkIp\030\002 \001(\t\022\020\n\010LinkPort\030\003 \001(\005\022\016"
    "\n\006gameId\030\004 \001(\t\"\275\001\n\rOGAckRoomList\022<\n\010room"
    "List\030\001 \003(\0132*.com.ourgame.texasSlots.OGAc"
    "kRoomList.Room\032n\n\004Room\022\016\n\006roomId\030\001 \001(\005\022\020"
    "\n\010roomName\030\002 \001(\t\022\021\n\troomLevel\030\003 \001(\005\022\020\n\010r"
    "oomGold\030\004 \001(\003\022\017\n\007roomTip\030\005 \001(\t\022\016\n\006roomOn"
    "\030\006 \001(\005\"\037\n\rOGReqJoinRoom\022\016\n\006roomId\030\001 \001(\005\""
    "\251\004\n\tOGAckRoom\022<\n\006Result\030\001 \002(\0162,.com.ourg"
    "ame.texasSlots.OGAckRoom.E_TRResult\022=\n\006R"
    "eason\030\002 \001(\0162-.com.ourgame.texasSlots.OGA"
    "ckRoom.E_ErrorType\022\016\n\006roomId\030\003 \001(\005\022\020\n\010ro"
    "omName\030\004 \001(\t\022\023\n\013roomMaxLine\030\005 \001(\005\022\024\n\014roo"
    "mMaxTimes\030\006 \001(\005\022\024\n\014roomBaseGold\030\007 \001(\003\022\017\n"
    "\007roomPic\030\010 \001(\005\022\024\n\014roomDoubleOn\030\t \001(\005\022\016\n\006"
    "freeOn\030\n \001(\005\022\023\n\013fourTimesOn\030\013 \001(\005\022:\n\007bet"
    "List\030\014 \003(\0132).com.ourgame.texasSlots.OGAc"
    "kRoom.RoomBet\0320\n\007RoomBet\022\013\n\003min\030\001 \001(\003\022\013\n"
    "\003max\030\002 \001(\003\022\013\n\003bet\030\003 \001(\005\"U\n\013E_ErrorType\022\016"
    "\n\nET_UNKNOWN\020\000\022\014\n\010ET_TYPE1\020\001\022\014\n\010ET_TYPE2"
    "\020\002\022\014\n\010ET_TYPE3\020\003\022\014\n\010ET_TYPE4\020\004\"+\n\nE_TRRe"
    "sult\022\016\n\nET_SUCCESS\020\000\022\r\n\tET_FAILED\020\001\"\264\001\n\t"
    "OGAckBoss\022\016\n\006bossId\030\001 \001(\005\022\024\n\014bossNeedGol"
    "d\030\002 \001(\003\022\017\n\007roomPic\030\003 \001(\005\022\017\n\007bossPic\030\004 \001("
    "\005\022\023\n\013petCurrGold\030\005 \001(\003\022\017\n\007freeNum\030\006 \001(\005\022"
    "\020\n\010needGold\030\007 \001(\003\022\021\n\tbossBlood\030\010 \001(\005\022\024\n\014"
    "bossBloodMax\030\t \001(\005\"\246\001\n\rOGReqExitType\022@\n\007"
    "msgType\030\001 \002(\0162/.com.ourgame.texasSlots.O"
    "GReqExitType.E_MsgType\022\016\n\006result\030\002 \001(\005\"C"
    "\n\tE_MsgType\022\014\n\010ET_TYPE1\020\001\022\014\n\010ET_TYPE2\020\002\022"
    "\014\n\010ET_TYPE3\020\003\022\014\n\010ET_TYPE4\020\004\"\216\001\n\tOGAckExi"
    "t\022<\n\007msgType\030\001 \002(\0162+.com.ourgame.texasSl"
    "ots.OGAckExit.E_MsgType\"C\n\tE_MsgType\022\014\n\010"
    "ET_TYPE1\020\001\022\014\n\010ET_TYPE2\020\002\022\014\n\010ET_TYPE3\020\003\022\014"
    "\n\010ET_TYPE4\020\004\";\n\016OGReqStartGame\022\014\n\004line\030\001"
    " \001(\005\022\r\n\005times\030\002 \001(\005\022\014\n\004auto\030\003 \001(\010\"\343\001\n\017OG"
    "ReqDoubleGame\022\r\n\005times\030\001 \001(\005\022\016\n\006colour\030\002"
    " \001(\005\"E\n\007E_TIMES\022\r\n\tET_TIMES1\020\001\022\r\n\tET_TIM"
    "ES2\020\002\022\r\n\tET_TIMES3\020\003\022\r\n\tET_TIMES5\020\005\"j\n\010E"
    "_COLOUR\022\016\n\nET_COLOUR1\020\001\022\016\n\nET_COLOUR2\020\002\022"
    "\016\n\nET_COLOUR3\020\003\022\016\n\nET_COLOUR4\020\004\022\016\n\nET_CO"
    "LOUR5\020\005\022\016\n\nET_COLOUR6\020\006\"\271\003\n\017OGAckGameRes"
    "ult\022\r\n\005grid1\030\001 \001(\005\022\r\n\005grid2\030\002 \001(\005\022\r\n\005gri"
    "d3\030\003 \001(\005\022\r\n\005grid4\030\004 \001(\005\022\r\n\005grid5\030\005 \001(\005\022\r"
    "\n\005grid6\030\006 \001(\005\022\r\n\005grid7\030\007 \001(\005\022\r\n\005grid8\030\010 "
    "\001(\005\022\r\n\005grid9\030\t \001(\005\022\016\n\006grid10\030\n \001(\005\022\016\n\006gr"
    "id11\030\013 \001(\005\022\016\n\006grid12\030\014 \001(\005\022\016\n\006grid13\030\r \001"
    "(\005\022\016\n\006grid14\030\016 \001(\005\022\016\n\006grid15\030\017 \001(\005\022\017\n\007wi"
    "nGold\030\020 \001(\003\022\016\n\006result\030\021 \002(\005\022\016\n\006winExp\030\022 "
    "\001(\003\022\021\n\tjpLineNum\030\023 \001(\005\022\021\n\tpetWinExp\030\024 \001("
    "\003\022\014\n\004page\030\025 \001(\005\022\022\n\npetWinGold\030\026 \001(\003\022\020\n\010w"
    "rongMsg\030\027 \001(\t\022\017\n\007freeFlg\030\030 \001(\005\022\020\n\010goldPl"
    "us\030\031 \001(\003\022\021\n\tfreeTimes\030\032 \001(\005\"\310\002\n\016GameToJS"
    "upport\022\020\n\010roleName\030\001 \002(\t\022\014\n\004type\030\002 \002(\005\022\020"
    "\n\010needGold\030\003 \002(\003\022\017\n\007winGold\030\004 \002(\003\022\016\n\006win"
    "Exp\030\005 \002(\005\022\021\n\tjpLineNum\030\006 \002(\005\022\016\n\006jpPass\030\007"
    " \002(\005\022\n\n\002jp\030\010 \001(\003\022\017\n\007bigType\030\t \001(\005\022\022\n\npet"
    "WinGold\030\n \001(\003\022\r\n\005jpBet\030\013 \001(\005\022\013\n\003bet\030\014 \001("
    "\005\022\021\n\tpetWinExp\030\r \001(\003\022\014\n\004line\030\016 \001(\005\022\r\n\005ti"
    "mes\030\017 \001(\005\022\014\n\004str1\030\020 \001(\t\022\017\n\007freeFlg\030\021 \001(\005"
    "\022\020\n\010goldPlus\030\022 \001(\003\022\022\n\njpStarName\030\023 \001(\t\"\363"
    "\002\n\021OGAckDoubleResult\022\016\n\006result\030\001 \002(\005\022\017\n\007"
    "winGold\030\002 \002(\003\022\r\n\005start\030\003 \002(\005\022\022\n\ncardNumb"
    "er\030\004 \001(\005\022\014\n\004gold\030\005 \002(\003\022\022\n\ngetGoldFlg\030\006 \002"
    "(\005\022\020\n\010roleName\030\007 \001(\t\022\017\n\007bigType\030\010 \001(\005\022\020\n"
    "\010needGold\030\t \001(\003\022\020\n\010goldPlus\030\n \001(\005\022\025\n\rgol"
    "dPlusValue\030\013 \001(\003\022\014\n\004page\030\016 \001(\005\022\016\n\006colour"
    "\030\014 \001(\005\022\r\n\005times\030\r \001(\005\022\020\n\010whiteFlg\030\017 \001(\005\022"
    "\t\n\001d\030\020 \001(\t\022\022\n\ndoubleType\030\021 \001(\005\022\021\n\tfreeTi"
    "mes\030\022 \001(\005\")\n\010E_Result\022\016\n\nET_SUCCESS\020\000\022\r\n"
    "\tET_FAILED\020\001\"\024\n\022OGReqDoubleGetGold\"|\n\022OG"
    "AckDoubleGetGold\022\020\n\010roleName\030\001 \001(\t\022\017\n\007wi"
    "nGold\030\002 \002(\003\022\020\n\010goldPlus\030\003 \002(\005\022\025\n\rgoldPlu"
    "sValue\030\004 \002(\003\022\014\n\004gold\030\005 \002(\003\022\014\n\004page\030\006 \001(\005"
    "\"/\n\rGameLoseMoney\022\014\n\004type\030\001 \002(\005\022\020\n\010needG"
    "old\030\002 \002(\003\"\007\n\005ReqJP\"\025\n\007OGAckJP\022\n\n\002jp\030\001 \002("
    "\003\" \n\016OGAckRoleUpLev\022\016\n\006curLev\030\001 \002(\005\"\r\n\013O"
    "GReqReadDB\"(\n\tOGReqPool\022\014\n\004type\030\001 \001(\005\022\r\n"
    "\005value\030\002 \001(\003\"%\n\022OGReqMailsToPlayer\022\017\n\007pl"
    "ayers\030\001 \001(\t\"\340\001\n\rOGReqAddWhite\022\020\n\010total_O"
    "n\030\001 \001(\005\022\027\n\017total_StartTime\030\002 \001(\t\022\025\n\rtota"
    "l_EndTime\030\003 \001(\t\022\020\n\010total_Up\030\004 \001(\003\022\024\n\014tot"
    "al_UpJilv\030\005 \001(\005\022\022\n\ntotal_Down\030\006 \001(\003\022\026\n\016t"
    "otal_DownJilv\030\007 \001(\005\022\020\n\010roleName\030\010 \001(\t\022\013\n"
    "\003flg\030\t \001(\005\022\013\n\003key\030\n \001(\t\022\r\n\005white\030\013 \001(\t\","
    "\n\016OGReqWhiteList\022\013\n\003key\030\001 \001(\t\022\r\n\005white\030\002"
    " \001(\t\"\267\002\n\016OGAckWhiteList\022\?\n\tWhiteList\030\001 \003"
    "(\0132,.com.ourgame.texasSlots.OGAckWhiteLi"
    "st.White\032\343\001\n\005White\022\020\n\010total_On\030\001 \001(\005\022\027\n\017"
    "total_StartTime\030\002 \001(\t\022\025\n\rtotal_EndTime\030\003"
    " \001(\t\022\020\n\010total_Up\030\004 \001(\003\022\024\n\014total_UpJilv\030\005"
    " \001(\005\022\022\n\ntotal_Down\030\006 \001(\003\022\026\n\016total_DownJi"
    "lv\030\007 \001(\005\022\020\n\010roleName\030\010 \001(\t\022\016\n\006winDay\030\t \001"
    "(\003\022\020\n\010winMonth\030\n \001(\003\022\020\n\010winTotal\030\013 \001(\003\"J"
    "\n\rOGReqDelWhite\022\020\n\010roleName\030\001 \001(\t\022\013\n\003flg"
    "\030\002 \001(\005\022\013\n\003key\030\003 \001(\t\022\r\n\005white\030\004 \001(\t\"@\n\020OG"
    "ReqSelectWhite\022\020\n\010roleName\030\001 \001(\t\022\013\n\003key\030"
    "\002 \001(\t\022\r\n\005white\030\003 \001(\t\"U\n\020OGAckSelectWhite"
    "\022\016\n\006result\030\001 \001(\003\022\020\n\010roleName\030\002 \001(\t\022\020\n\010wi"
    "nTotal\030\003 \001(\003\022\r\n\005white\030\004 \001(\t\"Y\n\010OGAckPet\022"
    "\017\n\007petName\030\001 \001(\t\022\016\n\006pinzhi\030\002 \001(\005\022\r\n\005bloo"
    "d\030\003 \001(\005\022\016\n\006attack\030\004 \001(\005\022\r\n\005award\030\005 \001(\005\"\016"
    "\n\014OGReqPetList\"\302\003\n\014OGAckPetList\0229\n\007petLi"
    "st\030\001 \003(\0132(.com.ourgame.texasSlots.OGAckP"
    "etList.Pet\032\366\002\n\003Pet\022\017\n\007petName\030\001 \001(\t\022\016\n\006p"
    "inzhi\030\002 \001(\005\022\r\n\005blood\030\003 \001(\005\022\020\n\010bloodMin\030\004"
    " \001(\005\022\020\n\010bloodMax\030\005 \001(\005\022\021\n\tbloodPlus\030\006 \001("
    "\005\022\016\n\006attack\030\007 \001(\005\022\021\n\tattackMin\030\010 \001(\005\022\021\n\t"
    "attackMax\030\t \001(\005\022\022\n\nattackPlus\030\n \001(\005\022\r\n\005a"
    "ward\030\013 \001(\005\022\020\n\010awardMin\030\014 \001(\005\022\020\n\010awardMax"
    "\030\r \001(\005\022\021\n\tawardPlus\030\016 \001(\005\022\r\n\005level\030\017 \001(\005"
    "\022\013\n\003exp\030\020 \001(\005\022\016\n\006reqexp\030\021 \001(\005\022\r\n\005petId\030\022"
    " \001(\005\022\016\n\006status\030\023 \001(\005\022\016\n\006petPic\030\024 \001(\t\022\016\n\006"
    "maxLev\030\025 \001(\005\022\r\n\005csvid\030\026 \001(\005\"\036\n\rOGReqPetR"
    "eSet\022\r\n\005petId\030\001 \001(\005\"\"\n\021OGReqPetJoinFight"
    "\022\r\n\005petId\030\001 \001(\005\"\037\n\016OGReqPetChange\022\r\n\005pet"
    "Id\030\001 \001(\005\"M\n\016OGAckPetChange\022\020\n\010itemName\030\001"
    " \001(\t\022\017\n\007itemNum\030\002 \001(\005\022\013\n\003tip\030\003 \001(\t\022\013\n\003pi"
    "c\030\004 \001(\t\"9\n\017OGReqItemChange\022\024\n\014debrisItem"
    "Id\030\001 \001(\005\022\020\n\010evolveId\030\002 \001(\005\"\025\n\023OGReqItemC"
    "hangeData\"\247\001\n\023OGAckItemChangeData\022F\n\nCha"
    "ngeList\030\001 \003(\01322.com.ourgame.texasSlots.O"
    "GAckItemChangeData.Change\032H\n\006Change\022\020\n\010d"
    "ebrisId\030\001 \001(\005\022\017\n\007needNum\030\002 \001(\005\022\r\n\005petId\030"
    "\003 \001(\005\022\014\n\004jilv\030\004 \001(\005\"\024\n\022OGReqPetChangeDat"
    "a\"\222\001\n\022OGAckPetChangeData\022G\n\010DataList\030\001 \003"
    "(\01325.com.ourgame.texasSlots.OGAckPetChan"
    "geData.ChangeData\0323\n\nChangeData\022\013\n\003lev\030\001"
    " \001(\005\022\013\n\003min\030\002 \001(\005\022\013\n\003max\030\003 \001(\005\"P\n\017OGAckI"
    "temChange\022\016\n\006result\030\001 \001(\005\022\013\n\003pic\030\002 \001(\t\022\021"
    "\n\tevolveFld\030\003 \001(\005\022\r\n\005petId\030\004 \001(\005\"L\n\rOGAc"
    "kPetReSet\022\r\n\005petId\030\001 \001(\005\022\r\n\005blood\030\002 \001(\005\022"
    "\016\n\006attack\030\003 \001(\005\022\r\n\005award\030\004 \001(\005\"\253\001\n\022OGAck"
    "PetGridOnList\022G\n\013petGridList\030\001 \003(\01322.com"
    ".ourgame.texasSlots.OGAckPetGridOnList.P"
    "etGrid\032L\n\007PetGrid\022\n\n\002id\030\001 \001(\005\022\014\n\004grid\030\002 "
    "\001(\005\022\014\n\004tips\030\003 \001(\t\022\013\n\003lev\030\004 \001(\005\022\014\n\004gold\030\005"
    " \001(\003\"\016\n\014OGReqPetGrid\"\032\n\tOGAckPage\022\r\n\005sta"
    "te\030\001 \001(\005\"\017\n\rOGReqPetFight\"\203\002\n\023OGAckPetFi"
    "ghtResult\022\016\n\006result\030\001 \001(\005\022\021\n\twinResult\030\002"
    " \001(\005\022\020\n\010petSkill\030\003 \001(\005\022\022\n\npetJoinNum\030\004 \001"
    "(\005\022\017\n\007petData\030\005 \001(\005\022\021\n\tbossSkill\030\006 \001(\005\022\023"
    "\n\013bossJoinNum\030\007 \001(\005\022\020\n\010bossData\030\010 \001(\005\022\020\n"
    "\010petTimes\030\t \001(\005\022\021\n\tpetEffect\030\n \001(\005\022\021\n\tbo"
    "ssTimes\030\013 \001(\005\022\022\n\nbossEffect\030\014 \001(\005\022\014\n\004pag"
    "e\030\r \001(\005\"\016\n\014OGReqPetFlee\"\022\n\020OGReqPetGetAw"
    "ard\"\327\001\n\020OGAckPetGetAward\022A\n\tawardList\030\001 "
    "\003(\0132..com.ourgame.texasSlots.OGAckPetGet"
    "Award.Award\022\020\n\010awardFlg\030\002 \001(\005\022\020\n\010roleNam"
    "e\030\003 \001(\t\032\\\n\005Award\022\014\n\004type\030\001 \001(\005\022\013\n\003num\030\002 "
    "\001(\003\022\n\n\002ok\030\003 \001(\005\022\017\n\007petName\030\004 \001(\t\022\013\n\003pic\030"
    "\005 \001(\t\022\016\n\006itemId\030\006 \001(\005\"\226\001\n\rOGAckRankList\022"
    "<\n\010rankList\030\001 \003(\0132*.com.ourgame.texasSlo"
    "ts.OGAckRankList.Rank\022\014\n\004type\030\002 \001(\005\0329\n\004R"
    "ank\022\016\n\006rankId\030\001 \001(\005\022\020\n\010roleName\030\002 \001(\t\022\017\n"
    "\007getGold\030\003 \001(\003\"\341\004\n\tOGAckRank\0229\n\trankList"
    "A\030\001 \003(\0132&.com.ourgame.texasSlots.OGAckRa"
    "nk.Rank\0229\n\trankListB\030\002 \003(\0132&.com.ourgame"
    ".texasSlots.OGAckRank.Rank\022\020\n\010roleName\030\003"
    " \001(\t\022\014\n\004aNum\030\004 \001(\005\022\r\n\005aGold\030\005 \001(\003\022\021\n\taRo"
    "leName\030\006 \001(\t\022\014\n\004bNum\030\007 \001(\005\022\r\n\005bGold\030\010 \001("
    "\003\022\021\n\tbRoleName\030\t \001(\t\0229\n\tlastWeekA\030\n \003(\0132"
    "&.com.ourgame.texasSlots.OGAckRank.Rank\022"
    "9\n\tlastWeekB\030\013 \003(\0132&.com.ourgame.texasSl"
    "ots.OGAckRank.Rank\0229\n\trankListC\030\014 \003(\0132&."
    "com.ourgame.texasSlots.OGAckRank.Rank\022\021\n"
    "\tcRankName\030\r \001(\t\022\020\n\010aRankTip\030\016 \001(\t\022\020\n\010bR"
    "ankTip\030\017 \001(\t\022\020\n\010cRankTip\030\020 \001(\t\022\021\n\tlaRank"
    "Tip\030\021 \001(\t\022\021\n\tlbRankTip\030\022 \001(\t\022\021\n\trankBtnO"
    "n\030\023 \001(\005\0329\n\004Rank\022\016\n\006rankId\030\001 \001(\005\022\020\n\010roleN"
    "ame\030\002 \001(\t\022\017\n\007getGold\030\003 \001(\003\"\035\n\tOGReqRank\022"
    "\020\n\010roleName\030\001 \001(\t\"E\n\rOGReqRankToJS\022\020\n\010ro"
    "leName\030\001 \001(\t\022\020\n\010getGold1\030\002 \001(\003\022\020\n\010getGol"
    "d4\030\003 \001(\003\"h\n\013OGReqNotice\022\013\n\003num\030\001 \001(\005\022\014\n\004"
    "time\030\002 \001(\005\022\017\n\007content\030\003 \001(\t\022\r\n\005color\030\004 \001"
    "(\t\022\020\n\010sendTime\030\005 \001(\t\022\014\n\004type\030\006 \001(\005\"*\n\nOG"
    "GuangGao\022\013\n\003flg\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\"\253"
    "\001\n\014OGAckMessage\022\014\n\004type\030\001 \001(\005\022\017\n\007content"
    "\030\002 \001(\t\022\017\n\007subtype\030\003 \001(\005\022\013\n\003flg\030\004 \001(\005\022\020\n\010"
    "roleName\030\005 \001(\t\022\016\n\006userid\030\006 \001(\t\022\020\n\010rankTy"
    "pe\030\007 \001(\005\022\017\n\007rankNum\030\010 \001(\005\022\013\n\003tip\030\t \001(\t\022\014"
    "\n\004time\030\n \001(\t\"{\n\rOGAckStopGame\022>\n\006status\030"
    "\001 \001(\0162..com.ourgame.texasSlots.OGAckStop"
    "Game.E_Status\"*\n\010E_Status\022\014\n\010ET_STOPS\020\001\022"
    "\020\n\014ET_CARRYCAPS\020\002\"\302\002\n\nOGAckMails\0229\n\010Mail"
    "List\030\001 \003(\0132\'.com.ourgame.texasSlots.OGAc"
    "kMails.Mail\032\370\001\n\004Mail\022\n\n\002id\030\001 \001(\005\022\024\n\014send"
    "RoleName\030\002 \001(\t\022\024\n\014recvRoleName\030\003 \001(\t\022\017\n\007"
    "content\030\004 \001(\t\022\022\n\ncreateTime\030\005 \001(\t\022\021\n\tmai"
    "lTitle\030\006 \001(\t\022\021\n\tawardType\030\007 \001(\005\022\016\n\006itemI"
    "d\030\010 \001(\005\022\017\n\007itemNum\030\t \001(\005\022\016\n\006isRead\030\n \001(\005"
    "\022\014\n\004isOk\030\013 \001(\005\022\013\n\003pic\030\014 \001(\t\022\020\n\010itemName\030"
    "\r \001(\t\022\017\n\007itemTip\030\016 \001(\t\",\n\020OGReqHandleMai"
    "ls\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\t\"\014\n\nOGReqMai"
    "ls\"j\n\tOGAckMail\022\016\n\006result\030\001 \001(\005\022\013\n\003pic\030\002"
    " \001(\t\022\013\n\003num\030\003 \001(\005\022\021\n\tawardType\030\004 \001(\005\022\020\n\010"
    "errorMsg\030\005 \001(\t\022\016\n\006mailId\030\006 \001(\005\"\021\n\017OGAckU"
    "nreadMail\"\323\001\n\nOGAckItems\0229\n\010ItemList\030\001 \003"
    "(\0132\'.com.ourgame.texasSlots.OGAckItems.I"
    "tem\032\211\001\n\004Item\022\n\n\002id\030\001 \001(\005\022\016\n\006itemId\030\002 \001(\005"
    "\022\017\n\007itemNum\030\003 \001(\005\022\013\n\003pic\030\004 \001(\t\022\014\n\004name\030\005"
    " \001(\t\022\014\n\004type\030\006 \001(\005\022\013\n\003tip\030\007 \001(\t\022\016\n\006maxNu"
    "m\030\010 \001(\005\022\016\n\006effect\030\t \001(\005\"\321\001\n\021OGAckShopIte"
    "mInfo\022D\n\010ShopList\030\001 \003(\01322.com.ourgame.te"
    "xasSlots.OGAckShopItemInfo.ItemInfo\032v\n\010I"
    "temInfo\022\016\n\006itemId\030\001 \001(\005\022\021\n\titemPrice\030\002 \001"
    "(\005\022\020\n\010shopDesc\030\003 \001(\t\022\017\n\007shopPic\030\004 \001(\t\022\022\n"
    "\nshopMaxNum\030\005 \001(\005\022\020\n\010itemName\030\006 \001(\t\"\037\n\rO"
    "GReqShopItem\022\016\n\006itemId\030\001 \001(\005\"\177\n\rOGAckCut"
    "Items\022<\n\010ItemList\030\001 \003(\0132*.com.ourgame.te"
    "xasSlots.OGAckCutItems.Item\0320\n\004Item\022\n\n\002i"
    "d\030\001 \001(\005\022\017\n\007itemNum\030\002 \001(\005\022\013\n\003flg\030\003 \001(\005\" \n"
    "\rOGAckErrorMsg\022\017\n\007content\030\001 \001(\t\"+\n\014OGReq"
    "BuyItem\022\016\n\006itemId\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\022\n\020"
    "OGReqNewHandOver\"\023\n\021OGReqNewHandAward\"\\\n"
    "\021OGAckNewHandAward\022\016\n\006itemId\030\001 \001(\005\022\017\n\007it"
    "emNum\030\002 \001(\005\022\013\n\003pic\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\013"
    "\n\003dis\030\005 \001(\t\"\"\n\020OGAckPlayerLogot\022\016\n\006userI"
    "d\030\001 \001(\t\"I\n\rOGAckRankHour\022\014\n\004type\030\001 \001(\005\022\014"
    "\n\004week\030\002 \001(\005\022\014\n\004hour\030\003 \001(\005\022\016\n\006minute\030\004 \001"
    "(\005\"!\n\rOGReqJpRecord\022\020\n\010roleName\030\001 \001(\t\"]\n"
    "\013OGReqJpStar\022\020\n\010roleName\030\001 \001(\t\022\022\n\njpStar"
    "Name\030\002 \001(\t\022\024\n\014jpStarTemNum\030\003 \001(\003\022\022\n\njpSt"
    "arTime\030\004 \001(\t\"\215\002\n\rOGAckJpRecord\022D\n\014JpReco"
    "rdList\030\001 \003(\0132..com.ourgame.texasSlots.OG"
    "AckJpRecord.JpRecord\022\r\n\005tipOn\030\002 \002(\005\022\017\n\007t"
    "ipText\030\003 \001(\t\032\225\001\n\010JpRecord\022\016\n\006userId\030\001 \002("
    "\t\022\020\n\010roleName\030\002 \002(\t\022\017\n\007winGold\030\003 \002(\003\022\016\n\006"
    "currJp\030\004 \002(\003\022\020\n\010showType\030\005 \002(\005\022\020\n\010gameNa"
    "me\030\006 \002(\t\022\022\n\ncreatetime\030\007 \002(\t\022\016\n\006gameId\030\010"
    " \002(\005\"\"\n\017OGAckLoginJpMsg\022\017\n\007content\030\001 \001(\t"
    "\"3\n\022OGReqLoginGetAward\022\020\n\010roleName\030\001 \001(\t"
    "\022\013\n\003lev\030\002 \001(\005\"\232\001\n\022OGAckLoginGetAward\022\013\n\003"
    "pos\030\001 \001(\005\022\013\n\003pic\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022"
    "\020\n\010itemtype\030\004 \001(\005\022\016\n\006itemid\030\005 \001(\005\022\013\n\003num"
    "\030\006 \001(\005\022\020\n\010roleName\030\007 \001(\t\022\n\n\002ok\030\010 \001(\005\022\014\n\004"
    "jilv\030\t \001(\005\"\311\001\n\023OGAckLoginAwardList\022D\n\tAw"
    "ardList\030\001 \003(\01321.com.ourgame.texasSlots.O"
    "GAckLoginAwardList.Award\022\020\n\010roleName\030\002 \001"
    "(\t\032Z\n\005Award\022\013\n\003pos\030\001 \001(\005\022\013\n\003pic\030\002 \001(\t\022\013\n"
    "\003lev\030\003 \001(\005\022\017\n\007content\030\004 \001(\t\022\013\n\003num\030\005 \001(\005"
    "\022\014\n\004type\030\006 \001(\005\"\177\n\023OGReqDoubleJpResult\022\020\n"
    "\010needGold\030\001 \001(\003\022\020\n\010roleName\030\002 \001(\t\022\016\n\006use"
    "rId\030\003 \001(\t\022\017\n\007daygold\030\004 \001(\003\022\020\n\010weekgold\030\005"
    " \001(\003\022\021\n\tmonthgold\030\006 \001(\003\"}\n\023OGAckDoubleJp"
    "Result\022\014\n\004gold\030\001 \001(\003\022\020\n\010roleName\030\002 \001(\t\022\020"
    "\n\010needGold\030\003 \001(\003\022\n\n\002jp\030\004 \001(\003\022\n\n\002id\030\005 \001(\005"
    "\022\r\n\005jilv1\030\006 \001(\005\022\r\n\005jilv2\030\007 \001(\005\"\213\001\n\017OGAck"
    "DoublePlus\022J\n\016DoublePlusList\030\001 \003(\01322.com"
    ".ourgame.texasSlots.OGAckDoublePlus.Doub"
    "lePlus\032,\n\nDoublePlus\022\020\n\010startLev\030\001 \001(\005\022\014"
    "\n\004plus\030\002 \001(\005\"\"\n\016OGReqGetPlayer\022\020\n\010rolena"
    "me\030\001 \001(\t\"E\n\022OGReqChangePutGold\022\014\n\004gold\030\001"
    " \001(\003\022\017\n\007freeFlg\030\002 \001(\003\022\020\n\010whiteGld\030\003 \001(\003\""
    "%\n\023OGReqPetReturnAward\022\016\n\006action\030\001 \001(\005\"1"
    "\n\023OGAckPetReturnAward\022\014\n\004type\030\001 \001(\005\022\014\n\004g"
    "old\030\002 \001(\003\"x\n\024OGReqGetPutGoldAward\022\014\n\004gol"
    "d\030\001 \001(\003\022\020\n\010roleName\030\002 \001(\t\022\017\n\007putGold\030\003 \001"
    "(\003\022\016\n\006action\030\004 \001(\005\022\013\n\003com\030\005 \001(\005\022\022\n\nputGo"
    "ldSum\030\006 \001(\003\"\211\001\n\016OGAckReSetFeed\022I\n\016player"
    "FeedList\030\001 \003(\01321.com.ourgame.texasSlots."
    "OGAckReSetFeed.PlayerFeed\032,\n\nPlayerFeed\022"
    "\020\n\010roleName\030\001 \001(\t\022\014\n\004feed\030\002 \001(\005\" \n\014OGReq"
    "JpStart\022\020\n\010roleName\030\001 \001(\t\"^\n\014OGAckJpStar"
    "t\022\020\n\010roleName\030\001 \001(\t\022\022\n\njpStarName\030\002 \001(\t\022"
    "\024\n\014jpStarTemNum\030\003 \001(\003\022\022\n\njpStarTime\030\004 \001("
    "\t\"\020\n\016OGReqBindPhone\"/\n\016OGAckBindPhone\022\016\n"
    "\006result\030\001 \001(\005\022\r\n\005phone\030\002 \001(\t\"\"\n\021OGReqGet"
    "PhoneCode\022\r\n\005phone\030\001 \001(\t\" \n\021OGAckGetPhon"
    "eCode\022\013\n\003msg\030\001 \001(\t\"\"\n\022OGReqGetPhoneAward"
    "\022\014\n\004code\030\001 \001(\005\"@\n\022OGAckGetPhoneAward\022\013\n\003"
    "msg\030\001 \001(\t\022\016\n\006result\030\002 \001(\005\022\r\n\005phone\030\003 \001(\t"
    "\".\n\rOGAckAddJpNum\022\020\n\010addJpNum\030\001 \001(\003\022\013\n\003f"
    "lg\030\002 \001(\005\"\215\001\n\013OGAckJpHall\022D\n\013ContentList\030"
    "\001 \003(\0132/.com.ourgame.texasSlots.OGAckJpHa"
    "ll.HallContent\0328\n\013HallContent\022\014\n\004name\030\001 "
    "\001(\t\022\r\n\005golod\030\002 \001(\003\022\014\n\004time\030\003 \001(\t\"&\n\007OGAc"
    "kAd\022\n\n\002on\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\"\020\n\016OGAc"
    "kLeaveGame\"\037\n\020OGAckYDFreeTimes\022\013\n\003num\030\001 "
    "\001(\005*\214\001\n\021E_TRCardColorType\022\036\n\032TR_CARD_COL"
    "OR_TYPE_DIAMOND\020\001\022\033\n\027TR_CARD_COLOR_TYPE_"
    "CLUB\020\002\022\034\n\030TR_CARD_COLOR_TYPE_HEART\020\003\022\034\n\030"
    "TR_CARD_COLOR_TYPE_SPADE\020\004*\257\002\n\016E_TRCardN"
    "umber\022\024\n\020TR_CARD_NUMBER_A\020\001\022\024\n\020TR_CARD_N"
    "UMBER_2\020\002\022\024\n\020TR_CARD_NUMBER_3\020\003\022\024\n\020TR_CA"
    "RD_NUMBER_4\020\004\022\024\n\020TR_CARD_NUMBER_5\020\005\022\024\n\020T"
    "R_CARD_NUMBER_6\020\006\022\024\n\020TR_CARD_NUMBER_7\020\007\022"
    "\024\n\020TR_CARD_NUMBER_8\020\010\022\024\n\020TR_CARD_NUMBER_"
    "9\020\t\022\025\n\021TR_CARD_NUMBER_10\020\n\022\024\n\020TR_CARD_NU"
    "MBER_J\020\013\022\024\n\020TR_CARD_NUMBER_Q\020\014\022\024\n\020TR_CAR"
    "D_NUMBER_K\020\rB-\n\026com.ourgame.texasSlotsB\023"
    "TexasSlotsTranspond", 13259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OGTexasSlotsProtocol.proto", &protobuf_RegisterTypes);
  OGReqTRLogin1::default_instance_ = new OGReqTRLogin1();
  OGAckLinkServer::default_instance_ = new OGAckLinkServer();
  OGReqTRLogin2::default_instance_ = new OGReqTRLogin2();
  OGAckRoleLoginMsg::default_instance_ = new OGAckRoleLoginMsg();
  OGAckRoleMsg::default_instance_ = new OGAckRoleMsg();
  OGAckPetUpdatedMsg::default_instance_ = new OGAckPetUpdatedMsg();
  OGAckGameServer::default_instance_ = new OGAckGameServer();
  OGAckRoomList::default_instance_ = new OGAckRoomList();
  OGAckRoomList_Room::default_instance_ = new OGAckRoomList_Room();
  OGReqJoinRoom::default_instance_ = new OGReqJoinRoom();
  OGAckRoom::default_instance_ = new OGAckRoom();
  OGAckRoom_RoomBet::default_instance_ = new OGAckRoom_RoomBet();
  OGAckBoss::default_instance_ = new OGAckBoss();
  OGReqExitType::default_instance_ = new OGReqExitType();
  OGAckExit::default_instance_ = new OGAckExit();
  OGReqStartGame::default_instance_ = new OGReqStartGame();
  OGReqDoubleGame::default_instance_ = new OGReqDoubleGame();
  OGAckGameResult::default_instance_ = new OGAckGameResult();
  GameToJSupport::default_instance_ = new GameToJSupport();
  OGAckDoubleResult::default_instance_ = new OGAckDoubleResult();
  OGReqDoubleGetGold::default_instance_ = new OGReqDoubleGetGold();
  OGAckDoubleGetGold::default_instance_ = new OGAckDoubleGetGold();
  GameLoseMoney::default_instance_ = new GameLoseMoney();
  ReqJP::default_instance_ = new ReqJP();
  OGAckJP::default_instance_ = new OGAckJP();
  OGAckRoleUpLev::default_instance_ = new OGAckRoleUpLev();
  OGReqReadDB::default_instance_ = new OGReqReadDB();
  OGReqPool::default_instance_ = new OGReqPool();
  OGReqMailsToPlayer::default_instance_ = new OGReqMailsToPlayer();
  OGReqAddWhite::default_instance_ = new OGReqAddWhite();
  OGReqWhiteList::default_instance_ = new OGReqWhiteList();
  OGAckWhiteList::default_instance_ = new OGAckWhiteList();
  OGAckWhiteList_White::default_instance_ = new OGAckWhiteList_White();
  OGReqDelWhite::default_instance_ = new OGReqDelWhite();
  OGReqSelectWhite::default_instance_ = new OGReqSelectWhite();
  OGAckSelectWhite::default_instance_ = new OGAckSelectWhite();
  OGAckPet::default_instance_ = new OGAckPet();
  OGReqPetList::default_instance_ = new OGReqPetList();
  OGAckPetList::default_instance_ = new OGAckPetList();
  OGAckPetList_Pet::default_instance_ = new OGAckPetList_Pet();
  OGReqPetReSet::default_instance_ = new OGReqPetReSet();
  OGReqPetJoinFight::default_instance_ = new OGReqPetJoinFight();
  OGReqPetChange::default_instance_ = new OGReqPetChange();
  OGAckPetChange::default_instance_ = new OGAckPetChange();
  OGReqItemChange::default_instance_ = new OGReqItemChange();
  OGReqItemChangeData::default_instance_ = new OGReqItemChangeData();
  OGAckItemChangeData::default_instance_ = new OGAckItemChangeData();
  OGAckItemChangeData_Change::default_instance_ = new OGAckItemChangeData_Change();
  OGReqPetChangeData::default_instance_ = new OGReqPetChangeData();
  OGAckPetChangeData::default_instance_ = new OGAckPetChangeData();
  OGAckPetChangeData_ChangeData::default_instance_ = new OGAckPetChangeData_ChangeData();
  OGAckItemChange::default_instance_ = new OGAckItemChange();
  OGAckPetReSet::default_instance_ = new OGAckPetReSet();
  OGAckPetGridOnList::default_instance_ = new OGAckPetGridOnList();
  OGAckPetGridOnList_PetGrid::default_instance_ = new OGAckPetGridOnList_PetGrid();
  OGReqPetGrid::default_instance_ = new OGReqPetGrid();
  OGAckPage::default_instance_ = new OGAckPage();
  OGReqPetFight::default_instance_ = new OGReqPetFight();
  OGAckPetFightResult::default_instance_ = new OGAckPetFightResult();
  OGReqPetFlee::default_instance_ = new OGReqPetFlee();
  OGReqPetGetAward::default_instance_ = new OGReqPetGetAward();
  OGAckPetGetAward::default_instance_ = new OGAckPetGetAward();
  OGAckPetGetAward_Award::default_instance_ = new OGAckPetGetAward_Award();
  OGAckRankList::default_instance_ = new OGAckRankList();
  OGAckRankList_Rank::default_instance_ = new OGAckRankList_Rank();
  OGAckRank::default_instance_ = new OGAckRank();
  OGAckRank_Rank::default_instance_ = new OGAckRank_Rank();
  OGReqRank::default_instance_ = new OGReqRank();
  OGReqRankToJS::default_instance_ = new OGReqRankToJS();
  OGReqNotice::default_instance_ = new OGReqNotice();
  OGGuangGao::default_instance_ = new OGGuangGao();
  OGAckMessage::default_instance_ = new OGAckMessage();
  OGAckStopGame::default_instance_ = new OGAckStopGame();
  OGAckMails::default_instance_ = new OGAckMails();
  OGAckMails_Mail::default_instance_ = new OGAckMails_Mail();
  OGReqHandleMails::default_instance_ = new OGReqHandleMails();
  OGReqMails::default_instance_ = new OGReqMails();
  OGAckMail::default_instance_ = new OGAckMail();
  OGAckUnreadMail::default_instance_ = new OGAckUnreadMail();
  OGAckItems::default_instance_ = new OGAckItems();
  OGAckItems_Item::default_instance_ = new OGAckItems_Item();
  OGAckShopItemInfo::default_instance_ = new OGAckShopItemInfo();
  OGAckShopItemInfo_ItemInfo::default_instance_ = new OGAckShopItemInfo_ItemInfo();
  OGReqShopItem::default_instance_ = new OGReqShopItem();
  OGAckCutItems::default_instance_ = new OGAckCutItems();
  OGAckCutItems_Item::default_instance_ = new OGAckCutItems_Item();
  OGAckErrorMsg::default_instance_ = new OGAckErrorMsg();
  OGReqBuyItem::default_instance_ = new OGReqBuyItem();
  OGReqNewHandOver::default_instance_ = new OGReqNewHandOver();
  OGReqNewHandAward::default_instance_ = new OGReqNewHandAward();
  OGAckNewHandAward::default_instance_ = new OGAckNewHandAward();
  OGAckPlayerLogot::default_instance_ = new OGAckPlayerLogot();
  OGAckRankHour::default_instance_ = new OGAckRankHour();
  OGReqJpRecord::default_instance_ = new OGReqJpRecord();
  OGReqJpStar::default_instance_ = new OGReqJpStar();
  OGAckJpRecord::default_instance_ = new OGAckJpRecord();
  OGAckJpRecord_JpRecord::default_instance_ = new OGAckJpRecord_JpRecord();
  OGAckLoginJpMsg::default_instance_ = new OGAckLoginJpMsg();
  OGReqLoginGetAward::default_instance_ = new OGReqLoginGetAward();
  OGAckLoginGetAward::default_instance_ = new OGAckLoginGetAward();
  OGAckLoginAwardList::default_instance_ = new OGAckLoginAwardList();
  OGAckLoginAwardList_Award::default_instance_ = new OGAckLoginAwardList_Award();
  OGReqDoubleJpResult::default_instance_ = new OGReqDoubleJpResult();
  OGAckDoubleJpResult::default_instance_ = new OGAckDoubleJpResult();
  OGAckDoublePlus::default_instance_ = new OGAckDoublePlus();
  OGAckDoublePlus_DoublePlus::default_instance_ = new OGAckDoublePlus_DoublePlus();
  OGReqGetPlayer::default_instance_ = new OGReqGetPlayer();
  OGReqChangePutGold::default_instance_ = new OGReqChangePutGold();
  OGReqPetReturnAward::default_instance_ = new OGReqPetReturnAward();
  OGAckPetReturnAward::default_instance_ = new OGAckPetReturnAward();
  OGReqGetPutGoldAward::default_instance_ = new OGReqGetPutGoldAward();
  OGAckReSetFeed::default_instance_ = new OGAckReSetFeed();
  OGAckReSetFeed_PlayerFeed::default_instance_ = new OGAckReSetFeed_PlayerFeed();
  OGReqJpStart::default_instance_ = new OGReqJpStart();
  OGAckJpStart::default_instance_ = new OGAckJpStart();
  OGReqBindPhone::default_instance_ = new OGReqBindPhone();
  OGAckBindPhone::default_instance_ = new OGAckBindPhone();
  OGReqGetPhoneCode::default_instance_ = new OGReqGetPhoneCode();
  OGAckGetPhoneCode::default_instance_ = new OGAckGetPhoneCode();
  OGReqGetPhoneAward::default_instance_ = new OGReqGetPhoneAward();
  OGAckGetPhoneAward::default_instance_ = new OGAckGetPhoneAward();
  OGAckAddJpNum::default_instance_ = new OGAckAddJpNum();
  OGAckJpHall::default_instance_ = new OGAckJpHall();
  OGAckJpHall_HallContent::default_instance_ = new OGAckJpHall_HallContent();
  OGAckAd::default_instance_ = new OGAckAd();
  OGAckLeaveGame::default_instance_ = new OGAckLeaveGame();
  OGAckYDFreeTimes::default_instance_ = new OGAckYDFreeTimes();
  OGReqTRLogin1::default_instance_->InitAsDefaultInstance();
  OGAckLinkServer::default_instance_->InitAsDefaultInstance();
  OGReqTRLogin2::default_instance_->InitAsDefaultInstance();
  OGAckRoleLoginMsg::default_instance_->InitAsDefaultInstance();
  OGAckRoleMsg::default_instance_->InitAsDefaultInstance();
  OGAckPetUpdatedMsg::default_instance_->InitAsDefaultInstance();
  OGAckGameServer::default_instance_->InitAsDefaultInstance();
  OGAckRoomList::default_instance_->InitAsDefaultInstance();
  OGAckRoomList_Room::default_instance_->InitAsDefaultInstance();
  OGReqJoinRoom::default_instance_->InitAsDefaultInstance();
  OGAckRoom::default_instance_->InitAsDefaultInstance();
  OGAckRoom_RoomBet::default_instance_->InitAsDefaultInstance();
  OGAckBoss::default_instance_->InitAsDefaultInstance();
  OGReqExitType::default_instance_->InitAsDefaultInstance();
  OGAckExit::default_instance_->InitAsDefaultInstance();
  OGReqStartGame::default_instance_->InitAsDefaultInstance();
  OGReqDoubleGame::default_instance_->InitAsDefaultInstance();
  OGAckGameResult::default_instance_->InitAsDefaultInstance();
  GameToJSupport::default_instance_->InitAsDefaultInstance();
  OGAckDoubleResult::default_instance_->InitAsDefaultInstance();
  OGReqDoubleGetGold::default_instance_->InitAsDefaultInstance();
  OGAckDoubleGetGold::default_instance_->InitAsDefaultInstance();
  GameLoseMoney::default_instance_->InitAsDefaultInstance();
  ReqJP::default_instance_->InitAsDefaultInstance();
  OGAckJP::default_instance_->InitAsDefaultInstance();
  OGAckRoleUpLev::default_instance_->InitAsDefaultInstance();
  OGReqReadDB::default_instance_->InitAsDefaultInstance();
  OGReqPool::default_instance_->InitAsDefaultInstance();
  OGReqMailsToPlayer::default_instance_->InitAsDefaultInstance();
  OGReqAddWhite::default_instance_->InitAsDefaultInstance();
  OGReqWhiteList::default_instance_->InitAsDefaultInstance();
  OGAckWhiteList::default_instance_->InitAsDefaultInstance();
  OGAckWhiteList_White::default_instance_->InitAsDefaultInstance();
  OGReqDelWhite::default_instance_->InitAsDefaultInstance();
  OGReqSelectWhite::default_instance_->InitAsDefaultInstance();
  OGAckSelectWhite::default_instance_->InitAsDefaultInstance();
  OGAckPet::default_instance_->InitAsDefaultInstance();
  OGReqPetList::default_instance_->InitAsDefaultInstance();
  OGAckPetList::default_instance_->InitAsDefaultInstance();
  OGAckPetList_Pet::default_instance_->InitAsDefaultInstance();
  OGReqPetReSet::default_instance_->InitAsDefaultInstance();
  OGReqPetJoinFight::default_instance_->InitAsDefaultInstance();
  OGReqPetChange::default_instance_->InitAsDefaultInstance();
  OGAckPetChange::default_instance_->InitAsDefaultInstance();
  OGReqItemChange::default_instance_->InitAsDefaultInstance();
  OGReqItemChangeData::default_instance_->InitAsDefaultInstance();
  OGAckItemChangeData::default_instance_->InitAsDefaultInstance();
  OGAckItemChangeData_Change::default_instance_->InitAsDefaultInstance();
  OGReqPetChangeData::default_instance_->InitAsDefaultInstance();
  OGAckPetChangeData::default_instance_->InitAsDefaultInstance();
  OGAckPetChangeData_ChangeData::default_instance_->InitAsDefaultInstance();
  OGAckItemChange::default_instance_->InitAsDefaultInstance();
  OGAckPetReSet::default_instance_->InitAsDefaultInstance();
  OGAckPetGridOnList::default_instance_->InitAsDefaultInstance();
  OGAckPetGridOnList_PetGrid::default_instance_->InitAsDefaultInstance();
  OGReqPetGrid::default_instance_->InitAsDefaultInstance();
  OGAckPage::default_instance_->InitAsDefaultInstance();
  OGReqPetFight::default_instance_->InitAsDefaultInstance();
  OGAckPetFightResult::default_instance_->InitAsDefaultInstance();
  OGReqPetFlee::default_instance_->InitAsDefaultInstance();
  OGReqPetGetAward::default_instance_->InitAsDefaultInstance();
  OGAckPetGetAward::default_instance_->InitAsDefaultInstance();
  OGAckPetGetAward_Award::default_instance_->InitAsDefaultInstance();
  OGAckRankList::default_instance_->InitAsDefaultInstance();
  OGAckRankList_Rank::default_instance_->InitAsDefaultInstance();
  OGAckRank::default_instance_->InitAsDefaultInstance();
  OGAckRank_Rank::default_instance_->InitAsDefaultInstance();
  OGReqRank::default_instance_->InitAsDefaultInstance();
  OGReqRankToJS::default_instance_->InitAsDefaultInstance();
  OGReqNotice::default_instance_->InitAsDefaultInstance();
  OGGuangGao::default_instance_->InitAsDefaultInstance();
  OGAckMessage::default_instance_->InitAsDefaultInstance();
  OGAckStopGame::default_instance_->InitAsDefaultInstance();
  OGAckMails::default_instance_->InitAsDefaultInstance();
  OGAckMails_Mail::default_instance_->InitAsDefaultInstance();
  OGReqHandleMails::default_instance_->InitAsDefaultInstance();
  OGReqMails::default_instance_->InitAsDefaultInstance();
  OGAckMail::default_instance_->InitAsDefaultInstance();
  OGAckUnreadMail::default_instance_->InitAsDefaultInstance();
  OGAckItems::default_instance_->InitAsDefaultInstance();
  OGAckItems_Item::default_instance_->InitAsDefaultInstance();
  OGAckShopItemInfo::default_instance_->InitAsDefaultInstance();
  OGAckShopItemInfo_ItemInfo::default_instance_->InitAsDefaultInstance();
  OGReqShopItem::default_instance_->InitAsDefaultInstance();
  OGAckCutItems::default_instance_->InitAsDefaultInstance();
  OGAckCutItems_Item::default_instance_->InitAsDefaultInstance();
  OGAckErrorMsg::default_instance_->InitAsDefaultInstance();
  OGReqBuyItem::default_instance_->InitAsDefaultInstance();
  OGReqNewHandOver::default_instance_->InitAsDefaultInstance();
  OGReqNewHandAward::default_instance_->InitAsDefaultInstance();
  OGAckNewHandAward::default_instance_->InitAsDefaultInstance();
  OGAckPlayerLogot::default_instance_->InitAsDefaultInstance();
  OGAckRankHour::default_instance_->InitAsDefaultInstance();
  OGReqJpRecord::default_instance_->InitAsDefaultInstance();
  OGReqJpStar::default_instance_->InitAsDefaultInstance();
  OGAckJpRecord::default_instance_->InitAsDefaultInstance();
  OGAckJpRecord_JpRecord::default_instance_->InitAsDefaultInstance();
  OGAckLoginJpMsg::default_instance_->InitAsDefaultInstance();
  OGReqLoginGetAward::default_instance_->InitAsDefaultInstance();
  OGAckLoginGetAward::default_instance_->InitAsDefaultInstance();
  OGAckLoginAwardList::default_instance_->InitAsDefaultInstance();
  OGAckLoginAwardList_Award::default_instance_->InitAsDefaultInstance();
  OGReqDoubleJpResult::default_instance_->InitAsDefaultInstance();
  OGAckDoubleJpResult::default_instance_->InitAsDefaultInstance();
  OGAckDoublePlus::default_instance_->InitAsDefaultInstance();
  OGAckDoublePlus_DoublePlus::default_instance_->InitAsDefaultInstance();
  OGReqGetPlayer::default_instance_->InitAsDefaultInstance();
  OGReqChangePutGold::default_instance_->InitAsDefaultInstance();
  OGReqPetReturnAward::default_instance_->InitAsDefaultInstance();
  OGAckPetReturnAward::default_instance_->InitAsDefaultInstance();
  OGReqGetPutGoldAward::default_instance_->InitAsDefaultInstance();
  OGAckReSetFeed::default_instance_->InitAsDefaultInstance();
  OGAckReSetFeed_PlayerFeed::default_instance_->InitAsDefaultInstance();
  OGReqJpStart::default_instance_->InitAsDefaultInstance();
  OGAckJpStart::default_instance_->InitAsDefaultInstance();
  OGReqBindPhone::default_instance_->InitAsDefaultInstance();
  OGAckBindPhone::default_instance_->InitAsDefaultInstance();
  OGReqGetPhoneCode::default_instance_->InitAsDefaultInstance();
  OGAckGetPhoneCode::default_instance_->InitAsDefaultInstance();
  OGReqGetPhoneAward::default_instance_->InitAsDefaultInstance();
  OGAckGetPhoneAward::default_instance_->InitAsDefaultInstance();
  OGAckAddJpNum::default_instance_->InitAsDefaultInstance();
  OGAckJpHall::default_instance_->InitAsDefaultInstance();
  OGAckJpHall_HallContent::default_instance_->InitAsDefaultInstance();
  OGAckAd::default_instance_->InitAsDefaultInstance();
  OGAckLeaveGame::default_instance_->InitAsDefaultInstance();
  OGAckYDFreeTimes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OGTexasSlotsProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OGTexasSlotsProtocol_2eproto {
  StaticDescriptorInitializer_OGTexasSlotsProtocol_2eproto() {
    protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();
  }
} static_descriptor_initializer_OGTexasSlotsProtocol_2eproto_;

const ::google::protobuf::EnumDescriptor* E_TRCardColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TRCardColorType_descriptor_;
}
bool E_TRCardColorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_TRCardNumber_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TRCardNumber_descriptor_;
}
bool E_TRCardNumber_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqTRLogin1::kUserIdFieldNumber;
#endif  // !_MSC_VER

OGReqTRLogin1::OGReqTRLogin1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqTRLogin1::InitAsDefaultInstance() {
}

OGReqTRLogin1::OGReqTRLogin1(const OGReqTRLogin1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqTRLogin1::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqTRLogin1::~OGReqTRLogin1() {
  SharedDtor();
}

void OGReqTRLogin1::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OGReqTRLogin1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqTRLogin1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqTRLogin1_descriptor_;
}

const OGReqTRLogin1& OGReqTRLogin1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqTRLogin1* OGReqTRLogin1::default_instance_ = NULL;

OGReqTRLogin1* OGReqTRLogin1::New() const {
  return new OGReqTRLogin1;
}

void OGReqTRLogin1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqTRLogin1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqTRLogin1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UserId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqTRLogin1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqTRLogin1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqTRLogin1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqTRLogin1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqTRLogin1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqTRLogin1::MergeFrom(const OGReqTRLogin1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqTRLogin1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqTRLogin1::CopyFrom(const OGReqTRLogin1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqTRLogin1::IsInitialized() const {
  
  return true;
}

void OGReqTRLogin1::Swap(OGReqTRLogin1* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqTRLogin1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqTRLogin1_descriptor_;
  metadata.reflection = OGReqTRLogin1_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLinkServer_E_ErrorType_descriptor_;
}
bool OGAckLinkServer_E_ErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckLinkServer_E_ErrorType OGAckLinkServer::ET_UNKNOWN;
const OGAckLinkServer_E_ErrorType OGAckLinkServer::ET_TYPE1;
const OGAckLinkServer_E_ErrorType OGAckLinkServer::E_ErrorType_MIN;
const OGAckLinkServer_E_ErrorType OGAckLinkServer::E_ErrorType_MAX;
const int OGAckLinkServer::E_ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OGAckLinkServer_E_TRResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLinkServer_E_TRResult_descriptor_;
}
bool OGAckLinkServer_E_TRResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckLinkServer_E_TRResult OGAckLinkServer::ET_SUCCESS;
const OGAckLinkServer_E_TRResult OGAckLinkServer::ET_FAILED;
const OGAckLinkServer_E_TRResult OGAckLinkServer::E_TRResult_MIN;
const OGAckLinkServer_E_TRResult OGAckLinkServer::E_TRResult_MAX;
const int OGAckLinkServer::E_TRResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckLinkServer::kResultFieldNumber;
const int OGAckLinkServer::kReasonFieldNumber;
const int OGAckLinkServer::kLinkIpFieldNumber;
const int OGAckLinkServer::kLinkPortFieldNumber;
#endif  // !_MSC_VER

OGAckLinkServer::OGAckLinkServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLinkServer::InitAsDefaultInstance() {
}

OGAckLinkServer::OGAckLinkServer(const OGAckLinkServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLinkServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  reason_ = 0;
  linkip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linkport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLinkServer::~OGAckLinkServer() {
  SharedDtor();
}

void OGAckLinkServer::SharedDtor() {
  if (linkip_ != &::google::protobuf::internal::kEmptyString) {
    delete linkip_;
  }
  if (this != default_instance_) {
  }
}

void OGAckLinkServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLinkServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLinkServer_descriptor_;
}

const OGAckLinkServer& OGAckLinkServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLinkServer* OGAckLinkServer::default_instance_ = NULL;

OGAckLinkServer* OGAckLinkServer::New() const {
  return new OGAckLinkServer;
}

void OGAckLinkServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    reason_ = 0;
    if (has_linkip()) {
      if (linkip_ != &::google::protobuf::internal::kEmptyString) {
        linkip_->clear();
      }
    }
    linkport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLinkServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult_IsValid(value)) {
            set_result(static_cast< ::com::ourgame::texasSlots::OGAckLinkServer_E_TRResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType_IsValid(value)) {
            set_reason(static_cast< ::com::ourgame::texasSlots::OGAckLinkServer_E_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LinkIp;
        break;
      }
      
      // optional string LinkIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LinkIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->linkip().data(), this->linkip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LinkPort;
        break;
      }
      
      // optional int32 LinkPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LinkPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linkport_)));
          set_has_linkport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckLinkServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }
  
  // optional string LinkIp = 3;
  if (has_linkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkip().data(), this->linkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->linkip(), output);
  }
  
  // optional int32 LinkPort = 4;
  if (has_linkport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->linkport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLinkServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  // optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }
  
  // optional string LinkIp = 3;
  if (has_linkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkip().data(), this->linkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->linkip(), target);
  }
  
  // optional int32 LinkPort = 4;
  if (has_linkport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->linkport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLinkServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ourgame.texasSlots.OGAckLinkServer.E_TRResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // optional .com.ourgame.texasSlots.OGAckLinkServer.E_ErrorType Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
    // optional string LinkIp = 3;
    if (has_linkip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkip());
    }
    
    // optional int32 LinkPort = 4;
    if (has_linkport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linkport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLinkServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLinkServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLinkServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLinkServer::MergeFrom(const OGAckLinkServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_linkip()) {
      set_linkip(from.linkip());
    }
    if (from.has_linkport()) {
      set_linkport(from.linkport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLinkServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLinkServer::CopyFrom(const OGAckLinkServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLinkServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckLinkServer::Swap(OGAckLinkServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reason_, other->reason_);
    std::swap(linkip_, other->linkip_);
    std::swap(linkport_, other->linkport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLinkServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLinkServer_descriptor_;
  metadata.reflection = OGAckLinkServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqTRLogin2::kUserIdFieldNumber;
const int OGReqTRLogin2::kCertFieldNumber;
const int OGReqTRLogin2::kGameIdFieldNumber;
const int OGReqTRLogin2::kComfromIdFieldNumber;
const int OGReqTRLogin2::kUserNameFieldNumber;
const int OGReqTRLogin2::kNickNameFieldNumber;
const int OGReqTRLogin2::kEntranceFieldNumber;
const int OGReqTRLogin2::kComeFieldNumber;
#endif  // !_MSC_VER

OGReqTRLogin2::OGReqTRLogin2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqTRLogin2::InitAsDefaultInstance() {
}

OGReqTRLogin2::OGReqTRLogin2(const OGReqTRLogin2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqTRLogin2::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  comfromid_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  come_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqTRLogin2::~OGReqTRLogin2() {
  SharedDtor();
}

void OGReqTRLogin2::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (entrance_ != &::google::protobuf::internal::kEmptyString) {
    delete entrance_;
  }
  if (come_ != &::google::protobuf::internal::kEmptyString) {
    delete come_;
  }
  if (this != default_instance_) {
  }
}

void OGReqTRLogin2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqTRLogin2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqTRLogin2_descriptor_;
}

const OGReqTRLogin2& OGReqTRLogin2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqTRLogin2* OGReqTRLogin2::default_instance_ = NULL;

OGReqTRLogin2* OGReqTRLogin2::New() const {
  return new OGReqTRLogin2;
}

void OGReqTRLogin2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    gameid_ = 0;
    comfromid_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_entrance()) {
      if (entrance_ != &::google::protobuf::internal::kEmptyString) {
        entrance_->clear();
      }
    }
    if (has_come()) {
      if (come_ != &::google::protobuf::internal::kEmptyString) {
        come_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqTRLogin2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Cert;
        break;
      }
      
      // optional string Cert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cert().data(), this->cert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_comfromId;
        break;
      }
      
      // optional int32 comfromId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comfromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comfromid_)));
          set_has_comfromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }
      
      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }
      
      // optional string nickName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entrance;
        break;
      }
      
      // optional string entrance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrance().data(), this->entrance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_come;
        break;
      }
      
      // optional string come = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_come:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_come()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->come().data(), this->come().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqTRLogin2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UserId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string Cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cert(), output);
  }
  
  // optional int32 gameId = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }
  
  // optional int32 comfromId = 4;
  if (has_comfromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->comfromid(), output);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nickname(), output);
  }
  
  // optional string entrance = 7;
  if (has_entrance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrance().data(), this->entrance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->entrance(), output);
  }
  
  // optional string come = 8;
  if (has_come()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->come().data(), this->come().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->come(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqTRLogin2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string Cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cert(), target);
  }
  
  // optional int32 gameId = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }
  
  // optional int32 comfromId = 4;
  if (has_comfromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->comfromid(), target);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }
  
  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }
  
  // optional string entrance = 7;
  if (has_entrance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrance().data(), this->entrance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->entrance(), target);
  }
  
  // optional string come = 8;
  if (has_come()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->come().data(), this->come().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->come(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqTRLogin2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string Cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cert());
    }
    
    // optional int32 gameId = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 comfromId = 4;
    if (has_comfromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comfromid());
    }
    
    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional string entrance = 7;
    if (has_entrance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrance());
    }
    
    // optional string come = 8;
    if (has_come()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->come());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqTRLogin2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqTRLogin2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqTRLogin2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqTRLogin2::MergeFrom(const OGReqTRLogin2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_comfromid()) {
      set_comfromid(from.comfromid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_entrance()) {
      set_entrance(from.entrance());
    }
    if (from.has_come()) {
      set_come(from.come());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqTRLogin2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqTRLogin2::CopyFrom(const OGReqTRLogin2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqTRLogin2::IsInitialized() const {
  
  return true;
}

void OGReqTRLogin2::Swap(OGReqTRLogin2* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(cert_, other->cert_);
    std::swap(gameid_, other->gameid_);
    std::swap(comfromid_, other->comfromid_);
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(entrance_, other->entrance_);
    std::swap(come_, other->come_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqTRLogin2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqTRLogin2_descriptor_;
  metadata.reflection = OGReqTRLogin2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoleLoginMsg_E_ErrorType_descriptor_;
}
bool OGAckRoleLoginMsg_E_ErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_UNKNOWN;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE1;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE2;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE3;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE4;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE5;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE6;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE7;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::ET_TYPE8;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::E_ErrorType_MIN;
const OGAckRoleLoginMsg_E_ErrorType OGAckRoleLoginMsg::E_ErrorType_MAX;
const int OGAckRoleLoginMsg::E_ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OGAckRoleLoginMsg_E_TRResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoleLoginMsg_E_TRResult_descriptor_;
}
bool OGAckRoleLoginMsg_E_TRResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg::ET_SUCCESS;
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg::ET_FAILED;
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg::E_TRResult_MIN;
const OGAckRoleLoginMsg_E_TRResult OGAckRoleLoginMsg::E_TRResult_MAX;
const int OGAckRoleLoginMsg::E_TRResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckRoleLoginMsg::kResultFieldNumber;
const int OGAckRoleLoginMsg::kReasonFieldNumber;
const int OGAckRoleLoginMsg::kUserIdFieldNumber;
const int OGAckRoleLoginMsg::kRoleNameFieldNumber;
const int OGAckRoleLoginMsg::kLevelFieldNumber;
const int OGAckRoleLoginMsg::kExpFieldNumber;
const int OGAckRoleLoginMsg::kGoldFieldNumber;
const int OGAckRoleLoginMsg::kReqExpFieldNumber;
const int OGAckRoleLoginMsg::kPicFieldNumber;
const int OGAckRoleLoginMsg::kGridNumFieldNumber;
const int OGAckRoleLoginMsg::kNewHandFieldNumber;
const int OGAckRoleLoginMsg::kMailNumFieldNumber;
const int OGAckRoleLoginMsg::kNewHandAwardFieldNumber;
const int OGAckRoleLoginMsg::kPetFightAwardFieldNumber;
const int OGAckRoleLoginMsg::kFreeNumFieldNumber;
const int OGAckRoleLoginMsg::kLoginnumFieldNumber;
const int OGAckRoleLoginMsg::kLoginawardnumFieldNumber;
const int OGAckRoleLoginMsg::kComeFromIdFieldNumber;
const int OGAckRoleLoginMsg::kTopRankTipFieldNumber;
const int OGAckRoleLoginMsg::kDoubleUseFieldNumber;
const int OGAckRoleLoginMsg::kFeedFieldNumber;
const int OGAckRoleLoginMsg::kFondleFieldNumber;
const int OGAckRoleLoginMsg::kFourTimesOnFieldNumber;
const int OGAckRoleLoginMsg::kNewGoldFieldNumber;
const int OGAckRoleLoginMsg::kContentFieldNumber;
#endif  // !_MSC_VER

OGAckRoleLoginMsg::OGAckRoleLoginMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoleLoginMsg::InitAsDefaultInstance() {
}

OGAckRoleLoginMsg::OGAckRoleLoginMsg(const OGAckRoleLoginMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoleLoginMsg::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  reason_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  exp_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  reqexp_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gridnum_ = 0;
  newhand_ = false;
  mailnum_ = 0;
  newhandaward_ = false;
  petfightaward_ = 0;
  freenum_ = 0;
  loginnum_ = 0;
  loginawardnum_ = 0;
  comefromid_ = 0;
  topranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doubleuse_ = GOOGLE_LONGLONG(0);
  feed_ = 0;
  fondle_ = 0;
  fourtimeson_ = 0;
  newgold_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoleLoginMsg::~OGAckRoleLoginMsg() {
  SharedDtor();
}

void OGAckRoleLoginMsg::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (topranktip_ != &::google::protobuf::internal::kEmptyString) {
    delete topranktip_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRoleLoginMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoleLoginMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoleLoginMsg_descriptor_;
}

const OGAckRoleLoginMsg& OGAckRoleLoginMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoleLoginMsg* OGAckRoleLoginMsg::default_instance_ = NULL;

OGAckRoleLoginMsg* OGAckRoleLoginMsg::New() const {
  return new OGAckRoleLoginMsg;
}

void OGAckRoleLoginMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    reason_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0;
    exp_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    reqexp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    gridnum_ = 0;
    newhand_ = false;
    mailnum_ = 0;
    newhandaward_ = false;
    petfightaward_ = 0;
    freenum_ = 0;
    loginnum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    loginawardnum_ = 0;
    comefromid_ = 0;
    if (has_topranktip()) {
      if (topranktip_ != &::google::protobuf::internal::kEmptyString) {
        topranktip_->clear();
      }
    }
    doubleuse_ = GOOGLE_LONGLONG(0);
    feed_ = 0;
    fondle_ = 0;
    fourtimeson_ = 0;
    newgold_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoleLoginMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult_IsValid(value)) {
            set_result(static_cast< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_TRResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType_IsValid(value)) {
            set_reason(static_cast< ::com::ourgame::texasSlots::OGAckRoleLoginMsg_E_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userId;
        break;
      }
      
      // optional string userId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }
      
      // optional int64 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reqExp;
        break;
      }
      
      // optional int32 reqExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqexp_)));
          set_has_reqexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pic;
        break;
      }
      
      // optional string pic = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gridNum;
        break;
      }
      
      // optional int32 gridNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridnum_)));
          set_has_gridnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_newHand;
        break;
      }
      
      // optional bool newHand = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newhand_)));
          set_has_newhand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mailNum;
        break;
      }
      
      // optional int32 mailNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailnum_)));
          set_has_mailnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_newHandAward;
        break;
      }
      
      // optional bool newHandAward = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newHandAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newhandaward_)));
          set_has_newhandaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_petFightAward;
        break;
      }
      
      // optional int32 petFightAward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petFightAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petfightaward_)));
          set_has_petfightaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_freeNum;
        break;
      }
      
      // optional int32 freeNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_loginnum;
        break;
      }
      
      // optional int32 loginnum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginnum_)));
          set_has_loginnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_loginawardnum;
        break;
      }
      
      // optional int32 loginawardnum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginawardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginawardnum_)));
          set_has_loginawardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_comeFromId;
        break;
      }
      
      // optional int32 comeFromId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comeFromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comefromid_)));
          set_has_comefromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_topRankTip;
        break;
      }
      
      // optional string topRankTip = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topranktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topranktip().data(), this->topranktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_doubleUse;
        break;
      }
      
      // optional int64 doubleUse = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doubleuse_)));
          set_has_doubleuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_feed;
        break;
      }
      
      // optional int32 feed = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_)));
          set_has_feed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fondle;
        break;
      }
      
      // optional int32 fondle = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fondle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fondle_)));
          set_has_fondle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fourTimesOn;
        break;
      }
      
      // optional int32 fourTimesOn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fourTimesOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fourtimeson_)));
          set_has_fourtimeson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_newGold;
        break;
      }
      
      // optional int64 newGold = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newgold_)));
          set_has_newgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_content;
        break;
      }
      
      // optional string content = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoleLoginMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }
  
  // optional string userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // optional string roleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rolename(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }
  
  // optional int64 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }
  
  // optional int32 reqExp = 8;
  if (has_reqexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reqexp(), output);
  }
  
  // optional string pic = 9;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->pic(), output);
  }
  
  // optional int32 gridNum = 10;
  if (has_gridnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gridnum(), output);
  }
  
  // optional bool newHand = 11;
  if (has_newhand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->newhand(), output);
  }
  
  // optional int32 mailNum = 12;
  if (has_mailnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mailnum(), output);
  }
  
  // optional bool newHandAward = 13;
  if (has_newhandaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->newhandaward(), output);
  }
  
  // optional int32 petFightAward = 14;
  if (has_petfightaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->petfightaward(), output);
  }
  
  // optional int32 freeNum = 15;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->freenum(), output);
  }
  
  // optional int32 loginnum = 16;
  if (has_loginnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->loginnum(), output);
  }
  
  // optional int32 loginawardnum = 17;
  if (has_loginawardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->loginawardnum(), output);
  }
  
  // optional int32 comeFromId = 18;
  if (has_comefromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->comefromid(), output);
  }
  
  // optional string topRankTip = 19;
  if (has_topranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topranktip().data(), this->topranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->topranktip(), output);
  }
  
  // optional int64 doubleUse = 20;
  if (has_doubleuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->doubleuse(), output);
  }
  
  // optional int32 feed = 21;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->feed(), output);
  }
  
  // optional int32 fondle = 22;
  if (has_fondle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->fondle(), output);
  }
  
  // optional int32 fourTimesOn = 23;
  if (has_fourtimeson()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->fourtimeson(), output);
  }
  
  // optional int64 newGold = 24;
  if (has_newgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->newgold(), output);
  }
  
  // optional string content = 25;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoleLoginMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  // optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }
  
  // optional string userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // optional string roleName = 4;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rolename(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }
  
  // optional int64 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }
  
  // optional int32 reqExp = 8;
  if (has_reqexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reqexp(), target);
  }
  
  // optional string pic = 9;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pic(), target);
  }
  
  // optional int32 gridNum = 10;
  if (has_gridnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gridnum(), target);
  }
  
  // optional bool newHand = 11;
  if (has_newhand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->newhand(), target);
  }
  
  // optional int32 mailNum = 12;
  if (has_mailnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mailnum(), target);
  }
  
  // optional bool newHandAward = 13;
  if (has_newhandaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->newhandaward(), target);
  }
  
  // optional int32 petFightAward = 14;
  if (has_petfightaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->petfightaward(), target);
  }
  
  // optional int32 freeNum = 15;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->freenum(), target);
  }
  
  // optional int32 loginnum = 16;
  if (has_loginnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->loginnum(), target);
  }
  
  // optional int32 loginawardnum = 17;
  if (has_loginawardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->loginawardnum(), target);
  }
  
  // optional int32 comeFromId = 18;
  if (has_comefromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->comefromid(), target);
  }
  
  // optional string topRankTip = 19;
  if (has_topranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topranktip().data(), this->topranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->topranktip(), target);
  }
  
  // optional int64 doubleUse = 20;
  if (has_doubleuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->doubleuse(), target);
  }
  
  // optional int32 feed = 21;
  if (has_feed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->feed(), target);
  }
  
  // optional int32 fondle = 22;
  if (has_fondle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->fondle(), target);
  }
  
  // optional int32 fourTimesOn = 23;
  if (has_fourtimeson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->fourtimeson(), target);
  }
  
  // optional int64 newGold = 24;
  if (has_newgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->newgold(), target);
  }
  
  // optional string content = 25;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoleLoginMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_TRResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // optional .com.ourgame.texasSlots.OGAckRoleLoginMsg.E_ErrorType Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
    // optional string userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string roleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional int32 reqExp = 8;
    if (has_reqexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqexp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pic = 9;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 gridNum = 10;
    if (has_gridnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridnum());
    }
    
    // optional bool newHand = 11;
    if (has_newhand()) {
      total_size += 1 + 1;
    }
    
    // optional int32 mailNum = 12;
    if (has_mailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailnum());
    }
    
    // optional bool newHandAward = 13;
    if (has_newhandaward()) {
      total_size += 1 + 1;
    }
    
    // optional int32 petFightAward = 14;
    if (has_petfightaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petfightaward());
    }
    
    // optional int32 freeNum = 15;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }
    
    // optional int32 loginnum = 16;
    if (has_loginnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginnum());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 loginawardnum = 17;
    if (has_loginawardnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginawardnum());
    }
    
    // optional int32 comeFromId = 18;
    if (has_comefromid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comefromid());
    }
    
    // optional string topRankTip = 19;
    if (has_topranktip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topranktip());
    }
    
    // optional int64 doubleUse = 20;
    if (has_doubleuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->doubleuse());
    }
    
    // optional int32 feed = 21;
    if (has_feed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed());
    }
    
    // optional int32 fondle = 22;
    if (has_fondle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fondle());
    }
    
    // optional int32 fourTimesOn = 23;
    if (has_fourtimeson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fourtimeson());
    }
    
    // optional int64 newGold = 24;
    if (has_newgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newgold());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string content = 25;
    if (has_content()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoleLoginMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoleLoginMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoleLoginMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoleLoginMsg::MergeFrom(const OGAckRoleLoginMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_reqexp()) {
      set_reqexp(from.reqexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_gridnum()) {
      set_gridnum(from.gridnum());
    }
    if (from.has_newhand()) {
      set_newhand(from.newhand());
    }
    if (from.has_mailnum()) {
      set_mailnum(from.mailnum());
    }
    if (from.has_newhandaward()) {
      set_newhandaward(from.newhandaward());
    }
    if (from.has_petfightaward()) {
      set_petfightaward(from.petfightaward());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
    if (from.has_loginnum()) {
      set_loginnum(from.loginnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_loginawardnum()) {
      set_loginawardnum(from.loginawardnum());
    }
    if (from.has_comefromid()) {
      set_comefromid(from.comefromid());
    }
    if (from.has_topranktip()) {
      set_topranktip(from.topranktip());
    }
    if (from.has_doubleuse()) {
      set_doubleuse(from.doubleuse());
    }
    if (from.has_feed()) {
      set_feed(from.feed());
    }
    if (from.has_fondle()) {
      set_fondle(from.fondle());
    }
    if (from.has_fourtimeson()) {
      set_fourtimeson(from.fourtimeson());
    }
    if (from.has_newgold()) {
      set_newgold(from.newgold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoleLoginMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoleLoginMsg::CopyFrom(const OGAckRoleLoginMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoleLoginMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckRoleLoginMsg::Swap(OGAckRoleLoginMsg* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reason_, other->reason_);
    std::swap(userid_, other->userid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(reqexp_, other->reqexp_);
    std::swap(pic_, other->pic_);
    std::swap(gridnum_, other->gridnum_);
    std::swap(newhand_, other->newhand_);
    std::swap(mailnum_, other->mailnum_);
    std::swap(newhandaward_, other->newhandaward_);
    std::swap(petfightaward_, other->petfightaward_);
    std::swap(freenum_, other->freenum_);
    std::swap(loginnum_, other->loginnum_);
    std::swap(loginawardnum_, other->loginawardnum_);
    std::swap(comefromid_, other->comefromid_);
    std::swap(topranktip_, other->topranktip_);
    std::swap(doubleuse_, other->doubleuse_);
    std::swap(feed_, other->feed_);
    std::swap(fondle_, other->fondle_);
    std::swap(fourtimeson_, other->fourtimeson_);
    std::swap(newgold_, other->newgold_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoleLoginMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoleLoginMsg_descriptor_;
  metadata.reflection = OGAckRoleLoginMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRoleMsg::kLevelFieldNumber;
const int OGAckRoleMsg::kExpFieldNumber;
const int OGAckRoleMsg::kGoldFieldNumber;
const int OGAckRoleMsg::kReqExpFieldNumber;
const int OGAckRoleMsg::kGridNumFieldNumber;
const int OGAckRoleMsg::kFreeNumFieldNumber;
const int OGAckRoleMsg::kLoginawardnumFieldNumber;
const int OGAckRoleMsg::kFeedFieldNumber;
const int OGAckRoleMsg::kFondleFieldNumber;
const int OGAckRoleMsg::kNewGoldFieldNumber;
#endif  // !_MSC_VER

OGAckRoleMsg::OGAckRoleMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoleMsg::InitAsDefaultInstance() {
}

OGAckRoleMsg::OGAckRoleMsg(const OGAckRoleMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoleMsg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  reqexp_ = 0;
  gridnum_ = 0;
  freenum_ = 0;
  loginawardnum_ = 0;
  feed_ = 0;
  fondle_ = 0;
  newgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoleMsg::~OGAckRoleMsg() {
  SharedDtor();
}

void OGAckRoleMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRoleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoleMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoleMsg_descriptor_;
}

const OGAckRoleMsg& OGAckRoleMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoleMsg* OGAckRoleMsg::default_instance_ = NULL;

OGAckRoleMsg* OGAckRoleMsg::New() const {
  return new OGAckRoleMsg;
}

void OGAckRoleMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    reqexp_ = 0;
    gridnum_ = 0;
    freenum_ = 0;
    loginawardnum_ = 0;
    feed_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fondle_ = 0;
    newgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }
      
      // optional int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqExp;
        break;
      }
      
      // optional int32 reqExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqexp_)));
          set_has_reqexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gridNum;
        break;
      }
      
      // optional int32 gridNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridnum_)));
          set_has_gridnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freeNum;
        break;
      }
      
      // optional int32 freeNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loginawardnum;
        break;
      }
      
      // optional int32 loginawardnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginawardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginawardnum_)));
          set_has_loginawardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feed;
        break;
      }
      
      // optional int32 feed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_)));
          set_has_feed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fondle;
        break;
      }
      
      // optional int32 fondle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fondle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fondle_)));
          set_has_fondle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_newGold;
        break;
      }
      
      // optional int64 newGold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newgold_)));
          set_has_newgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }
  
  // optional int32 reqExp = 4;
  if (has_reqexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reqexp(), output);
  }
  
  // optional int32 gridNum = 5;
  if (has_gridnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gridnum(), output);
  }
  
  // optional int32 freeNum = 6;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freenum(), output);
  }
  
  // optional int32 loginawardnum = 7;
  if (has_loginawardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loginawardnum(), output);
  }
  
  // optional int32 feed = 8;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->feed(), output);
  }
  
  // optional int32 fondle = 9;
  if (has_fondle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fondle(), output);
  }
  
  // optional int64 newGold = 10;
  if (has_newgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->newgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoleMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }
  
  // optional int32 reqExp = 4;
  if (has_reqexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reqexp(), target);
  }
  
  // optional int32 gridNum = 5;
  if (has_gridnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gridnum(), target);
  }
  
  // optional int32 freeNum = 6;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->freenum(), target);
  }
  
  // optional int32 loginawardnum = 7;
  if (has_loginawardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loginawardnum(), target);
  }
  
  // optional int32 feed = 8;
  if (has_feed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->feed(), target);
  }
  
  // optional int32 fondle = 9;
  if (has_fondle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fondle(), target);
  }
  
  // optional int64 newGold = 10;
  if (has_newgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->newgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoleMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional int32 reqExp = 4;
    if (has_reqexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqexp());
    }
    
    // optional int32 gridNum = 5;
    if (has_gridnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridnum());
    }
    
    // optional int32 freeNum = 6;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }
    
    // optional int32 loginawardnum = 7;
    if (has_loginawardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginawardnum());
    }
    
    // optional int32 feed = 8;
    if (has_feed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fondle = 9;
    if (has_fondle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fondle());
    }
    
    // optional int64 newGold = 10;
    if (has_newgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newgold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoleMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoleMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoleMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoleMsg::MergeFrom(const OGAckRoleMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_reqexp()) {
      set_reqexp(from.reqexp());
    }
    if (from.has_gridnum()) {
      set_gridnum(from.gridnum());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
    if (from.has_loginawardnum()) {
      set_loginawardnum(from.loginawardnum());
    }
    if (from.has_feed()) {
      set_feed(from.feed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fondle()) {
      set_fondle(from.fondle());
    }
    if (from.has_newgold()) {
      set_newgold(from.newgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoleMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoleMsg::CopyFrom(const OGAckRoleMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoleMsg::IsInitialized() const {
  
  return true;
}

void OGAckRoleMsg::Swap(OGAckRoleMsg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(reqexp_, other->reqexp_);
    std::swap(gridnum_, other->gridnum_);
    std::swap(freenum_, other->freenum_);
    std::swap(loginawardnum_, other->loginawardnum_);
    std::swap(feed_, other->feed_);
    std::swap(fondle_, other->fondle_);
    std::swap(newgold_, other->newgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoleMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoleMsg_descriptor_;
  metadata.reflection = OGAckRoleMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetUpdatedMsg::kPetIdFieldNumber;
const int OGAckPetUpdatedMsg::kBloodPlusFieldNumber;
const int OGAckPetUpdatedMsg::kAttackPlusFieldNumber;
const int OGAckPetUpdatedMsg::kAwardPlusFieldNumber;
const int OGAckPetUpdatedMsg::kLevelFieldNumber;
const int OGAckPetUpdatedMsg::kExpFieldNumber;
const int OGAckPetUpdatedMsg::kReqexpFieldNumber;
const int OGAckPetUpdatedMsg::kFlgFieldNumber;
#endif  // !_MSC_VER

OGAckPetUpdatedMsg::OGAckPetUpdatedMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetUpdatedMsg::InitAsDefaultInstance() {
}

OGAckPetUpdatedMsg::OGAckPetUpdatedMsg(const OGAckPetUpdatedMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetUpdatedMsg::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  bloodplus_ = 0;
  attackplus_ = 0;
  awardplus_ = 0;
  level_ = 0;
  exp_ = 0;
  reqexp_ = 0;
  flg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetUpdatedMsg::~OGAckPetUpdatedMsg() {
  SharedDtor();
}

void OGAckPetUpdatedMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetUpdatedMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetUpdatedMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetUpdatedMsg_descriptor_;
}

const OGAckPetUpdatedMsg& OGAckPetUpdatedMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetUpdatedMsg* OGAckPetUpdatedMsg::default_instance_ = NULL;

OGAckPetUpdatedMsg* OGAckPetUpdatedMsg::New() const {
  return new OGAckPetUpdatedMsg;
}

void OGAckPetUpdatedMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    bloodplus_ = 0;
    attackplus_ = 0;
    awardplus_ = 0;
    level_ = 0;
    exp_ = 0;
    reqexp_ = 0;
    flg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetUpdatedMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bloodPlus;
        break;
      }
      
      // optional int32 bloodPlus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodplus_)));
          set_has_bloodplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackPlus;
        break;
      }
      
      // optional int32 attackPlus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackplus_)));
          set_has_attackplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awardPlus;
        break;
      }
      
      // optional int32 awardPlus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardplus_)));
          set_has_awardplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reqexp;
        break;
      }
      
      // optional int32 reqexp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqexp_)));
          set_has_reqexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetUpdatedMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }
  
  // optional int32 bloodPlus = 2;
  if (has_bloodplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bloodplus(), output);
  }
  
  // optional int32 attackPlus = 3;
  if (has_attackplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attackplus(), output);
  }
  
  // optional int32 awardPlus = 4;
  if (has_awardplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardplus(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }
  
  // optional int32 reqexp = 7;
  if (has_reqexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reqexp(), output);
  }
  
  // optional int32 flg = 8;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetUpdatedMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }
  
  // optional int32 bloodPlus = 2;
  if (has_bloodplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bloodplus(), target);
  }
  
  // optional int32 attackPlus = 3;
  if (has_attackplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attackplus(), target);
  }
  
  // optional int32 awardPlus = 4;
  if (has_awardplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awardplus(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }
  
  // optional int32 reqexp = 7;
  if (has_reqexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reqexp(), target);
  }
  
  // optional int32 flg = 8;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetUpdatedMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petId = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
    // optional int32 bloodPlus = 2;
    if (has_bloodplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodplus());
    }
    
    // optional int32 attackPlus = 3;
    if (has_attackplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackplus());
    }
    
    // optional int32 awardPlus = 4;
    if (has_awardplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardplus());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 reqexp = 7;
    if (has_reqexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqexp());
    }
    
    // optional int32 flg = 8;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetUpdatedMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetUpdatedMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetUpdatedMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetUpdatedMsg::MergeFrom(const OGAckPetUpdatedMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_bloodplus()) {
      set_bloodplus(from.bloodplus());
    }
    if (from.has_attackplus()) {
      set_attackplus(from.attackplus());
    }
    if (from.has_awardplus()) {
      set_awardplus(from.awardplus());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_reqexp()) {
      set_reqexp(from.reqexp());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetUpdatedMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetUpdatedMsg::CopyFrom(const OGAckPetUpdatedMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetUpdatedMsg::IsInitialized() const {
  
  return true;
}

void OGAckPetUpdatedMsg::Swap(OGAckPetUpdatedMsg* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(bloodplus_, other->bloodplus_);
    std::swap(attackplus_, other->attackplus_);
    std::swap(awardplus_, other->awardplus_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(reqexp_, other->reqexp_);
    std::swap(flg_, other->flg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetUpdatedMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetUpdatedMsg_descriptor_;
  metadata.reflection = OGAckPetUpdatedMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckGameServer::kClientPortFieldNumber;
const int OGAckGameServer::kLinkIpFieldNumber;
const int OGAckGameServer::kLinkPortFieldNumber;
const int OGAckGameServer::kGameIdFieldNumber;
#endif  // !_MSC_VER

OGAckGameServer::OGAckGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckGameServer::InitAsDefaultInstance() {
}

OGAckGameServer::OGAckGameServer(const OGAckGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckGameServer::SharedCtor() {
  _cached_size_ = 0;
  client_port_ = 0;
  linkip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linkport_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckGameServer::~OGAckGameServer() {
  SharedDtor();
}

void OGAckGameServer::SharedDtor() {
  if (linkip_ != &::google::protobuf::internal::kEmptyString) {
    delete linkip_;
  }
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void OGAckGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckGameServer_descriptor_;
}

const OGAckGameServer& OGAckGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckGameServer* OGAckGameServer::default_instance_ = NULL;

OGAckGameServer* OGAckGameServer::New() const {
  return new OGAckGameServer;
}

void OGAckGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_port_ = 0;
    if (has_linkip()) {
      if (linkip_ != &::google::protobuf::internal::kEmptyString) {
        linkip_->clear();
      }
    }
    linkport_ = 0;
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_port_)));
          set_has_client_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LinkIp;
        break;
      }
      
      // optional string LinkIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LinkIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->linkip().data(), this->linkip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LinkPort;
        break;
      }
      
      // optional int32 LinkPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LinkPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linkport_)));
          set_has_linkport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameId;
        break;
      }
      
      // optional string gameId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_port = 1;
  if (has_client_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_port(), output);
  }
  
  // optional string LinkIp = 2;
  if (has_linkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkip().data(), this->linkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->linkip(), output);
  }
  
  // optional int32 LinkPort = 3;
  if (has_linkport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->linkport(), output);
  }
  
  // optional string gameId = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_port = 1;
  if (has_client_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_port(), target);
  }
  
  // optional string LinkIp = 2;
  if (has_linkip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkip().data(), this->linkip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->linkip(), target);
  }
  
  // optional int32 LinkPort = 3;
  if (has_linkport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->linkport(), target);
  }
  
  // optional string gameId = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckGameServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_port = 1;
    if (has_client_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_port());
    }
    
    // optional string LinkIp = 2;
    if (has_linkip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkip());
    }
    
    // optional int32 LinkPort = 3;
    if (has_linkport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linkport());
    }
    
    // optional string gameId = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckGameServer::MergeFrom(const OGAckGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_port()) {
      set_client_port(from.client_port());
    }
    if (from.has_linkip()) {
      set_linkip(from.linkip());
    }
    if (from.has_linkport()) {
      set_linkport(from.linkport());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckGameServer::CopyFrom(const OGAckGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckGameServer::IsInitialized() const {
  
  return true;
}

void OGAckGameServer::Swap(OGAckGameServer* other) {
  if (other != this) {
    std::swap(client_port_, other->client_port_);
    std::swap(linkip_, other->linkip_);
    std::swap(linkport_, other->linkport_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckGameServer_descriptor_;
  metadata.reflection = OGAckGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRoomList_Room::kRoomIdFieldNumber;
const int OGAckRoomList_Room::kRoomNameFieldNumber;
const int OGAckRoomList_Room::kRoomLevelFieldNumber;
const int OGAckRoomList_Room::kRoomGoldFieldNumber;
const int OGAckRoomList_Room::kRoomTipFieldNumber;
const int OGAckRoomList_Room::kRoomOnFieldNumber;
#endif  // !_MSC_VER

OGAckRoomList_Room::OGAckRoomList_Room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoomList_Room::InitAsDefaultInstance() {
}

OGAckRoomList_Room::OGAckRoomList_Room(const OGAckRoomList_Room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoomList_Room::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomlevel_ = 0;
  roomgold_ = GOOGLE_LONGLONG(0);
  roomtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoomList_Room::~OGAckRoomList_Room() {
  SharedDtor();
}

void OGAckRoomList_Room::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomtip_ != &::google::protobuf::internal::kEmptyString) {
    delete roomtip_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRoomList_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoomList_Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoomList_Room_descriptor_;
}

const OGAckRoomList_Room& OGAckRoomList_Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoomList_Room* OGAckRoomList_Room::default_instance_ = NULL;

OGAckRoomList_Room* OGAckRoomList_Room::New() const {
  return new OGAckRoomList_Room;
}

void OGAckRoomList_Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    roomlevel_ = 0;
    roomgold_ = GOOGLE_LONGLONG(0);
    if (has_roomtip()) {
      if (roomtip_ != &::google::protobuf::internal::kEmptyString) {
        roomtip_->clear();
      }
    }
    roomon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoomList_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }
      
      // optional string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomLevel;
        break;
      }
      
      // optional int32 roomLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomlevel_)));
          set_has_roomlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomGold;
        break;
      }
      
      // optional int64 roomGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomgold_)));
          set_has_roomgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomTip;
        break;
      }
      
      // optional string roomTip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomtip().data(), this->roomtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomOn;
        break;
      }
      
      // optional int32 roomOn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomon_)));
          set_has_roomon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoomList_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }
  
  // optional int32 roomLevel = 3;
  if (has_roomlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomlevel(), output);
  }
  
  // optional int64 roomGold = 4;
  if (has_roomgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roomgold(), output);
  }
  
  // optional string roomTip = 5;
  if (has_roomtip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtip().data(), this->roomtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomtip(), output);
  }
  
  // optional int32 roomOn = 6;
  if (has_roomon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoomList_Room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }
  
  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }
  
  // optional int32 roomLevel = 3;
  if (has_roomlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomlevel(), target);
  }
  
  // optional int64 roomGold = 4;
  if (has_roomgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roomgold(), target);
  }
  
  // optional string roomTip = 5;
  if (has_roomtip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtip().data(), this->roomtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomtip(), target);
  }
  
  // optional int32 roomOn = 6;
  if (has_roomon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoomList_Room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }
    
    // optional int32 roomLevel = 3;
    if (has_roomlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomlevel());
    }
    
    // optional int64 roomGold = 4;
    if (has_roomgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roomgold());
    }
    
    // optional string roomTip = 5;
    if (has_roomtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtip());
    }
    
    // optional int32 roomOn = 6;
    if (has_roomon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoomList_Room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoomList_Room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoomList_Room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoomList_Room::MergeFrom(const OGAckRoomList_Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomlevel()) {
      set_roomlevel(from.roomlevel());
    }
    if (from.has_roomgold()) {
      set_roomgold(from.roomgold());
    }
    if (from.has_roomtip()) {
      set_roomtip(from.roomtip());
    }
    if (from.has_roomon()) {
      set_roomon(from.roomon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoomList_Room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoomList_Room::CopyFrom(const OGAckRoomList_Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoomList_Room::IsInitialized() const {
  
  return true;
}

void OGAckRoomList_Room::Swap(OGAckRoomList_Room* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomlevel_, other->roomlevel_);
    std::swap(roomgold_, other->roomgold_);
    std::swap(roomtip_, other->roomtip_);
    std::swap(roomon_, other->roomon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoomList_Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoomList_Room_descriptor_;
  metadata.reflection = OGAckRoomList_Room_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckRoomList::kRoomListFieldNumber;
#endif  // !_MSC_VER

OGAckRoomList::OGAckRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoomList::InitAsDefaultInstance() {
}

OGAckRoomList::OGAckRoomList(const OGAckRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoomList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoomList::~OGAckRoomList() {
  SharedDtor();
}

void OGAckRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoomList_descriptor_;
}

const OGAckRoomList& OGAckRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoomList* OGAckRoomList::default_instance_ = NULL;

OGAckRoomList* OGAckRoomList::New() const {
  return new OGAckRoomList;
}

void OGAckRoomList::Clear() {
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
  for (int i = 0; i < this->roomlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoomList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckRoomList.Room roomList = 1;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoomList::MergeFrom(const OGAckRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoomList::CopyFrom(const OGAckRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoomList::IsInitialized() const {
  
  return true;
}

void OGAckRoomList::Swap(OGAckRoomList* other) {
  if (other != this) {
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoomList_descriptor_;
  metadata.reflection = OGAckRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqJoinRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

OGReqJoinRoom::OGReqJoinRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqJoinRoom::InitAsDefaultInstance() {
}

OGReqJoinRoom::OGReqJoinRoom(const OGReqJoinRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqJoinRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqJoinRoom::~OGReqJoinRoom() {
  SharedDtor();
}

void OGReqJoinRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqJoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqJoinRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqJoinRoom_descriptor_;
}

const OGReqJoinRoom& OGReqJoinRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqJoinRoom* OGReqJoinRoom::default_instance_ = NULL;

OGReqJoinRoom* OGReqJoinRoom::New() const {
  return new OGReqJoinRoom;
}

void OGReqJoinRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqJoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqJoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqJoinRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqJoinRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqJoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqJoinRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqJoinRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqJoinRoom::MergeFrom(const OGReqJoinRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqJoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqJoinRoom::CopyFrom(const OGReqJoinRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqJoinRoom::IsInitialized() const {
  
  return true;
}

void OGReqJoinRoom::Swap(OGReqJoinRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqJoinRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqJoinRoom_descriptor_;
  metadata.reflection = OGReqJoinRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckRoom_E_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoom_E_ErrorType_descriptor_;
}
bool OGAckRoom_E_ErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckRoom_E_ErrorType OGAckRoom::ET_UNKNOWN;
const OGAckRoom_E_ErrorType OGAckRoom::ET_TYPE1;
const OGAckRoom_E_ErrorType OGAckRoom::ET_TYPE2;
const OGAckRoom_E_ErrorType OGAckRoom::ET_TYPE3;
const OGAckRoom_E_ErrorType OGAckRoom::ET_TYPE4;
const OGAckRoom_E_ErrorType OGAckRoom::E_ErrorType_MIN;
const OGAckRoom_E_ErrorType OGAckRoom::E_ErrorType_MAX;
const int OGAckRoom::E_ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OGAckRoom_E_TRResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoom_E_TRResult_descriptor_;
}
bool OGAckRoom_E_TRResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckRoom_E_TRResult OGAckRoom::ET_SUCCESS;
const OGAckRoom_E_TRResult OGAckRoom::ET_FAILED;
const OGAckRoom_E_TRResult OGAckRoom::E_TRResult_MIN;
const OGAckRoom_E_TRResult OGAckRoom::E_TRResult_MAX;
const int OGAckRoom::E_TRResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckRoom_RoomBet::kMinFieldNumber;
const int OGAckRoom_RoomBet::kMaxFieldNumber;
const int OGAckRoom_RoomBet::kBetFieldNumber;
#endif  // !_MSC_VER

OGAckRoom_RoomBet::OGAckRoom_RoomBet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoom_RoomBet::InitAsDefaultInstance() {
}

OGAckRoom_RoomBet::OGAckRoom_RoomBet(const OGAckRoom_RoomBet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoom_RoomBet::SharedCtor() {
  _cached_size_ = 0;
  min_ = GOOGLE_LONGLONG(0);
  max_ = GOOGLE_LONGLONG(0);
  bet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoom_RoomBet::~OGAckRoom_RoomBet() {
  SharedDtor();
}

void OGAckRoom_RoomBet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRoom_RoomBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoom_RoomBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoom_RoomBet_descriptor_;
}

const OGAckRoom_RoomBet& OGAckRoom_RoomBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoom_RoomBet* OGAckRoom_RoomBet::default_instance_ = NULL;

OGAckRoom_RoomBet* OGAckRoom_RoomBet::New() const {
  return new OGAckRoom_RoomBet;
}

void OGAckRoom_RoomBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_ = GOOGLE_LONGLONG(0);
    max_ = GOOGLE_LONGLONG(0);
    bet_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoom_RoomBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }
      
      // optional int64 max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet;
        break;
      }
      
      // optional int32 bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoom_RoomBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min(), output);
  }
  
  // optional int64 max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max(), output);
  }
  
  // optional int32 bet = 3;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoom_RoomBet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min(), target);
  }
  
  // optional int64 max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max(), target);
  }
  
  // optional int32 bet = 3;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoom_RoomBet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }
    
    // optional int64 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }
    
    // optional int32 bet = 3;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoom_RoomBet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoom_RoomBet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoom_RoomBet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoom_RoomBet::MergeFrom(const OGAckRoom_RoomBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoom_RoomBet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoom_RoomBet::CopyFrom(const OGAckRoom_RoomBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoom_RoomBet::IsInitialized() const {
  
  return true;
}

void OGAckRoom_RoomBet::Swap(OGAckRoom_RoomBet* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(bet_, other->bet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoom_RoomBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoom_RoomBet_descriptor_;
  metadata.reflection = OGAckRoom_RoomBet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckRoom::kResultFieldNumber;
const int OGAckRoom::kReasonFieldNumber;
const int OGAckRoom::kRoomIdFieldNumber;
const int OGAckRoom::kRoomNameFieldNumber;
const int OGAckRoom::kRoomMaxLineFieldNumber;
const int OGAckRoom::kRoomMaxTimesFieldNumber;
const int OGAckRoom::kRoomBaseGoldFieldNumber;
const int OGAckRoom::kRoomPicFieldNumber;
const int OGAckRoom::kRoomDoubleOnFieldNumber;
const int OGAckRoom::kFreeOnFieldNumber;
const int OGAckRoom::kFourTimesOnFieldNumber;
const int OGAckRoom::kBetListFieldNumber;
#endif  // !_MSC_VER

OGAckRoom::OGAckRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoom::InitAsDefaultInstance() {
}

OGAckRoom::OGAckRoom(const OGAckRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  reason_ = 0;
  roomid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roommaxline_ = 0;
  roommaxtimes_ = 0;
  roombasegold_ = GOOGLE_LONGLONG(0);
  roompic_ = 0;
  roomdoubleon_ = 0;
  freeon_ = 0;
  fourtimeson_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoom::~OGAckRoom() {
  SharedDtor();
}

void OGAckRoom::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoom_descriptor_;
}

const OGAckRoom& OGAckRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoom* OGAckRoom::default_instance_ = NULL;

OGAckRoom* OGAckRoom::New() const {
  return new OGAckRoom;
}

void OGAckRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    reason_ = 0;
    roomid_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    roommaxline_ = 0;
    roommaxtimes_ = 0;
    roombasegold_ = GOOGLE_LONGLONG(0);
    roompic_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roomdoubleon_ = 0;
    freeon_ = 0;
    fourtimeson_ = 0;
  }
  betlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckRoom_E_TRResult_IsValid(value)) {
            set_result(static_cast< ::com::ourgame::texasSlots::OGAckRoom_E_TRResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckRoom_E_ErrorType_IsValid(value)) {
            set_reason(static_cast< ::com::ourgame::texasSlots::OGAckRoom_E_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomId;
        break;
      }
      
      // optional int32 roomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }
      
      // optional string roomName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomMaxLine;
        break;
      }
      
      // optional int32 roomMaxLine = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomMaxLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommaxline_)));
          set_has_roommaxline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomMaxTimes;
        break;
      }
      
      // optional int32 roomMaxTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomMaxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommaxtimes_)));
          set_has_roommaxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomBaseGold;
        break;
      }
      
      // optional int64 roomBaseGold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomBaseGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roombasegold_)));
          set_has_roombasegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roomPic;
        break;
      }
      
      // optional int32 roomPic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomPic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roompic_)));
          set_has_roompic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_roomDoubleOn;
        break;
      }
      
      // optional int32 roomDoubleOn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomDoubleOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomdoubleon_)));
          set_has_roomdoubleon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_freeOn;
        break;
      }
      
      // optional int32 freeOn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeon_)));
          set_has_freeon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fourTimesOn;
        break;
      }
      
      // optional int32 fourTimesOn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fourTimesOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fourtimeson_)));
          set_has_fourtimeson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_betList;
        break;
      }
      
      // repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_betlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_betList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }
  
  // optional int32 roomId = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }
  
  // optional string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomname(), output);
  }
  
  // optional int32 roomMaxLine = 5;
  if (has_roommaxline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roommaxline(), output);
  }
  
  // optional int32 roomMaxTimes = 6;
  if (has_roommaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roommaxtimes(), output);
  }
  
  // optional int64 roomBaseGold = 7;
  if (has_roombasegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->roombasegold(), output);
  }
  
  // optional int32 roomPic = 8;
  if (has_roompic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roompic(), output);
  }
  
  // optional int32 roomDoubleOn = 9;
  if (has_roomdoubleon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roomdoubleon(), output);
  }
  
  // optional int32 freeOn = 10;
  if (has_freeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->freeon(), output);
  }
  
  // optional int32 fourTimesOn = 11;
  if (has_fourtimeson()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fourtimeson(), output);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
  for (int i = 0; i < this->betlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->betlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  // optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }
  
  // optional int32 roomId = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }
  
  // optional string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }
  
  // optional int32 roomMaxLine = 5;
  if (has_roommaxline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roommaxline(), target);
  }
  
  // optional int32 roomMaxTimes = 6;
  if (has_roommaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roommaxtimes(), target);
  }
  
  // optional int64 roomBaseGold = 7;
  if (has_roombasegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->roombasegold(), target);
  }
  
  // optional int32 roomPic = 8;
  if (has_roompic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roompic(), target);
  }
  
  // optional int32 roomDoubleOn = 9;
  if (has_roomdoubleon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roomdoubleon(), target);
  }
  
  // optional int32 freeOn = 10;
  if (has_freeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->freeon(), target);
  }
  
  // optional int32 fourTimesOn = 11;
  if (has_fourtimeson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fourtimeson(), target);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
  for (int i = 0; i < this->betlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->betlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ourgame.texasSlots.OGAckRoom.E_TRResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // optional .com.ourgame.texasSlots.OGAckRoom.E_ErrorType Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
    // optional int32 roomId = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }
    
    // optional string roomName = 4;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }
    
    // optional int32 roomMaxLine = 5;
    if (has_roommaxline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roommaxline());
    }
    
    // optional int32 roomMaxTimes = 6;
    if (has_roommaxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roommaxtimes());
    }
    
    // optional int64 roomBaseGold = 7;
    if (has_roombasegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roombasegold());
    }
    
    // optional int32 roomPic = 8;
    if (has_roompic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roompic());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 roomDoubleOn = 9;
    if (has_roomdoubleon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomdoubleon());
    }
    
    // optional int32 freeOn = 10;
    if (has_freeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeon());
    }
    
    // optional int32 fourTimesOn = 11;
    if (has_fourtimeson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fourtimeson());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckRoom.RoomBet betList = 12;
  total_size += 1 * this->betlist_size();
  for (int i = 0; i < this->betlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoom::MergeFrom(const OGAckRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  betlist_.MergeFrom(from.betlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roommaxline()) {
      set_roommaxline(from.roommaxline());
    }
    if (from.has_roommaxtimes()) {
      set_roommaxtimes(from.roommaxtimes());
    }
    if (from.has_roombasegold()) {
      set_roombasegold(from.roombasegold());
    }
    if (from.has_roompic()) {
      set_roompic(from.roompic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomdoubleon()) {
      set_roomdoubleon(from.roomdoubleon());
    }
    if (from.has_freeon()) {
      set_freeon(from.freeon());
    }
    if (from.has_fourtimeson()) {
      set_fourtimeson(from.fourtimeson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoom::CopyFrom(const OGAckRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckRoom::Swap(OGAckRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reason_, other->reason_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roommaxline_, other->roommaxline_);
    std::swap(roommaxtimes_, other->roommaxtimes_);
    std::swap(roombasegold_, other->roombasegold_);
    std::swap(roompic_, other->roompic_);
    std::swap(roomdoubleon_, other->roomdoubleon_);
    std::swap(freeon_, other->freeon_);
    std::swap(fourtimeson_, other->fourtimeson_);
    betlist_.Swap(&other->betlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoom_descriptor_;
  metadata.reflection = OGAckRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckBoss::kBossIdFieldNumber;
const int OGAckBoss::kBossNeedGoldFieldNumber;
const int OGAckBoss::kRoomPicFieldNumber;
const int OGAckBoss::kBossPicFieldNumber;
const int OGAckBoss::kPetCurrGoldFieldNumber;
const int OGAckBoss::kFreeNumFieldNumber;
const int OGAckBoss::kNeedGoldFieldNumber;
const int OGAckBoss::kBossBloodFieldNumber;
const int OGAckBoss::kBossBloodMaxFieldNumber;
#endif  // !_MSC_VER

OGAckBoss::OGAckBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckBoss::InitAsDefaultInstance() {
}

OGAckBoss::OGAckBoss(const OGAckBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckBoss::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  bossneedgold_ = GOOGLE_LONGLONG(0);
  roompic_ = 0;
  bosspic_ = 0;
  petcurrgold_ = GOOGLE_LONGLONG(0);
  freenum_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  bossblood_ = 0;
  bossbloodmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckBoss::~OGAckBoss() {
  SharedDtor();
}

void OGAckBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckBoss_descriptor_;
}

const OGAckBoss& OGAckBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckBoss* OGAckBoss::default_instance_ = NULL;

OGAckBoss* OGAckBoss::New() const {
  return new OGAckBoss;
}

void OGAckBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    bossneedgold_ = GOOGLE_LONGLONG(0);
    roompic_ = 0;
    bosspic_ = 0;
    petcurrgold_ = GOOGLE_LONGLONG(0);
    freenum_ = 0;
    needgold_ = GOOGLE_LONGLONG(0);
    bossblood_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bossbloodmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossNeedGold;
        break;
      }
      
      // optional int64 bossNeedGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossNeedGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossneedgold_)));
          set_has_bossneedgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomPic;
        break;
      }
      
      // optional int32 roomPic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomPic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roompic_)));
          set_has_roompic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bossPic;
        break;
      }
      
      // optional int32 bossPic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossPic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosspic_)));
          set_has_bosspic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_petCurrGold;
        break;
      }
      
      // optional int64 petCurrGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petCurrGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petcurrgold_)));
          set_has_petcurrgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freeNum;
        break;
      }
      
      // optional int32 freeNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_needGold;
        break;
      }
      
      // optional int64 needGold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossBlood;
        break;
      }
      
      // optional int32 bossBlood = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossblood_)));
          set_has_bossblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bossBloodMax;
        break;
      }
      
      // optional int32 bossBloodMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossBloodMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossbloodmax_)));
          set_has_bossbloodmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }
  
  // optional int64 bossNeedGold = 2;
  if (has_bossneedgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossneedgold(), output);
  }
  
  // optional int32 roomPic = 3;
  if (has_roompic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roompic(), output);
  }
  
  // optional int32 bossPic = 4;
  if (has_bosspic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bosspic(), output);
  }
  
  // optional int64 petCurrGold = 5;
  if (has_petcurrgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->petcurrgold(), output);
  }
  
  // optional int32 freeNum = 6;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freenum(), output);
  }
  
  // optional int64 needGold = 7;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->needgold(), output);
  }
  
  // optional int32 bossBlood = 8;
  if (has_bossblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bossblood(), output);
  }
  
  // optional int32 bossBloodMax = 9;
  if (has_bossbloodmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bossbloodmax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }
  
  // optional int64 bossNeedGold = 2;
  if (has_bossneedgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossneedgold(), target);
  }
  
  // optional int32 roomPic = 3;
  if (has_roompic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roompic(), target);
  }
  
  // optional int32 bossPic = 4;
  if (has_bosspic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bosspic(), target);
  }
  
  // optional int64 petCurrGold = 5;
  if (has_petcurrgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->petcurrgold(), target);
  }
  
  // optional int32 freeNum = 6;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->freenum(), target);
  }
  
  // optional int64 needGold = 7;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->needgold(), target);
  }
  
  // optional int32 bossBlood = 8;
  if (has_bossblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bossblood(), target);
  }
  
  // optional int32 bossBloodMax = 9;
  if (has_bossbloodmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bossbloodmax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int64 bossNeedGold = 2;
    if (has_bossneedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossneedgold());
    }
    
    // optional int32 roomPic = 3;
    if (has_roompic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roompic());
    }
    
    // optional int32 bossPic = 4;
    if (has_bosspic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosspic());
    }
    
    // optional int64 petCurrGold = 5;
    if (has_petcurrgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petcurrgold());
    }
    
    // optional int32 freeNum = 6;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }
    
    // optional int64 needGold = 7;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
    // optional int32 bossBlood = 8;
    if (has_bossblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossblood());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bossBloodMax = 9;
    if (has_bossbloodmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossbloodmax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckBoss::MergeFrom(const OGAckBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bossneedgold()) {
      set_bossneedgold(from.bossneedgold());
    }
    if (from.has_roompic()) {
      set_roompic(from.roompic());
    }
    if (from.has_bosspic()) {
      set_bosspic(from.bosspic());
    }
    if (from.has_petcurrgold()) {
      set_petcurrgold(from.petcurrgold());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_bossblood()) {
      set_bossblood(from.bossblood());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bossbloodmax()) {
      set_bossbloodmax(from.bossbloodmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckBoss::CopyFrom(const OGAckBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckBoss::IsInitialized() const {
  
  return true;
}

void OGAckBoss::Swap(OGAckBoss* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bossneedgold_, other->bossneedgold_);
    std::swap(roompic_, other->roompic_);
    std::swap(bosspic_, other->bosspic_);
    std::swap(petcurrgold_, other->petcurrgold_);
    std::swap(freenum_, other->freenum_);
    std::swap(needgold_, other->needgold_);
    std::swap(bossblood_, other->bossblood_);
    std::swap(bossbloodmax_, other->bossbloodmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckBoss_descriptor_;
  metadata.reflection = OGAckBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGReqExitType_E_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqExitType_E_MsgType_descriptor_;
}
bool OGReqExitType_E_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGReqExitType_E_MsgType OGReqExitType::ET_TYPE1;
const OGReqExitType_E_MsgType OGReqExitType::ET_TYPE2;
const OGReqExitType_E_MsgType OGReqExitType::ET_TYPE3;
const OGReqExitType_E_MsgType OGReqExitType::ET_TYPE4;
const OGReqExitType_E_MsgType OGReqExitType::E_MsgType_MIN;
const OGReqExitType_E_MsgType OGReqExitType::E_MsgType_MAX;
const int OGReqExitType::E_MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGReqExitType::kMsgTypeFieldNumber;
const int OGReqExitType::kResultFieldNumber;
#endif  // !_MSC_VER

OGReqExitType::OGReqExitType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqExitType::InitAsDefaultInstance() {
}

OGReqExitType::OGReqExitType(const OGReqExitType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqExitType::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqExitType::~OGReqExitType() {
  SharedDtor();
}

void OGReqExitType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqExitType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqExitType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqExitType_descriptor_;
}

const OGReqExitType& OGReqExitType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqExitType* OGReqExitType::default_instance_ = NULL;

OGReqExitType* OGReqExitType::New() const {
  return new OGReqExitType;
}

void OGReqExitType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 1;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqExitType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGReqExitType_E_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::com::ourgame::texasSlots::OGReqExitType_E_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqExitType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqExitType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqExitType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ourgame.texasSlots.OGReqExitType.E_MsgType msgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqExitType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqExitType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqExitType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqExitType::MergeFrom(const OGReqExitType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqExitType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqExitType::CopyFrom(const OGReqExitType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqExitType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGReqExitType::Swap(OGReqExitType* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqExitType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqExitType_descriptor_;
  metadata.reflection = OGReqExitType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckExit_E_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckExit_E_MsgType_descriptor_;
}
bool OGAckExit_E_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckExit_E_MsgType OGAckExit::ET_TYPE1;
const OGAckExit_E_MsgType OGAckExit::ET_TYPE2;
const OGAckExit_E_MsgType OGAckExit::ET_TYPE3;
const OGAckExit_E_MsgType OGAckExit::ET_TYPE4;
const OGAckExit_E_MsgType OGAckExit::E_MsgType_MIN;
const OGAckExit_E_MsgType OGAckExit::E_MsgType_MAX;
const int OGAckExit::E_MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckExit::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

OGAckExit::OGAckExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckExit::InitAsDefaultInstance() {
}

OGAckExit::OGAckExit(const OGAckExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckExit::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckExit::~OGAckExit() {
  SharedDtor();
}

void OGAckExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckExit_descriptor_;
}

const OGAckExit& OGAckExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckExit* OGAckExit::default_instance_ = NULL;

OGAckExit* OGAckExit::New() const {
  return new OGAckExit;
}

void OGAckExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckExit_E_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::com::ourgame::texasSlots::OGAckExit_E_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckExit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ourgame.texasSlots.OGAckExit.E_MsgType msgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckExit::MergeFrom(const OGAckExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckExit::CopyFrom(const OGAckExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckExit::Swap(OGAckExit* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckExit_descriptor_;
  metadata.reflection = OGAckExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqStartGame::kLineFieldNumber;
const int OGReqStartGame::kTimesFieldNumber;
const int OGReqStartGame::kAutoFieldNumber;
#endif  // !_MSC_VER

OGReqStartGame::OGReqStartGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqStartGame::InitAsDefaultInstance() {
}

OGReqStartGame::OGReqStartGame(const OGReqStartGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqStartGame::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0;
  times_ = 0;
  auto__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqStartGame::~OGReqStartGame() {
  SharedDtor();
}

void OGReqStartGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqStartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqStartGame_descriptor_;
}

const OGReqStartGame& OGReqStartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqStartGame* OGReqStartGame::default_instance_ = NULL;

OGReqStartGame* OGReqStartGame::New() const {
  return new OGReqStartGame;
}

void OGReqStartGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_ = 0;
    times_ = 0;
    auto__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto;
        break;
      }
      
      // optional bool auto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line(), output);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }
  
  // optional bool auto = 3;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqStartGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line(), target);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }
  
  // optional bool auto = 3;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqStartGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional bool auto = 3;
    if (has_auto_()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqStartGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqStartGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqStartGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqStartGame::MergeFrom(const OGReqStartGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqStartGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqStartGame::CopyFrom(const OGReqStartGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqStartGame::IsInitialized() const {
  
  return true;
}

void OGReqStartGame::Swap(OGReqStartGame* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(times_, other->times_);
    std::swap(auto__, other->auto__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqStartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqStartGame_descriptor_;
  metadata.reflection = OGReqStartGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_TIMES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDoubleGame_E_TIMES_descriptor_;
}
bool OGReqDoubleGame_E_TIMES_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::ET_TIMES1;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::ET_TIMES2;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::ET_TIMES3;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::ET_TIMES5;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::E_TIMES_MIN;
const OGReqDoubleGame_E_TIMES OGReqDoubleGame::E_TIMES_MAX;
const int OGReqDoubleGame::E_TIMES_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OGReqDoubleGame_E_COLOUR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDoubleGame_E_COLOUR_descriptor_;
}
bool OGReqDoubleGame_E_COLOUR_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR1;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR2;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR3;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR4;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR5;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::ET_COLOUR6;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::E_COLOUR_MIN;
const OGReqDoubleGame_E_COLOUR OGReqDoubleGame::E_COLOUR_MAX;
const int OGReqDoubleGame::E_COLOUR_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGReqDoubleGame::kTimesFieldNumber;
const int OGReqDoubleGame::kColourFieldNumber;
#endif  // !_MSC_VER

OGReqDoubleGame::OGReqDoubleGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqDoubleGame::InitAsDefaultInstance() {
}

OGReqDoubleGame::OGReqDoubleGame(const OGReqDoubleGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqDoubleGame::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  colour_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqDoubleGame::~OGReqDoubleGame() {
  SharedDtor();
}

void OGReqDoubleGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqDoubleGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqDoubleGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDoubleGame_descriptor_;
}

const OGReqDoubleGame& OGReqDoubleGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqDoubleGame* OGReqDoubleGame::default_instance_ = NULL;

OGReqDoubleGame* OGReqDoubleGame::New() const {
  return new OGReqDoubleGame;
}

void OGReqDoubleGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
    colour_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqDoubleGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_colour;
        break;
      }
      
      // optional int32 colour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_)));
          set_has_colour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqDoubleGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }
  
  // optional int32 colour = 2;
  if (has_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colour(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqDoubleGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }
  
  // optional int32 colour = 2;
  if (has_colour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colour(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqDoubleGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional int32 colour = 2;
    if (has_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqDoubleGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqDoubleGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqDoubleGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqDoubleGame::MergeFrom(const OGReqDoubleGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_colour()) {
      set_colour(from.colour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqDoubleGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqDoubleGame::CopyFrom(const OGReqDoubleGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqDoubleGame::IsInitialized() const {
  
  return true;
}

void OGReqDoubleGame::Swap(OGReqDoubleGame* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(colour_, other->colour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqDoubleGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqDoubleGame_descriptor_;
  metadata.reflection = OGReqDoubleGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckGameResult::kGrid1FieldNumber;
const int OGAckGameResult::kGrid2FieldNumber;
const int OGAckGameResult::kGrid3FieldNumber;
const int OGAckGameResult::kGrid4FieldNumber;
const int OGAckGameResult::kGrid5FieldNumber;
const int OGAckGameResult::kGrid6FieldNumber;
const int OGAckGameResult::kGrid7FieldNumber;
const int OGAckGameResult::kGrid8FieldNumber;
const int OGAckGameResult::kGrid9FieldNumber;
const int OGAckGameResult::kGrid10FieldNumber;
const int OGAckGameResult::kGrid11FieldNumber;
const int OGAckGameResult::kGrid12FieldNumber;
const int OGAckGameResult::kGrid13FieldNumber;
const int OGAckGameResult::kGrid14FieldNumber;
const int OGAckGameResult::kGrid15FieldNumber;
const int OGAckGameResult::kWinGoldFieldNumber;
const int OGAckGameResult::kResultFieldNumber;
const int OGAckGameResult::kWinExpFieldNumber;
const int OGAckGameResult::kJpLineNumFieldNumber;
const int OGAckGameResult::kPetWinExpFieldNumber;
const int OGAckGameResult::kPageFieldNumber;
const int OGAckGameResult::kPetWinGoldFieldNumber;
const int OGAckGameResult::kWrongMsgFieldNumber;
const int OGAckGameResult::kFreeFlgFieldNumber;
const int OGAckGameResult::kGoldPlusFieldNumber;
const int OGAckGameResult::kFreeTimesFieldNumber;
#endif  // !_MSC_VER

OGAckGameResult::OGAckGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckGameResult::InitAsDefaultInstance() {
}

OGAckGameResult::OGAckGameResult(const OGAckGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckGameResult::SharedCtor() {
  _cached_size_ = 0;
  grid1_ = 0;
  grid2_ = 0;
  grid3_ = 0;
  grid4_ = 0;
  grid5_ = 0;
  grid6_ = 0;
  grid7_ = 0;
  grid8_ = 0;
  grid9_ = 0;
  grid10_ = 0;
  grid11_ = 0;
  grid12_ = 0;
  grid13_ = 0;
  grid14_ = 0;
  grid15_ = 0;
  wingold_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  winexp_ = GOOGLE_LONGLONG(0);
  jplinenum_ = 0;
  petwinexp_ = GOOGLE_LONGLONG(0);
  page_ = 0;
  petwingold_ = GOOGLE_LONGLONG(0);
  wrongmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freeflg_ = 0;
  goldplus_ = GOOGLE_LONGLONG(0);
  freetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckGameResult::~OGAckGameResult() {
  SharedDtor();
}

void OGAckGameResult::SharedDtor() {
  if (wrongmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete wrongmsg_;
  }
  if (this != default_instance_) {
  }
}

void OGAckGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckGameResult_descriptor_;
}

const OGAckGameResult& OGAckGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckGameResult* OGAckGameResult::default_instance_ = NULL;

OGAckGameResult* OGAckGameResult::New() const {
  return new OGAckGameResult;
}

void OGAckGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid1_ = 0;
    grid2_ = 0;
    grid3_ = 0;
    grid4_ = 0;
    grid5_ = 0;
    grid6_ = 0;
    grid7_ = 0;
    grid8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    grid9_ = 0;
    grid10_ = 0;
    grid11_ = 0;
    grid12_ = 0;
    grid13_ = 0;
    grid14_ = 0;
    grid15_ = 0;
    wingold_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    result_ = 0;
    winexp_ = GOOGLE_LONGLONG(0);
    jplinenum_ = 0;
    petwinexp_ = GOOGLE_LONGLONG(0);
    page_ = 0;
    petwingold_ = GOOGLE_LONGLONG(0);
    if (has_wrongmsg()) {
      if (wrongmsg_ != &::google::protobuf::internal::kEmptyString) {
        wrongmsg_->clear();
      }
    }
    freeflg_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    goldplus_ = GOOGLE_LONGLONG(0);
    freetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grid1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid1_)));
          set_has_grid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid2;
        break;
      }
      
      // optional int32 grid2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid2_)));
          set_has_grid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid3;
        break;
      }
      
      // optional int32 grid3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid3_)));
          set_has_grid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grid4;
        break;
      }
      
      // optional int32 grid4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid4_)));
          set_has_grid4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grid5;
        break;
      }
      
      // optional int32 grid5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid5_)));
          set_has_grid5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grid6;
        break;
      }
      
      // optional int32 grid6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid6_)));
          set_has_grid6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grid7;
        break;
      }
      
      // optional int32 grid7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid7_)));
          set_has_grid7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grid8;
        break;
      }
      
      // optional int32 grid8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid8_)));
          set_has_grid8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_grid9;
        break;
      }
      
      // optional int32 grid9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid9_)));
          set_has_grid9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_grid10;
        break;
      }
      
      // optional int32 grid10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid10_)));
          set_has_grid10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_grid11;
        break;
      }
      
      // optional int32 grid11 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid11_)));
          set_has_grid11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_grid12;
        break;
      }
      
      // optional int32 grid12 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid12_)));
          set_has_grid12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_grid13;
        break;
      }
      
      // optional int32 grid13 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid13_)));
          set_has_grid13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_grid14;
        break;
      }
      
      // optional int32 grid14 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid14_)));
          set_has_grid14();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_grid15;
        break;
      }
      
      // optional int32 grid15 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid15_)));
          set_has_grid15();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_winGold;
        break;
      }
      
      // optional int64 winGold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingold_)));
          set_has_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_result;
        break;
      }
      
      // required int32 result = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_winExp;
        break;
      }
      
      // optional int64 winExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winexp_)));
          set_has_winexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_jpLineNum;
        break;
      }
      
      // optional int32 jpLineNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpLineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jplinenum_)));
          set_has_jplinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_petWinExp;
        break;
      }
      
      // optional int64 petWinExp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petWinExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petwinexp_)));
          set_has_petwinexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_page;
        break;
      }
      
      // optional int32 page = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_petWinGold;
        break;
      }
      
      // optional int64 petWinGold = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petWinGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petwingold_)));
          set_has_petwingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_wrongMsg;
        break;
      }
      
      // optional string wrongMsg = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrongMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wrongmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wrongmsg().data(), this->wrongmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_freeFlg;
        break;
      }
      
      // optional int32 freeFlg = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeflg_)));
          set_has_freeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_goldPlus;
        break;
      }
      
      // optional int64 goldPlus = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldplus_)));
          set_has_goldplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_freeTimes;
        break;
      }
      
      // optional int32 freeTimes = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grid1 = 1;
  if (has_grid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid1(), output);
  }
  
  // optional int32 grid2 = 2;
  if (has_grid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid2(), output);
  }
  
  // optional int32 grid3 = 3;
  if (has_grid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grid3(), output);
  }
  
  // optional int32 grid4 = 4;
  if (has_grid4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grid4(), output);
  }
  
  // optional int32 grid5 = 5;
  if (has_grid5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grid5(), output);
  }
  
  // optional int32 grid6 = 6;
  if (has_grid6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->grid6(), output);
  }
  
  // optional int32 grid7 = 7;
  if (has_grid7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grid7(), output);
  }
  
  // optional int32 grid8 = 8;
  if (has_grid8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grid8(), output);
  }
  
  // optional int32 grid9 = 9;
  if (has_grid9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grid9(), output);
  }
  
  // optional int32 grid10 = 10;
  if (has_grid10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grid10(), output);
  }
  
  // optional int32 grid11 = 11;
  if (has_grid11()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->grid11(), output);
  }
  
  // optional int32 grid12 = 12;
  if (has_grid12()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->grid12(), output);
  }
  
  // optional int32 grid13 = 13;
  if (has_grid13()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->grid13(), output);
  }
  
  // optional int32 grid14 = 14;
  if (has_grid14()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->grid14(), output);
  }
  
  // optional int32 grid15 = 15;
  if (has_grid15()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->grid15(), output);
  }
  
  // optional int64 winGold = 16;
  if (has_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->wingold(), output);
  }
  
  // required int32 result = 17;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->result(), output);
  }
  
  // optional int64 winExp = 18;
  if (has_winexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->winexp(), output);
  }
  
  // optional int32 jpLineNum = 19;
  if (has_jplinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->jplinenum(), output);
  }
  
  // optional int64 petWinExp = 20;
  if (has_petwinexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->petwinexp(), output);
  }
  
  // optional int32 page = 21;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->page(), output);
  }
  
  // optional int64 petWinGold = 22;
  if (has_petwingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->petwingold(), output);
  }
  
  // optional string wrongMsg = 23;
  if (has_wrongmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrongmsg().data(), this->wrongmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->wrongmsg(), output);
  }
  
  // optional int32 freeFlg = 24;
  if (has_freeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->freeflg(), output);
  }
  
  // optional int64 goldPlus = 25;
  if (has_goldplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->goldplus(), output);
  }
  
  // optional int32 freeTimes = 26;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->freetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grid1 = 1;
  if (has_grid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid1(), target);
  }
  
  // optional int32 grid2 = 2;
  if (has_grid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid2(), target);
  }
  
  // optional int32 grid3 = 3;
  if (has_grid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grid3(), target);
  }
  
  // optional int32 grid4 = 4;
  if (has_grid4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grid4(), target);
  }
  
  // optional int32 grid5 = 5;
  if (has_grid5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grid5(), target);
  }
  
  // optional int32 grid6 = 6;
  if (has_grid6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->grid6(), target);
  }
  
  // optional int32 grid7 = 7;
  if (has_grid7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grid7(), target);
  }
  
  // optional int32 grid8 = 8;
  if (has_grid8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grid8(), target);
  }
  
  // optional int32 grid9 = 9;
  if (has_grid9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grid9(), target);
  }
  
  // optional int32 grid10 = 10;
  if (has_grid10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grid10(), target);
  }
  
  // optional int32 grid11 = 11;
  if (has_grid11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->grid11(), target);
  }
  
  // optional int32 grid12 = 12;
  if (has_grid12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->grid12(), target);
  }
  
  // optional int32 grid13 = 13;
  if (has_grid13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->grid13(), target);
  }
  
  // optional int32 grid14 = 14;
  if (has_grid14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->grid14(), target);
  }
  
  // optional int32 grid15 = 15;
  if (has_grid15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->grid15(), target);
  }
  
  // optional int64 winGold = 16;
  if (has_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->wingold(), target);
  }
  
  // required int32 result = 17;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->result(), target);
  }
  
  // optional int64 winExp = 18;
  if (has_winexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->winexp(), target);
  }
  
  // optional int32 jpLineNum = 19;
  if (has_jplinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->jplinenum(), target);
  }
  
  // optional int64 petWinExp = 20;
  if (has_petwinexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->petwinexp(), target);
  }
  
  // optional int32 page = 21;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->page(), target);
  }
  
  // optional int64 petWinGold = 22;
  if (has_petwingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->petwingold(), target);
  }
  
  // optional string wrongMsg = 23;
  if (has_wrongmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wrongmsg().data(), this->wrongmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->wrongmsg(), target);
  }
  
  // optional int32 freeFlg = 24;
  if (has_freeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->freeflg(), target);
  }
  
  // optional int64 goldPlus = 25;
  if (has_goldplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->goldplus(), target);
  }
  
  // optional int32 freeTimes = 26;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->freetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckGameResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grid1 = 1;
    if (has_grid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid1());
    }
    
    // optional int32 grid2 = 2;
    if (has_grid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid2());
    }
    
    // optional int32 grid3 = 3;
    if (has_grid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid3());
    }
    
    // optional int32 grid4 = 4;
    if (has_grid4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid4());
    }
    
    // optional int32 grid5 = 5;
    if (has_grid5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid5());
    }
    
    // optional int32 grid6 = 6;
    if (has_grid6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid6());
    }
    
    // optional int32 grid7 = 7;
    if (has_grid7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid7());
    }
    
    // optional int32 grid8 = 8;
    if (has_grid8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid8());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grid9 = 9;
    if (has_grid9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid9());
    }
    
    // optional int32 grid10 = 10;
    if (has_grid10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid10());
    }
    
    // optional int32 grid11 = 11;
    if (has_grid11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid11());
    }
    
    // optional int32 grid12 = 12;
    if (has_grid12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid12());
    }
    
    // optional int32 grid13 = 13;
    if (has_grid13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid13());
    }
    
    // optional int32 grid14 = 14;
    if (has_grid14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid14());
    }
    
    // optional int32 grid15 = 15;
    if (has_grid15()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid15());
    }
    
    // optional int64 winGold = 16;
    if (has_wingold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingold());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 result = 17;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int64 winExp = 18;
    if (has_winexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winexp());
    }
    
    // optional int32 jpLineNum = 19;
    if (has_jplinenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jplinenum());
    }
    
    // optional int64 petWinExp = 20;
    if (has_petwinexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petwinexp());
    }
    
    // optional int32 page = 21;
    if (has_page()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int64 petWinGold = 22;
    if (has_petwingold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petwingold());
    }
    
    // optional string wrongMsg = 23;
    if (has_wrongmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wrongmsg());
    }
    
    // optional int32 freeFlg = 24;
    if (has_freeflg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeflg());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 goldPlus = 25;
    if (has_goldplus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldplus());
    }
    
    // optional int32 freeTimes = 26;
    if (has_freetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckGameResult::MergeFrom(const OGAckGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid1()) {
      set_grid1(from.grid1());
    }
    if (from.has_grid2()) {
      set_grid2(from.grid2());
    }
    if (from.has_grid3()) {
      set_grid3(from.grid3());
    }
    if (from.has_grid4()) {
      set_grid4(from.grid4());
    }
    if (from.has_grid5()) {
      set_grid5(from.grid5());
    }
    if (from.has_grid6()) {
      set_grid6(from.grid6());
    }
    if (from.has_grid7()) {
      set_grid7(from.grid7());
    }
    if (from.has_grid8()) {
      set_grid8(from.grid8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grid9()) {
      set_grid9(from.grid9());
    }
    if (from.has_grid10()) {
      set_grid10(from.grid10());
    }
    if (from.has_grid11()) {
      set_grid11(from.grid11());
    }
    if (from.has_grid12()) {
      set_grid12(from.grid12());
    }
    if (from.has_grid13()) {
      set_grid13(from.grid13());
    }
    if (from.has_grid14()) {
      set_grid14(from.grid14());
    }
    if (from.has_grid15()) {
      set_grid15(from.grid15());
    }
    if (from.has_wingold()) {
      set_wingold(from.wingold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_winexp()) {
      set_winexp(from.winexp());
    }
    if (from.has_jplinenum()) {
      set_jplinenum(from.jplinenum());
    }
    if (from.has_petwinexp()) {
      set_petwinexp(from.petwinexp());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_petwingold()) {
      set_petwingold(from.petwingold());
    }
    if (from.has_wrongmsg()) {
      set_wrongmsg(from.wrongmsg());
    }
    if (from.has_freeflg()) {
      set_freeflg(from.freeflg());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_goldplus()) {
      set_goldplus(from.goldplus());
    }
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckGameResult::CopyFrom(const OGAckGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckGameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010000) != 0x00010000) return false;
  
  return true;
}

void OGAckGameResult::Swap(OGAckGameResult* other) {
  if (other != this) {
    std::swap(grid1_, other->grid1_);
    std::swap(grid2_, other->grid2_);
    std::swap(grid3_, other->grid3_);
    std::swap(grid4_, other->grid4_);
    std::swap(grid5_, other->grid5_);
    std::swap(grid6_, other->grid6_);
    std::swap(grid7_, other->grid7_);
    std::swap(grid8_, other->grid8_);
    std::swap(grid9_, other->grid9_);
    std::swap(grid10_, other->grid10_);
    std::swap(grid11_, other->grid11_);
    std::swap(grid12_, other->grid12_);
    std::swap(grid13_, other->grid13_);
    std::swap(grid14_, other->grid14_);
    std::swap(grid15_, other->grid15_);
    std::swap(wingold_, other->wingold_);
    std::swap(result_, other->result_);
    std::swap(winexp_, other->winexp_);
    std::swap(jplinenum_, other->jplinenum_);
    std::swap(petwinexp_, other->petwinexp_);
    std::swap(page_, other->page_);
    std::swap(petwingold_, other->petwingold_);
    std::swap(wrongmsg_, other->wrongmsg_);
    std::swap(freeflg_, other->freeflg_);
    std::swap(goldplus_, other->goldplus_);
    std::swap(freetimes_, other->freetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckGameResult_descriptor_;
  metadata.reflection = OGAckGameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameToJSupport::kRoleNameFieldNumber;
const int GameToJSupport::kTypeFieldNumber;
const int GameToJSupport::kNeedGoldFieldNumber;
const int GameToJSupport::kWinGoldFieldNumber;
const int GameToJSupport::kWinExpFieldNumber;
const int GameToJSupport::kJpLineNumFieldNumber;
const int GameToJSupport::kJpPassFieldNumber;
const int GameToJSupport::kJpFieldNumber;
const int GameToJSupport::kBigTypeFieldNumber;
const int GameToJSupport::kPetWinGoldFieldNumber;
const int GameToJSupport::kJpBetFieldNumber;
const int GameToJSupport::kBetFieldNumber;
const int GameToJSupport::kPetWinExpFieldNumber;
const int GameToJSupport::kLineFieldNumber;
const int GameToJSupport::kTimesFieldNumber;
const int GameToJSupport::kStr1FieldNumber;
const int GameToJSupport::kFreeFlgFieldNumber;
const int GameToJSupport::kGoldPlusFieldNumber;
const int GameToJSupport::kJpStarNameFieldNumber;
#endif  // !_MSC_VER

GameToJSupport::GameToJSupport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameToJSupport::InitAsDefaultInstance() {
}

GameToJSupport::GameToJSupport(const GameToJSupport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameToJSupport::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  wingold_ = GOOGLE_LONGLONG(0);
  winexp_ = 0;
  jplinenum_ = 0;
  jppass_ = 0;
  jp_ = GOOGLE_LONGLONG(0);
  bigtype_ = 0;
  petwingold_ = GOOGLE_LONGLONG(0);
  jpbet_ = 0;
  bet_ = 0;
  petwinexp_ = GOOGLE_LONGLONG(0);
  line_ = 0;
  times_ = 0;
  str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freeflg_ = 0;
  goldplus_ = GOOGLE_LONGLONG(0);
  jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameToJSupport::~GameToJSupport() {
  SharedDtor();
}

void GameToJSupport::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    delete jpstarname_;
  }
  if (this != default_instance_) {
  }
}

void GameToJSupport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameToJSupport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameToJSupport_descriptor_;
}

const GameToJSupport& GameToJSupport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

GameToJSupport* GameToJSupport::default_instance_ = NULL;

GameToJSupport* GameToJSupport::New() const {
  return new GameToJSupport;
}

void GameToJSupport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    type_ = 0;
    needgold_ = GOOGLE_LONGLONG(0);
    wingold_ = GOOGLE_LONGLONG(0);
    winexp_ = 0;
    jplinenum_ = 0;
    jppass_ = 0;
    jp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bigtype_ = 0;
    petwingold_ = GOOGLE_LONGLONG(0);
    jpbet_ = 0;
    bet_ = 0;
    petwinexp_ = GOOGLE_LONGLONG(0);
    line_ = 0;
    times_ = 0;
    if (has_str1()) {
      if (str1_ != &::google::protobuf::internal::kEmptyString) {
        str1_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    freeflg_ = 0;
    goldplus_ = GOOGLE_LONGLONG(0);
    if (has_jpstarname()) {
      if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
        jpstarname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameToJSupport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needGold;
        break;
      }
      
      // required int64 needGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winGold;
        break;
      }
      
      // required int64 winGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingold_)));
          set_has_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winExp;
        break;
      }
      
      // required int32 winExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winexp_)));
          set_has_winexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jpLineNum;
        break;
      }
      
      // required int32 jpLineNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpLineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jplinenum_)));
          set_has_jplinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jpPass;
        break;
      }
      
      // required int32 jpPass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jppass_)));
          set_has_jppass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jp;
        break;
      }
      
      // optional int64 jp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jp_)));
          set_has_jp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bigType;
        break;
      }
      
      // optional int32 bigType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigtype_)));
          set_has_bigtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_petWinGold;
        break;
      }
      
      // optional int64 petWinGold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petWinGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petwingold_)));
          set_has_petwingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jpBet;
        break;
      }
      
      // optional int32 jpBet = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpbet_)));
          set_has_jpbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bet;
        break;
      }
      
      // optional int32 bet = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_petWinExp;
        break;
      }
      
      // optional int64 petWinExp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petWinExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petwinexp_)));
          set_has_petwinexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_line;
        break;
      }
      
      // optional int32 line = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_times;
        break;
      }
      
      // optional int32 times = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_str1;
        break;
      }
      
      // optional string str1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_freeFlg;
        break;
      }
      
      // optional int32 freeFlg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeflg_)));
          set_has_freeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_goldPlus;
        break;
      }
      
      // optional int64 goldPlus = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldplus_)));
          set_has_goldplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_jpStarName;
        break;
      }
      
      // optional string jpStarName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpStarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpstarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpstarname().data(), this->jpstarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameToJSupport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int64 needGold = 3;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->needgold(), output);
  }
  
  // required int64 winGold = 4;
  if (has_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->wingold(), output);
  }
  
  // required int32 winExp = 5;
  if (has_winexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winexp(), output);
  }
  
  // required int32 jpLineNum = 6;
  if (has_jplinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jplinenum(), output);
  }
  
  // required int32 jpPass = 7;
  if (has_jppass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jppass(), output);
  }
  
  // optional int64 jp = 8;
  if (has_jp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->jp(), output);
  }
  
  // optional int32 bigType = 9;
  if (has_bigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bigtype(), output);
  }
  
  // optional int64 petWinGold = 10;
  if (has_petwingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->petwingold(), output);
  }
  
  // optional int32 jpBet = 11;
  if (has_jpbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jpbet(), output);
  }
  
  // optional int32 bet = 12;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bet(), output);
  }
  
  // optional int64 petWinExp = 13;
  if (has_petwinexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->petwinexp(), output);
  }
  
  // optional int32 line = 14;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->line(), output);
  }
  
  // optional int32 times = 15;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->times(), output);
  }
  
  // optional string str1 = 16;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->str1(), output);
  }
  
  // optional int32 freeFlg = 17;
  if (has_freeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->freeflg(), output);
  }
  
  // optional int64 goldPlus = 18;
  if (has_goldplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->goldplus(), output);
  }
  
  // optional string jpStarName = 19;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->jpstarname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameToJSupport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int64 needGold = 3;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->needgold(), target);
  }
  
  // required int64 winGold = 4;
  if (has_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->wingold(), target);
  }
  
  // required int32 winExp = 5;
  if (has_winexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winexp(), target);
  }
  
  // required int32 jpLineNum = 6;
  if (has_jplinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jplinenum(), target);
  }
  
  // required int32 jpPass = 7;
  if (has_jppass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jppass(), target);
  }
  
  // optional int64 jp = 8;
  if (has_jp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->jp(), target);
  }
  
  // optional int32 bigType = 9;
  if (has_bigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bigtype(), target);
  }
  
  // optional int64 petWinGold = 10;
  if (has_petwingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->petwingold(), target);
  }
  
  // optional int32 jpBet = 11;
  if (has_jpbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jpbet(), target);
  }
  
  // optional int32 bet = 12;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bet(), target);
  }
  
  // optional int64 petWinExp = 13;
  if (has_petwinexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->petwinexp(), target);
  }
  
  // optional int32 line = 14;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->line(), target);
  }
  
  // optional int32 times = 15;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->times(), target);
  }
  
  // optional string str1 = 16;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->str1(), target);
  }
  
  // optional int32 freeFlg = 17;
  if (has_freeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->freeflg(), target);
  }
  
  // optional int64 goldPlus = 18;
  if (has_goldplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->goldplus(), target);
  }
  
  // optional string jpStarName = 19;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->jpstarname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameToJSupport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int64 needGold = 3;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
    // required int64 winGold = 4;
    if (has_wingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingold());
    }
    
    // required int32 winExp = 5;
    if (has_winexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winexp());
    }
    
    // required int32 jpLineNum = 6;
    if (has_jplinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jplinenum());
    }
    
    // required int32 jpPass = 7;
    if (has_jppass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jppass());
    }
    
    // optional int64 jp = 8;
    if (has_jp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bigType = 9;
    if (has_bigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigtype());
    }
    
    // optional int64 petWinGold = 10;
    if (has_petwingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petwingold());
    }
    
    // optional int32 jpBet = 11;
    if (has_jpbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpbet());
    }
    
    // optional int32 bet = 12;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet());
    }
    
    // optional int64 petWinExp = 13;
    if (has_petwinexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petwinexp());
    }
    
    // optional int32 line = 14;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // optional int32 times = 15;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional string str1 = 16;
    if (has_str1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 freeFlg = 17;
    if (has_freeflg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeflg());
    }
    
    // optional int64 goldPlus = 18;
    if (has_goldplus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldplus());
    }
    
    // optional string jpStarName = 19;
    if (has_jpstarname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpstarname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameToJSupport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameToJSupport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameToJSupport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameToJSupport::MergeFrom(const GameToJSupport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_wingold()) {
      set_wingold(from.wingold());
    }
    if (from.has_winexp()) {
      set_winexp(from.winexp());
    }
    if (from.has_jplinenum()) {
      set_jplinenum(from.jplinenum());
    }
    if (from.has_jppass()) {
      set_jppass(from.jppass());
    }
    if (from.has_jp()) {
      set_jp(from.jp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bigtype()) {
      set_bigtype(from.bigtype());
    }
    if (from.has_petwingold()) {
      set_petwingold(from.petwingold());
    }
    if (from.has_jpbet()) {
      set_jpbet(from.jpbet());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_petwinexp()) {
      set_petwinexp(from.petwinexp());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_str1()) {
      set_str1(from.str1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_freeflg()) {
      set_freeflg(from.freeflg());
    }
    if (from.has_goldplus()) {
      set_goldplus(from.goldplus());
    }
    if (from.has_jpstarname()) {
      set_jpstarname(from.jpstarname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameToJSupport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToJSupport::CopyFrom(const GameToJSupport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToJSupport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void GameToJSupport::Swap(GameToJSupport* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(type_, other->type_);
    std::swap(needgold_, other->needgold_);
    std::swap(wingold_, other->wingold_);
    std::swap(winexp_, other->winexp_);
    std::swap(jplinenum_, other->jplinenum_);
    std::swap(jppass_, other->jppass_);
    std::swap(jp_, other->jp_);
    std::swap(bigtype_, other->bigtype_);
    std::swap(petwingold_, other->petwingold_);
    std::swap(jpbet_, other->jpbet_);
    std::swap(bet_, other->bet_);
    std::swap(petwinexp_, other->petwinexp_);
    std::swap(line_, other->line_);
    std::swap(times_, other->times_);
    std::swap(str1_, other->str1_);
    std::swap(freeflg_, other->freeflg_);
    std::swap(goldplus_, other->goldplus_);
    std::swap(jpstarname_, other->jpstarname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameToJSupport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameToJSupport_descriptor_;
  metadata.reflection = GameToJSupport_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckDoubleResult_E_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoubleResult_E_Result_descriptor_;
}
bool OGAckDoubleResult_E_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckDoubleResult_E_Result OGAckDoubleResult::ET_SUCCESS;
const OGAckDoubleResult_E_Result OGAckDoubleResult::ET_FAILED;
const OGAckDoubleResult_E_Result OGAckDoubleResult::E_Result_MIN;
const OGAckDoubleResult_E_Result OGAckDoubleResult::E_Result_MAX;
const int OGAckDoubleResult::E_Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckDoubleResult::kResultFieldNumber;
const int OGAckDoubleResult::kWinGoldFieldNumber;
const int OGAckDoubleResult::kStartFieldNumber;
const int OGAckDoubleResult::kCardNumberFieldNumber;
const int OGAckDoubleResult::kGoldFieldNumber;
const int OGAckDoubleResult::kGetGoldFlgFieldNumber;
const int OGAckDoubleResult::kRoleNameFieldNumber;
const int OGAckDoubleResult::kBigTypeFieldNumber;
const int OGAckDoubleResult::kNeedGoldFieldNumber;
const int OGAckDoubleResult::kGoldPlusFieldNumber;
const int OGAckDoubleResult::kGoldPlusValueFieldNumber;
const int OGAckDoubleResult::kPageFieldNumber;
const int OGAckDoubleResult::kColourFieldNumber;
const int OGAckDoubleResult::kTimesFieldNumber;
const int OGAckDoubleResult::kWhiteFlgFieldNumber;
const int OGAckDoubleResult::kDFieldNumber;
const int OGAckDoubleResult::kDoubleTypeFieldNumber;
const int OGAckDoubleResult::kFreeTimesFieldNumber;
#endif  // !_MSC_VER

OGAckDoubleResult::OGAckDoubleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckDoubleResult::InitAsDefaultInstance() {
}

OGAckDoubleResult::OGAckDoubleResult(const OGAckDoubleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckDoubleResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  wingold_ = GOOGLE_LONGLONG(0);
  start_ = 0;
  cardnumber_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  getgoldflg_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bigtype_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  goldplus_ = 0;
  goldplusvalue_ = GOOGLE_LONGLONG(0);
  page_ = 0;
  colour_ = 0;
  times_ = 0;
  whiteflg_ = 0;
  d_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doubletype_ = 0;
  freetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckDoubleResult::~OGAckDoubleResult() {
  SharedDtor();
}

void OGAckDoubleResult::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (d_ != &::google::protobuf::internal::kEmptyString) {
    delete d_;
  }
  if (this != default_instance_) {
  }
}

void OGAckDoubleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckDoubleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoubleResult_descriptor_;
}

const OGAckDoubleResult& OGAckDoubleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckDoubleResult* OGAckDoubleResult::default_instance_ = NULL;

OGAckDoubleResult* OGAckDoubleResult::New() const {
  return new OGAckDoubleResult;
}

void OGAckDoubleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    wingold_ = GOOGLE_LONGLONG(0);
    start_ = 0;
    cardnumber_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
    getgoldflg_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    bigtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    needgold_ = GOOGLE_LONGLONG(0);
    goldplus_ = 0;
    goldplusvalue_ = GOOGLE_LONGLONG(0);
    page_ = 0;
    colour_ = 0;
    times_ = 0;
    whiteflg_ = 0;
    if (has_d()) {
      if (d_ != &::google::protobuf::internal::kEmptyString) {
        d_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    doubletype_ = 0;
    freetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckDoubleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winGold;
        break;
      }
      
      // required int64 winGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingold_)));
          set_has_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }
      
      // required int32 start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardNumber;
        break;
      }
      
      // optional int32 cardNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnumber_)));
          set_has_cardnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }
      
      // required int64 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_getGoldFlg;
        break;
      }
      
      // required int32 getGoldFlg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGoldFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getgoldflg_)));
          set_has_getgoldflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bigType;
        break;
      }
      
      // optional int32 bigType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigtype_)));
          set_has_bigtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_needGold;
        break;
      }
      
      // optional int64 needGold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_goldPlus;
        break;
      }
      
      // optional int32 goldPlus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldplus_)));
          set_has_goldplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_goldPlusValue;
        break;
      }
      
      // optional int64 goldPlusValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlusValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldplusvalue_)));
          set_has_goldplusvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_colour;
        break;
      }
      
      // optional int32 colour = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_)));
          set_has_colour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_times;
        break;
      }
      
      // optional int32 times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_page;
        break;
      }
      
      // optional int32 page = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_whiteFlg;
        break;
      }
      
      // optional int32 whiteFlg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whiteFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whiteflg_)));
          set_has_whiteflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_d;
        break;
      }
      
      // optional string d = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d().data(), this->d().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_doubleType;
        break;
      }
      
      // optional int32 doubleType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubletype_)));
          set_has_doubletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_freeTimes;
        break;
      }
      
      // optional int32 freeTimes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckDoubleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // required int64 winGold = 2;
  if (has_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->wingold(), output);
  }
  
  // required int32 start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }
  
  // optional int32 cardNumber = 4;
  if (has_cardnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardnumber(), output);
  }
  
  // required int64 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }
  
  // required int32 getGoldFlg = 6;
  if (has_getgoldflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->getgoldflg(), output);
  }
  
  // optional string roleName = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rolename(), output);
  }
  
  // optional int32 bigType = 8;
  if (has_bigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bigtype(), output);
  }
  
  // optional int64 needGold = 9;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->needgold(), output);
  }
  
  // optional int32 goldPlus = 10;
  if (has_goldplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->goldplus(), output);
  }
  
  // optional int64 goldPlusValue = 11;
  if (has_goldplusvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->goldplusvalue(), output);
  }
  
  // optional int32 colour = 12;
  if (has_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->colour(), output);
  }
  
  // optional int32 times = 13;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->times(), output);
  }
  
  // optional int32 page = 14;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->page(), output);
  }
  
  // optional int32 whiteFlg = 15;
  if (has_whiteflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->whiteflg(), output);
  }
  
  // optional string d = 16;
  if (has_d()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d().data(), this->d().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->d(), output);
  }
  
  // optional int32 doubleType = 17;
  if (has_doubletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->doubletype(), output);
  }
  
  // optional int32 freeTimes = 18;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->freetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckDoubleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // required int64 winGold = 2;
  if (has_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->wingold(), target);
  }
  
  // required int32 start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }
  
  // optional int32 cardNumber = 4;
  if (has_cardnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardnumber(), target);
  }
  
  // required int64 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }
  
  // required int32 getGoldFlg = 6;
  if (has_getgoldflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->getgoldflg(), target);
  }
  
  // optional string roleName = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rolename(), target);
  }
  
  // optional int32 bigType = 8;
  if (has_bigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bigtype(), target);
  }
  
  // optional int64 needGold = 9;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->needgold(), target);
  }
  
  // optional int32 goldPlus = 10;
  if (has_goldplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->goldplus(), target);
  }
  
  // optional int64 goldPlusValue = 11;
  if (has_goldplusvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->goldplusvalue(), target);
  }
  
  // optional int32 colour = 12;
  if (has_colour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->colour(), target);
  }
  
  // optional int32 times = 13;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->times(), target);
  }
  
  // optional int32 page = 14;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->page(), target);
  }
  
  // optional int32 whiteFlg = 15;
  if (has_whiteflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->whiteflg(), target);
  }
  
  // optional string d = 16;
  if (has_d()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d().data(), this->d().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->d(), target);
  }
  
  // optional int32 doubleType = 17;
  if (has_doubletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->doubletype(), target);
  }
  
  // optional int32 freeTimes = 18;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->freetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckDoubleResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required int64 winGold = 2;
    if (has_wingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingold());
    }
    
    // required int32 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }
    
    // optional int32 cardNumber = 4;
    if (has_cardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnumber());
    }
    
    // required int64 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // required int32 getGoldFlg = 6;
    if (has_getgoldflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getgoldflg());
    }
    
    // optional string roleName = 7;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 bigType = 8;
    if (has_bigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigtype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 needGold = 9;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
    // optional int32 goldPlus = 10;
    if (has_goldplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldplus());
    }
    
    // optional int64 goldPlusValue = 11;
    if (has_goldplusvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldplusvalue());
    }
    
    // optional int32 page = 14;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int32 colour = 12;
    if (has_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour());
    }
    
    // optional int32 times = 13;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional int32 whiteFlg = 15;
    if (has_whiteflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whiteflg());
    }
    
    // optional string d = 16;
    if (has_d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 doubleType = 17;
    if (has_doubletype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubletype());
    }
    
    // optional int32 freeTimes = 18;
    if (has_freetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckDoubleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckDoubleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckDoubleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckDoubleResult::MergeFrom(const OGAckDoubleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_wingold()) {
      set_wingold(from.wingold());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_cardnumber()) {
      set_cardnumber(from.cardnumber());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_getgoldflg()) {
      set_getgoldflg(from.getgoldflg());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_bigtype()) {
      set_bigtype(from.bigtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_goldplus()) {
      set_goldplus(from.goldplus());
    }
    if (from.has_goldplusvalue()) {
      set_goldplusvalue(from.goldplusvalue());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_colour()) {
      set_colour(from.colour());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_whiteflg()) {
      set_whiteflg(from.whiteflg());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_doubletype()) {
      set_doubletype(from.doubletype());
    }
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckDoubleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckDoubleResult::CopyFrom(const OGAckDoubleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckDoubleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void OGAckDoubleResult::Swap(OGAckDoubleResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(wingold_, other->wingold_);
    std::swap(start_, other->start_);
    std::swap(cardnumber_, other->cardnumber_);
    std::swap(gold_, other->gold_);
    std::swap(getgoldflg_, other->getgoldflg_);
    std::swap(rolename_, other->rolename_);
    std::swap(bigtype_, other->bigtype_);
    std::swap(needgold_, other->needgold_);
    std::swap(goldplus_, other->goldplus_);
    std::swap(goldplusvalue_, other->goldplusvalue_);
    std::swap(page_, other->page_);
    std::swap(colour_, other->colour_);
    std::swap(times_, other->times_);
    std::swap(whiteflg_, other->whiteflg_);
    std::swap(d_, other->d_);
    std::swap(doubletype_, other->doubletype_);
    std::swap(freetimes_, other->freetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckDoubleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckDoubleResult_descriptor_;
  metadata.reflection = OGAckDoubleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqDoubleGetGold::OGReqDoubleGetGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqDoubleGetGold::InitAsDefaultInstance() {
}

OGReqDoubleGetGold::OGReqDoubleGetGold(const OGReqDoubleGetGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqDoubleGetGold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqDoubleGetGold::~OGReqDoubleGetGold() {
  SharedDtor();
}

void OGReqDoubleGetGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqDoubleGetGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqDoubleGetGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDoubleGetGold_descriptor_;
}

const OGReqDoubleGetGold& OGReqDoubleGetGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqDoubleGetGold* OGReqDoubleGetGold::default_instance_ = NULL;

OGReqDoubleGetGold* OGReqDoubleGetGold::New() const {
  return new OGReqDoubleGetGold;
}

void OGReqDoubleGetGold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqDoubleGetGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqDoubleGetGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqDoubleGetGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqDoubleGetGold::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqDoubleGetGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqDoubleGetGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqDoubleGetGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqDoubleGetGold::MergeFrom(const OGReqDoubleGetGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqDoubleGetGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqDoubleGetGold::CopyFrom(const OGReqDoubleGetGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqDoubleGetGold::IsInitialized() const {
  
  return true;
}

void OGReqDoubleGetGold::Swap(OGReqDoubleGetGold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqDoubleGetGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqDoubleGetGold_descriptor_;
  metadata.reflection = OGReqDoubleGetGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckDoubleGetGold::kRoleNameFieldNumber;
const int OGAckDoubleGetGold::kWinGoldFieldNumber;
const int OGAckDoubleGetGold::kGoldPlusFieldNumber;
const int OGAckDoubleGetGold::kGoldPlusValueFieldNumber;
const int OGAckDoubleGetGold::kGoldFieldNumber;
const int OGAckDoubleGetGold::kPageFieldNumber;
#endif  // !_MSC_VER

OGAckDoubleGetGold::OGAckDoubleGetGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckDoubleGetGold::InitAsDefaultInstance() {
}

OGAckDoubleGetGold::OGAckDoubleGetGold(const OGAckDoubleGetGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckDoubleGetGold::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wingold_ = GOOGLE_LONGLONG(0);
  goldplus_ = 0;
  goldplusvalue_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckDoubleGetGold::~OGAckDoubleGetGold() {
  SharedDtor();
}

void OGAckDoubleGetGold::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckDoubleGetGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckDoubleGetGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoubleGetGold_descriptor_;
}

const OGAckDoubleGetGold& OGAckDoubleGetGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckDoubleGetGold* OGAckDoubleGetGold::default_instance_ = NULL;

OGAckDoubleGetGold* OGAckDoubleGetGold::New() const {
  return new OGAckDoubleGetGold;
}

void OGAckDoubleGetGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    wingold_ = GOOGLE_LONGLONG(0);
    goldplus_ = 0;
    goldplusvalue_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckDoubleGetGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winGold;
        break;
      }
      
      // required int64 winGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingold_)));
          set_has_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldPlus;
        break;
      }
      
      // required int32 goldPlus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldplus_)));
          set_has_goldplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goldPlusValue;
        break;
      }
      
      // required int64 goldPlusValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldPlusValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldplusvalue_)));
          set_has_goldplusvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }
      
      // required int64 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_page;
        break;
      }
      
      // optional int32 page = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckDoubleGetGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // required int64 winGold = 2;
  if (has_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->wingold(), output);
  }
  
  // required int32 goldPlus = 3;
  if (has_goldplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldplus(), output);
  }
  
  // required int64 goldPlusValue = 4;
  if (has_goldplusvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->goldplusvalue(), output);
  }
  
  // required int64 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }
  
  // optional int32 page = 6;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckDoubleGetGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // required int64 winGold = 2;
  if (has_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->wingold(), target);
  }
  
  // required int32 goldPlus = 3;
  if (has_goldplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldplus(), target);
  }
  
  // required int64 goldPlusValue = 4;
  if (has_goldplusvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->goldplusvalue(), target);
  }
  
  // required int64 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }
  
  // optional int32 page = 6;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckDoubleGetGold::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int64 winGold = 2;
    if (has_wingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingold());
    }
    
    // required int32 goldPlus = 3;
    if (has_goldplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldplus());
    }
    
    // required int64 goldPlusValue = 4;
    if (has_goldplusvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldplusvalue());
    }
    
    // required int64 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional int32 page = 6;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckDoubleGetGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckDoubleGetGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckDoubleGetGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckDoubleGetGold::MergeFrom(const OGAckDoubleGetGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_wingold()) {
      set_wingold(from.wingold());
    }
    if (from.has_goldplus()) {
      set_goldplus(from.goldplus());
    }
    if (from.has_goldplusvalue()) {
      set_goldplusvalue(from.goldplusvalue());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckDoubleGetGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckDoubleGetGold::CopyFrom(const OGAckDoubleGetGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckDoubleGetGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  
  return true;
}

void OGAckDoubleGetGold::Swap(OGAckDoubleGetGold* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(wingold_, other->wingold_);
    std::swap(goldplus_, other->goldplus_);
    std::swap(goldplusvalue_, other->goldplusvalue_);
    std::swap(gold_, other->gold_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckDoubleGetGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckDoubleGetGold_descriptor_;
  metadata.reflection = OGAckDoubleGetGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameLoseMoney::kTypeFieldNumber;
const int GameLoseMoney::kNeedGoldFieldNumber;
#endif  // !_MSC_VER

GameLoseMoney::GameLoseMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameLoseMoney::InitAsDefaultInstance() {
}

GameLoseMoney::GameLoseMoney(const GameLoseMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameLoseMoney::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLoseMoney::~GameLoseMoney() {
  SharedDtor();
}

void GameLoseMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameLoseMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLoseMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLoseMoney_descriptor_;
}

const GameLoseMoney& GameLoseMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

GameLoseMoney* GameLoseMoney::default_instance_ = NULL;

GameLoseMoney* GameLoseMoney::New() const {
  return new GameLoseMoney;
}

void GameLoseMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    needgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameLoseMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGold;
        break;
      }
      
      // required int64 needGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameLoseMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int64 needGold = 2;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->needgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameLoseMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int64 needGold = 2;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->needgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameLoseMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int64 needGold = 2;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLoseMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameLoseMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameLoseMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameLoseMoney::MergeFrom(const GameLoseMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameLoseMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLoseMoney::CopyFrom(const GameLoseMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLoseMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameLoseMoney::Swap(GameLoseMoney* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(needgold_, other->needgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameLoseMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLoseMoney_descriptor_;
  metadata.reflection = GameLoseMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqJP::ReqJP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqJP::InitAsDefaultInstance() {
}

ReqJP::ReqJP(const ReqJP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqJP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqJP::~ReqJP() {
  SharedDtor();
}

void ReqJP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqJP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqJP_descriptor_;
}

const ReqJP& ReqJP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

ReqJP* ReqJP::default_instance_ = NULL;

ReqJP* ReqJP::New() const {
  return new ReqJP;
}

void ReqJP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqJP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqJP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqJP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqJP::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqJP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqJP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqJP::MergeFrom(const ReqJP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqJP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJP::CopyFrom(const ReqJP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJP::IsInitialized() const {
  
  return true;
}

void ReqJP::Swap(ReqJP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqJP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqJP_descriptor_;
  metadata.reflection = ReqJP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckJP::kJpFieldNumber;
#endif  // !_MSC_VER

OGAckJP::OGAckJP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJP::InitAsDefaultInstance() {
}

OGAckJP::OGAckJP(const OGAckJP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJP::SharedCtor() {
  _cached_size_ = 0;
  jp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJP::~OGAckJP() {
  SharedDtor();
}

void OGAckJP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckJP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJP_descriptor_;
}

const OGAckJP& OGAckJP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJP* OGAckJP::default_instance_ = NULL;

OGAckJP* OGAckJP::New() const {
  return new OGAckJP;
}

void OGAckJP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 jp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jp_)));
          set_has_jp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 jp = 1;
  if (has_jp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->jp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 jp = 1;
  if (has_jp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->jp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 jp = 1;
    if (has_jp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJP::MergeFrom(const OGAckJP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jp()) {
      set_jp(from.jp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJP::CopyFrom(const OGAckJP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckJP::Swap(OGAckJP* other) {
  if (other != this) {
    std::swap(jp_, other->jp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJP_descriptor_;
  metadata.reflection = OGAckJP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRoleUpLev::kCurLevFieldNumber;
#endif  // !_MSC_VER

OGAckRoleUpLev::OGAckRoleUpLev()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRoleUpLev::InitAsDefaultInstance() {
}

OGAckRoleUpLev::OGAckRoleUpLev(const OGAckRoleUpLev& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRoleUpLev::SharedCtor() {
  _cached_size_ = 0;
  curlev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRoleUpLev::~OGAckRoleUpLev() {
  SharedDtor();
}

void OGAckRoleUpLev::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRoleUpLev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRoleUpLev::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRoleUpLev_descriptor_;
}

const OGAckRoleUpLev& OGAckRoleUpLev::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRoleUpLev* OGAckRoleUpLev::default_instance_ = NULL;

OGAckRoleUpLev* OGAckRoleUpLev::New() const {
  return new OGAckRoleUpLev;
}

void OGAckRoleUpLev::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curlev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRoleUpLev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 curLev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlev_)));
          set_has_curlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRoleUpLev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 curLev = 1;
  if (has_curlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curlev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRoleUpLev::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 curLev = 1;
  if (has_curlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curlev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRoleUpLev::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 curLev = 1;
    if (has_curlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlev());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRoleUpLev::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRoleUpLev* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRoleUpLev*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRoleUpLev::MergeFrom(const OGAckRoleUpLev& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curlev()) {
      set_curlev(from.curlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRoleUpLev::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRoleUpLev::CopyFrom(const OGAckRoleUpLev& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRoleUpLev::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OGAckRoleUpLev::Swap(OGAckRoleUpLev* other) {
  if (other != this) {
    std::swap(curlev_, other->curlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRoleUpLev::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRoleUpLev_descriptor_;
  metadata.reflection = OGAckRoleUpLev_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqReadDB::OGReqReadDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqReadDB::InitAsDefaultInstance() {
}

OGReqReadDB::OGReqReadDB(const OGReqReadDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqReadDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqReadDB::~OGReqReadDB() {
  SharedDtor();
}

void OGReqReadDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqReadDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqReadDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqReadDB_descriptor_;
}

const OGReqReadDB& OGReqReadDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqReadDB* OGReqReadDB::default_instance_ = NULL;

OGReqReadDB* OGReqReadDB::New() const {
  return new OGReqReadDB;
}

void OGReqReadDB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqReadDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqReadDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqReadDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqReadDB::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqReadDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqReadDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqReadDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqReadDB::MergeFrom(const OGReqReadDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqReadDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqReadDB::CopyFrom(const OGReqReadDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqReadDB::IsInitialized() const {
  
  return true;
}

void OGReqReadDB::Swap(OGReqReadDB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqReadDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqReadDB_descriptor_;
  metadata.reflection = OGReqReadDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqPool::kTypeFieldNumber;
const int OGReqPool::kValueFieldNumber;
#endif  // !_MSC_VER

OGReqPool::OGReqPool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPool::InitAsDefaultInstance() {
}

OGReqPool::OGReqPool(const OGReqPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPool::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPool::~OGReqPool() {
  SharedDtor();
}

void OGReqPool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPool_descriptor_;
}

const OGReqPool& OGReqPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPool* OGReqPool::default_instance_ = NULL;

OGReqPool* OGReqPool::New() const {
  return new OGReqPool;
}

void OGReqPool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPool::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPool::MergeFrom(const OGReqPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPool::CopyFrom(const OGReqPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPool::IsInitialized() const {
  
  return true;
}

void OGReqPool::Swap(OGReqPool* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPool_descriptor_;
  metadata.reflection = OGReqPool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqMailsToPlayer::kPlayersFieldNumber;
#endif  // !_MSC_VER

OGReqMailsToPlayer::OGReqMailsToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqMailsToPlayer::InitAsDefaultInstance() {
}

OGReqMailsToPlayer::OGReqMailsToPlayer(const OGReqMailsToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqMailsToPlayer::SharedCtor() {
  _cached_size_ = 0;
  players_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqMailsToPlayer::~OGReqMailsToPlayer() {
  SharedDtor();
}

void OGReqMailsToPlayer::SharedDtor() {
  if (players_ != &::google::protobuf::internal::kEmptyString) {
    delete players_;
  }
  if (this != default_instance_) {
  }
}

void OGReqMailsToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqMailsToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqMailsToPlayer_descriptor_;
}

const OGReqMailsToPlayer& OGReqMailsToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqMailsToPlayer* OGReqMailsToPlayer::default_instance_ = NULL;

OGReqMailsToPlayer* OGReqMailsToPlayer::New() const {
  return new OGReqMailsToPlayer;
}

void OGReqMailsToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_players()) {
      if (players_ != &::google::protobuf::internal::kEmptyString) {
        players_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqMailsToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_players()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->players().data(), this->players().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqMailsToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->players().data(), this->players().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->players(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqMailsToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->players().data(), this->players().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->players(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqMailsToPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string players = 1;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->players());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqMailsToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqMailsToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqMailsToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqMailsToPlayer::MergeFrom(const OGReqMailsToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players()) {
      set_players(from.players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqMailsToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqMailsToPlayer::CopyFrom(const OGReqMailsToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqMailsToPlayer::IsInitialized() const {
  
  return true;
}

void OGReqMailsToPlayer::Swap(OGReqMailsToPlayer* other) {
  if (other != this) {
    std::swap(players_, other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqMailsToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqMailsToPlayer_descriptor_;
  metadata.reflection = OGReqMailsToPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqAddWhite::kTotalOnFieldNumber;
const int OGReqAddWhite::kTotalStartTimeFieldNumber;
const int OGReqAddWhite::kTotalEndTimeFieldNumber;
const int OGReqAddWhite::kTotalUpFieldNumber;
const int OGReqAddWhite::kTotalUpJilvFieldNumber;
const int OGReqAddWhite::kTotalDownFieldNumber;
const int OGReqAddWhite::kTotalDownJilvFieldNumber;
const int OGReqAddWhite::kRoleNameFieldNumber;
const int OGReqAddWhite::kFlgFieldNumber;
const int OGReqAddWhite::kKeyFieldNumber;
const int OGReqAddWhite::kWhiteFieldNumber;
#endif  // !_MSC_VER

OGReqAddWhite::OGReqAddWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqAddWhite::InitAsDefaultInstance() {
}

OGReqAddWhite::OGReqAddWhite(const OGReqAddWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqAddWhite::SharedCtor() {
  _cached_size_ = 0;
  total_on_ = 0;
  total_starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_up_ = GOOGLE_LONGLONG(0);
  total_upjilv_ = 0;
  total_down_ = GOOGLE_LONGLONG(0);
  total_downjilv_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flg_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqAddWhite::~OGReqAddWhite() {
  SharedDtor();
}

void OGReqAddWhite::SharedDtor() {
  if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete total_starttime_;
  }
  if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete total_endtime_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    delete white_;
  }
  if (this != default_instance_) {
  }
}

void OGReqAddWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqAddWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqAddWhite_descriptor_;
}

const OGReqAddWhite& OGReqAddWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqAddWhite* OGReqAddWhite::default_instance_ = NULL;

OGReqAddWhite* OGReqAddWhite::New() const {
  return new OGReqAddWhite;
}

void OGReqAddWhite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_on_ = 0;
    if (has_total_starttime()) {
      if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
        total_starttime_->clear();
      }
    }
    if (has_total_endtime()) {
      if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
        total_endtime_->clear();
      }
    }
    total_up_ = GOOGLE_LONGLONG(0);
    total_upjilv_ = 0;
    total_down_ = GOOGLE_LONGLONG(0);
    total_downjilv_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flg_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_white()) {
      if (white_ != &::google::protobuf::internal::kEmptyString) {
        white_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqAddWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_On = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_on_)));
          set_has_total_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_StartTime;
        break;
      }
      
      // optional string total_StartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_StartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total_starttime().data(), this->total_starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_total_EndTime;
        break;
      }
      
      // optional string total_EndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_EndTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total_endtime().data(), this->total_endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_Up;
        break;
      }
      
      // optional int64 total_Up = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_up_)));
          set_has_total_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_UpJilv;
        break;
      }
      
      // optional int32 total_UpJilv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_UpJilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_upjilv_)));
          set_has_total_upjilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_Down;
        break;
      }
      
      // optional int64 total_Down = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_down_)));
          set_has_total_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_DownJilv;
        break;
      }
      
      // optional int32 total_DownJilv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_DownJilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_downjilv_)));
          set_has_total_downjilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_key;
        break;
      }
      
      // optional string key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_white;
        break;
      }
      
      // optional string white = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->white().data(), this->white().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqAddWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_On = 1;
  if (has_total_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_on(), output);
  }
  
  // optional string total_StartTime = 2;
  if (has_total_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_starttime().data(), this->total_starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->total_starttime(), output);
  }
  
  // optional string total_EndTime = 3;
  if (has_total_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_endtime().data(), this->total_endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->total_endtime(), output);
  }
  
  // optional int64 total_Up = 4;
  if (has_total_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_up(), output);
  }
  
  // optional int32 total_UpJilv = 5;
  if (has_total_upjilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_upjilv(), output);
  }
  
  // optional int64 total_Down = 6;
  if (has_total_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_down(), output);
  }
  
  // optional int32 total_DownJilv = 7;
  if (has_total_downjilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_downjilv(), output);
  }
  
  // optional string roleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rolename(), output);
  }
  
  // optional int32 flg = 9;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->flg(), output);
  }
  
  // optional string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->key(), output);
  }
  
  // optional string white = 11;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->white(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqAddWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_On = 1;
  if (has_total_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_on(), target);
  }
  
  // optional string total_StartTime = 2;
  if (has_total_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_starttime().data(), this->total_starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->total_starttime(), target);
  }
  
  // optional string total_EndTime = 3;
  if (has_total_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_endtime().data(), this->total_endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->total_endtime(), target);
  }
  
  // optional int64 total_Up = 4;
  if (has_total_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_up(), target);
  }
  
  // optional int32 total_UpJilv = 5;
  if (has_total_upjilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_upjilv(), target);
  }
  
  // optional int64 total_Down = 6;
  if (has_total_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_down(), target);
  }
  
  // optional int32 total_DownJilv = 7;
  if (has_total_downjilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_downjilv(), target);
  }
  
  // optional string roleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rolename(), target);
  }
  
  // optional int32 flg = 9;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->flg(), target);
  }
  
  // optional string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key(), target);
  }
  
  // optional string white = 11;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->white(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqAddWhite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_On = 1;
    if (has_total_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_on());
    }
    
    // optional string total_StartTime = 2;
    if (has_total_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_starttime());
    }
    
    // optional string total_EndTime = 3;
    if (has_total_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_endtime());
    }
    
    // optional int64 total_Up = 4;
    if (has_total_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_up());
    }
    
    // optional int32 total_UpJilv = 5;
    if (has_total_upjilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_upjilv());
    }
    
    // optional int64 total_Down = 6;
    if (has_total_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_down());
    }
    
    // optional int32 total_DownJilv = 7;
    if (has_total_downjilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_downjilv());
    }
    
    // optional string roleName = 8;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 flg = 9;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
    // optional string key = 10;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string white = 11;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->white());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqAddWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqAddWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqAddWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqAddWhite::MergeFrom(const OGReqAddWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_on()) {
      set_total_on(from.total_on());
    }
    if (from.has_total_starttime()) {
      set_total_starttime(from.total_starttime());
    }
    if (from.has_total_endtime()) {
      set_total_endtime(from.total_endtime());
    }
    if (from.has_total_up()) {
      set_total_up(from.total_up());
    }
    if (from.has_total_upjilv()) {
      set_total_upjilv(from.total_upjilv());
    }
    if (from.has_total_down()) {
      set_total_down(from.total_down());
    }
    if (from.has_total_downjilv()) {
      set_total_downjilv(from.total_downjilv());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_white()) {
      set_white(from.white());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqAddWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqAddWhite::CopyFrom(const OGReqAddWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqAddWhite::IsInitialized() const {
  
  return true;
}

void OGReqAddWhite::Swap(OGReqAddWhite* other) {
  if (other != this) {
    std::swap(total_on_, other->total_on_);
    std::swap(total_starttime_, other->total_starttime_);
    std::swap(total_endtime_, other->total_endtime_);
    std::swap(total_up_, other->total_up_);
    std::swap(total_upjilv_, other->total_upjilv_);
    std::swap(total_down_, other->total_down_);
    std::swap(total_downjilv_, other->total_downjilv_);
    std::swap(rolename_, other->rolename_);
    std::swap(flg_, other->flg_);
    std::swap(key_, other->key_);
    std::swap(white_, other->white_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqAddWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqAddWhite_descriptor_;
  metadata.reflection = OGReqAddWhite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqWhiteList::kKeyFieldNumber;
const int OGReqWhiteList::kWhiteFieldNumber;
#endif  // !_MSC_VER

OGReqWhiteList::OGReqWhiteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqWhiteList::InitAsDefaultInstance() {
}

OGReqWhiteList::OGReqWhiteList(const OGReqWhiteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqWhiteList::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqWhiteList::~OGReqWhiteList() {
  SharedDtor();
}

void OGReqWhiteList::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    delete white_;
  }
  if (this != default_instance_) {
  }
}

void OGReqWhiteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqWhiteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqWhiteList_descriptor_;
}

const OGReqWhiteList& OGReqWhiteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqWhiteList* OGReqWhiteList::default_instance_ = NULL;

OGReqWhiteList* OGReqWhiteList::New() const {
  return new OGReqWhiteList;
}

void OGReqWhiteList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_white()) {
      if (white_ != &::google::protobuf::internal::kEmptyString) {
        white_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqWhiteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_white;
        break;
      }
      
      // optional string white = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->white().data(), this->white().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqWhiteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string white = 2;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->white(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqWhiteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string white = 2;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->white(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqWhiteList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string white = 2;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->white());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqWhiteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqWhiteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqWhiteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqWhiteList::MergeFrom(const OGReqWhiteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_white()) {
      set_white(from.white());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqWhiteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqWhiteList::CopyFrom(const OGReqWhiteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqWhiteList::IsInitialized() const {
  
  return true;
}

void OGReqWhiteList::Swap(OGReqWhiteList* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(white_, other->white_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqWhiteList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqWhiteList_descriptor_;
  metadata.reflection = OGReqWhiteList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckWhiteList_White::kTotalOnFieldNumber;
const int OGAckWhiteList_White::kTotalStartTimeFieldNumber;
const int OGAckWhiteList_White::kTotalEndTimeFieldNumber;
const int OGAckWhiteList_White::kTotalUpFieldNumber;
const int OGAckWhiteList_White::kTotalUpJilvFieldNumber;
const int OGAckWhiteList_White::kTotalDownFieldNumber;
const int OGAckWhiteList_White::kTotalDownJilvFieldNumber;
const int OGAckWhiteList_White::kRoleNameFieldNumber;
const int OGAckWhiteList_White::kWinDayFieldNumber;
const int OGAckWhiteList_White::kWinMonthFieldNumber;
const int OGAckWhiteList_White::kWinTotalFieldNumber;
#endif  // !_MSC_VER

OGAckWhiteList_White::OGAckWhiteList_White()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckWhiteList_White::InitAsDefaultInstance() {
}

OGAckWhiteList_White::OGAckWhiteList_White(const OGAckWhiteList_White& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckWhiteList_White::SharedCtor() {
  _cached_size_ = 0;
  total_on_ = 0;
  total_starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_up_ = GOOGLE_LONGLONG(0);
  total_upjilv_ = 0;
  total_down_ = GOOGLE_LONGLONG(0);
  total_downjilv_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winday_ = GOOGLE_LONGLONG(0);
  winmonth_ = GOOGLE_LONGLONG(0);
  wintotal_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckWhiteList_White::~OGAckWhiteList_White() {
  SharedDtor();
}

void OGAckWhiteList_White::SharedDtor() {
  if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete total_starttime_;
  }
  if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete total_endtime_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckWhiteList_White::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckWhiteList_White::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckWhiteList_White_descriptor_;
}

const OGAckWhiteList_White& OGAckWhiteList_White::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckWhiteList_White* OGAckWhiteList_White::default_instance_ = NULL;

OGAckWhiteList_White* OGAckWhiteList_White::New() const {
  return new OGAckWhiteList_White;
}

void OGAckWhiteList_White::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_on_ = 0;
    if (has_total_starttime()) {
      if (total_starttime_ != &::google::protobuf::internal::kEmptyString) {
        total_starttime_->clear();
      }
    }
    if (has_total_endtime()) {
      if (total_endtime_ != &::google::protobuf::internal::kEmptyString) {
        total_endtime_->clear();
      }
    }
    total_up_ = GOOGLE_LONGLONG(0);
    total_upjilv_ = 0;
    total_down_ = GOOGLE_LONGLONG(0);
    total_downjilv_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    winday_ = GOOGLE_LONGLONG(0);
    winmonth_ = GOOGLE_LONGLONG(0);
    wintotal_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckWhiteList_White::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_On = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_on_)));
          set_has_total_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_StartTime;
        break;
      }
      
      // optional string total_StartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_StartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total_starttime().data(), this->total_starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_total_EndTime;
        break;
      }
      
      // optional string total_EndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_EndTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->total_endtime().data(), this->total_endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_Up;
        break;
      }
      
      // optional int64 total_Up = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_up_)));
          set_has_total_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_UpJilv;
        break;
      }
      
      // optional int32 total_UpJilv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_UpJilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_upjilv_)));
          set_has_total_upjilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_Down;
        break;
      }
      
      // optional int64 total_Down = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_Down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_down_)));
          set_has_total_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_DownJilv;
        break;
      }
      
      // optional int32 total_DownJilv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_DownJilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_downjilv_)));
          set_has_total_downjilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_winDay;
        break;
      }
      
      // optional int64 winDay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winday_)));
          set_has_winday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winMonth;
        break;
      }
      
      // optional int64 winMonth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winmonth_)));
          set_has_winmonth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winTotal;
        break;
      }
      
      // optional int64 winTotal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wintotal_)));
          set_has_wintotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckWhiteList_White::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total_On = 1;
  if (has_total_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_on(), output);
  }
  
  // optional string total_StartTime = 2;
  if (has_total_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_starttime().data(), this->total_starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->total_starttime(), output);
  }
  
  // optional string total_EndTime = 3;
  if (has_total_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_endtime().data(), this->total_endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->total_endtime(), output);
  }
  
  // optional int64 total_Up = 4;
  if (has_total_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_up(), output);
  }
  
  // optional int32 total_UpJilv = 5;
  if (has_total_upjilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_upjilv(), output);
  }
  
  // optional int64 total_Down = 6;
  if (has_total_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_down(), output);
  }
  
  // optional int32 total_DownJilv = 7;
  if (has_total_downjilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_downjilv(), output);
  }
  
  // optional string roleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rolename(), output);
  }
  
  // optional int64 winDay = 9;
  if (has_winday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->winday(), output);
  }
  
  // optional int64 winMonth = 10;
  if (has_winmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->winmonth(), output);
  }
  
  // optional int64 winTotal = 11;
  if (has_wintotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->wintotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckWhiteList_White::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total_On = 1;
  if (has_total_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_on(), target);
  }
  
  // optional string total_StartTime = 2;
  if (has_total_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_starttime().data(), this->total_starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->total_starttime(), target);
  }
  
  // optional string total_EndTime = 3;
  if (has_total_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->total_endtime().data(), this->total_endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->total_endtime(), target);
  }
  
  // optional int64 total_Up = 4;
  if (has_total_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_up(), target);
  }
  
  // optional int32 total_UpJilv = 5;
  if (has_total_upjilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_upjilv(), target);
  }
  
  // optional int64 total_Down = 6;
  if (has_total_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_down(), target);
  }
  
  // optional int32 total_DownJilv = 7;
  if (has_total_downjilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_downjilv(), target);
  }
  
  // optional string roleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rolename(), target);
  }
  
  // optional int64 winDay = 9;
  if (has_winday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->winday(), target);
  }
  
  // optional int64 winMonth = 10;
  if (has_winmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->winmonth(), target);
  }
  
  // optional int64 winTotal = 11;
  if (has_wintotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->wintotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckWhiteList_White::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_On = 1;
    if (has_total_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_on());
    }
    
    // optional string total_StartTime = 2;
    if (has_total_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_starttime());
    }
    
    // optional string total_EndTime = 3;
    if (has_total_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total_endtime());
    }
    
    // optional int64 total_Up = 4;
    if (has_total_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_up());
    }
    
    // optional int32 total_UpJilv = 5;
    if (has_total_upjilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_upjilv());
    }
    
    // optional int64 total_Down = 6;
    if (has_total_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_down());
    }
    
    // optional int32 total_DownJilv = 7;
    if (has_total_downjilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_downjilv());
    }
    
    // optional string roleName = 8;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 winDay = 9;
    if (has_winday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winday());
    }
    
    // optional int64 winMonth = 10;
    if (has_winmonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winmonth());
    }
    
    // optional int64 winTotal = 11;
    if (has_wintotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wintotal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckWhiteList_White::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckWhiteList_White* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckWhiteList_White*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckWhiteList_White::MergeFrom(const OGAckWhiteList_White& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_on()) {
      set_total_on(from.total_on());
    }
    if (from.has_total_starttime()) {
      set_total_starttime(from.total_starttime());
    }
    if (from.has_total_endtime()) {
      set_total_endtime(from.total_endtime());
    }
    if (from.has_total_up()) {
      set_total_up(from.total_up());
    }
    if (from.has_total_upjilv()) {
      set_total_upjilv(from.total_upjilv());
    }
    if (from.has_total_down()) {
      set_total_down(from.total_down());
    }
    if (from.has_total_downjilv()) {
      set_total_downjilv(from.total_downjilv());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winday()) {
      set_winday(from.winday());
    }
    if (from.has_winmonth()) {
      set_winmonth(from.winmonth());
    }
    if (from.has_wintotal()) {
      set_wintotal(from.wintotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckWhiteList_White::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckWhiteList_White::CopyFrom(const OGAckWhiteList_White& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckWhiteList_White::IsInitialized() const {
  
  return true;
}

void OGAckWhiteList_White::Swap(OGAckWhiteList_White* other) {
  if (other != this) {
    std::swap(total_on_, other->total_on_);
    std::swap(total_starttime_, other->total_starttime_);
    std::swap(total_endtime_, other->total_endtime_);
    std::swap(total_up_, other->total_up_);
    std::swap(total_upjilv_, other->total_upjilv_);
    std::swap(total_down_, other->total_down_);
    std::swap(total_downjilv_, other->total_downjilv_);
    std::swap(rolename_, other->rolename_);
    std::swap(winday_, other->winday_);
    std::swap(winmonth_, other->winmonth_);
    std::swap(wintotal_, other->wintotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckWhiteList_White::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckWhiteList_White_descriptor_;
  metadata.reflection = OGAckWhiteList_White_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckWhiteList::kWhiteListFieldNumber;
#endif  // !_MSC_VER

OGAckWhiteList::OGAckWhiteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckWhiteList::InitAsDefaultInstance() {
}

OGAckWhiteList::OGAckWhiteList(const OGAckWhiteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckWhiteList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckWhiteList::~OGAckWhiteList() {
  SharedDtor();
}

void OGAckWhiteList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckWhiteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckWhiteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckWhiteList_descriptor_;
}

const OGAckWhiteList& OGAckWhiteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckWhiteList* OGAckWhiteList::default_instance_ = NULL;

OGAckWhiteList* OGAckWhiteList::New() const {
  return new OGAckWhiteList;
}

void OGAckWhiteList::Clear() {
  whitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckWhiteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WhiteList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whitelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_WhiteList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckWhiteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->whitelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckWhiteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
  for (int i = 0; i < this->whitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->whitelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckWhiteList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckWhiteList.White WhiteList = 1;
  total_size += 1 * this->whitelist_size();
  for (int i = 0; i < this->whitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whitelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckWhiteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckWhiteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckWhiteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckWhiteList::MergeFrom(const OGAckWhiteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  whitelist_.MergeFrom(from.whitelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckWhiteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckWhiteList::CopyFrom(const OGAckWhiteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckWhiteList::IsInitialized() const {
  
  return true;
}

void OGAckWhiteList::Swap(OGAckWhiteList* other) {
  if (other != this) {
    whitelist_.Swap(&other->whitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckWhiteList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckWhiteList_descriptor_;
  metadata.reflection = OGAckWhiteList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqDelWhite::kRoleNameFieldNumber;
const int OGReqDelWhite::kFlgFieldNumber;
const int OGReqDelWhite::kKeyFieldNumber;
const int OGReqDelWhite::kWhiteFieldNumber;
#endif  // !_MSC_VER

OGReqDelWhite::OGReqDelWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqDelWhite::InitAsDefaultInstance() {
}

OGReqDelWhite::OGReqDelWhite(const OGReqDelWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqDelWhite::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flg_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqDelWhite::~OGReqDelWhite() {
  SharedDtor();
}

void OGReqDelWhite::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    delete white_;
  }
  if (this != default_instance_) {
  }
}

void OGReqDelWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqDelWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDelWhite_descriptor_;
}

const OGReqDelWhite& OGReqDelWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqDelWhite* OGReqDelWhite::default_instance_ = NULL;

OGReqDelWhite* OGReqDelWhite::New() const {
  return new OGReqDelWhite;
}

void OGReqDelWhite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    flg_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_white()) {
      if (white_ != &::google::protobuf::internal::kEmptyString) {
        white_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqDelWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_white;
        break;
      }
      
      // optional string white = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->white().data(), this->white().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqDelWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional int32 flg = 2;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flg(), output);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }
  
  // optional string white = 4;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->white(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqDelWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional int32 flg = 2;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flg(), target);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }
  
  // optional string white = 4;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->white(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqDelWhite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 flg = 2;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string white = 4;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->white());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqDelWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqDelWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqDelWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqDelWhite::MergeFrom(const OGReqDelWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_white()) {
      set_white(from.white());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqDelWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqDelWhite::CopyFrom(const OGReqDelWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqDelWhite::IsInitialized() const {
  
  return true;
}

void OGReqDelWhite::Swap(OGReqDelWhite* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(flg_, other->flg_);
    std::swap(key_, other->key_);
    std::swap(white_, other->white_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqDelWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqDelWhite_descriptor_;
  metadata.reflection = OGReqDelWhite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqSelectWhite::kRoleNameFieldNumber;
const int OGReqSelectWhite::kKeyFieldNumber;
const int OGReqSelectWhite::kWhiteFieldNumber;
#endif  // !_MSC_VER

OGReqSelectWhite::OGReqSelectWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqSelectWhite::InitAsDefaultInstance() {
}

OGReqSelectWhite::OGReqSelectWhite(const OGReqSelectWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqSelectWhite::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqSelectWhite::~OGReqSelectWhite() {
  SharedDtor();
}

void OGReqSelectWhite::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    delete white_;
  }
  if (this != default_instance_) {
  }
}

void OGReqSelectWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqSelectWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqSelectWhite_descriptor_;
}

const OGReqSelectWhite& OGReqSelectWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqSelectWhite* OGReqSelectWhite::default_instance_ = NULL;

OGReqSelectWhite* OGReqSelectWhite::New() const {
  return new OGReqSelectWhite;
}

void OGReqSelectWhite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_white()) {
      if (white_ != &::google::protobuf::internal::kEmptyString) {
        white_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqSelectWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_white;
        break;
      }
      
      // optional string white = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->white().data(), this->white().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqSelectWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional string white = 3;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->white(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqSelectWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional string white = 3;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->white(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqSelectWhite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string white = 3;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->white());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqSelectWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqSelectWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqSelectWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqSelectWhite::MergeFrom(const OGReqSelectWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_white()) {
      set_white(from.white());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqSelectWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqSelectWhite::CopyFrom(const OGReqSelectWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqSelectWhite::IsInitialized() const {
  
  return true;
}

void OGReqSelectWhite::Swap(OGReqSelectWhite* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(key_, other->key_);
    std::swap(white_, other->white_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqSelectWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqSelectWhite_descriptor_;
  metadata.reflection = OGReqSelectWhite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckSelectWhite::kResultFieldNumber;
const int OGAckSelectWhite::kRoleNameFieldNumber;
const int OGAckSelectWhite::kWinTotalFieldNumber;
const int OGAckSelectWhite::kWhiteFieldNumber;
#endif  // !_MSC_VER

OGAckSelectWhite::OGAckSelectWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckSelectWhite::InitAsDefaultInstance() {
}

OGAckSelectWhite::OGAckSelectWhite(const OGAckSelectWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckSelectWhite::SharedCtor() {
  _cached_size_ = 0;
  result_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wintotal_ = GOOGLE_LONGLONG(0);
  white_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckSelectWhite::~OGAckSelectWhite() {
  SharedDtor();
}

void OGAckSelectWhite::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (white_ != &::google::protobuf::internal::kEmptyString) {
    delete white_;
  }
  if (this != default_instance_) {
  }
}

void OGAckSelectWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckSelectWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckSelectWhite_descriptor_;
}

const OGAckSelectWhite& OGAckSelectWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckSelectWhite* OGAckSelectWhite::default_instance_ = NULL;

OGAckSelectWhite* OGAckSelectWhite::New() const {
  return new OGAckSelectWhite;
}

void OGAckSelectWhite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    wintotal_ = GOOGLE_LONGLONG(0);
    if (has_white()) {
      if (white_ != &::google::protobuf::internal::kEmptyString) {
        white_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckSelectWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winTotal;
        break;
      }
      
      // optional int64 winTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wintotal_)));
          set_has_wintotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_white;
        break;
      }
      
      // optional string white = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_white()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->white().data(), this->white().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckSelectWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->result(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional int64 winTotal = 3;
  if (has_wintotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wintotal(), output);
  }
  
  // optional string white = 4;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->white(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckSelectWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->result(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional int64 winTotal = 3;
  if (has_wintotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wintotal(), target);
  }
  
  // optional string white = 4;
  if (has_white()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->white().data(), this->white().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->white(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckSelectWhite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 winTotal = 3;
    if (has_wintotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wintotal());
    }
    
    // optional string white = 4;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->white());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckSelectWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckSelectWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckSelectWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckSelectWhite::MergeFrom(const OGAckSelectWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_wintotal()) {
      set_wintotal(from.wintotal());
    }
    if (from.has_white()) {
      set_white(from.white());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckSelectWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckSelectWhite::CopyFrom(const OGAckSelectWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckSelectWhite::IsInitialized() const {
  
  return true;
}

void OGAckSelectWhite::Swap(OGAckSelectWhite* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rolename_, other->rolename_);
    std::swap(wintotal_, other->wintotal_);
    std::swap(white_, other->white_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckSelectWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckSelectWhite_descriptor_;
  metadata.reflection = OGAckSelectWhite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPet::kPetNameFieldNumber;
const int OGAckPet::kPinzhiFieldNumber;
const int OGAckPet::kBloodFieldNumber;
const int OGAckPet::kAttackFieldNumber;
const int OGAckPet::kAwardFieldNumber;
#endif  // !_MSC_VER

OGAckPet::OGAckPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPet::InitAsDefaultInstance() {
}

OGAckPet::OGAckPet(const OGAckPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPet::SharedCtor() {
  _cached_size_ = 0;
  petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinzhi_ = 0;
  blood_ = 0;
  attack_ = 0;
  award_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPet::~OGAckPet() {
  SharedDtor();
}

void OGAckPet::SharedDtor() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    delete petname_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPet_descriptor_;
}

const OGAckPet& OGAckPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPet* OGAckPet::default_instance_ = NULL;

OGAckPet* OGAckPet::New() const {
  return new OGAckPet;
}

void OGAckPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_petname()) {
      if (petname_ != &::google::protobuf::internal::kEmptyString) {
        petname_->clear();
      }
    }
    pinzhi_ = 0;
    blood_ = 0;
    attack_ = 0;
    award_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string petName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->petname().data(), this->petname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pinzhi;
        break;
      }
      
      // optional int32 pinzhi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pinzhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pinzhi_)));
          set_has_pinzhi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack;
        break;
      }
      
      // optional int32 attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_award;
        break;
      }
      
      // optional int32 award = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string petName = 1;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->petname(), output);
  }
  
  // optional int32 pinzhi = 2;
  if (has_pinzhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pinzhi(), output);
  }
  
  // optional int32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blood(), output);
  }
  
  // optional int32 attack = 4;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack(), output);
  }
  
  // optional int32 award = 5;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->award(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string petName = 1;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->petname(), target);
  }
  
  // optional int32 pinzhi = 2;
  if (has_pinzhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pinzhi(), target);
  }
  
  // optional int32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blood(), target);
  }
  
  // optional int32 attack = 4;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack(), target);
  }
  
  // optional int32 award = 5;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->award(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string petName = 1;
    if (has_petname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petname());
    }
    
    // optional int32 pinzhi = 2;
    if (has_pinzhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pinzhi());
    }
    
    // optional int32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 attack = 4;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }
    
    // optional int32 award = 5;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPet::MergeFrom(const OGAckPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petname()) {
      set_petname(from.petname());
    }
    if (from.has_pinzhi()) {
      set_pinzhi(from.pinzhi());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPet::CopyFrom(const OGAckPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPet::IsInitialized() const {
  
  return true;
}

void OGAckPet::Swap(OGAckPet* other) {
  if (other != this) {
    std::swap(petname_, other->petname_);
    std::swap(pinzhi_, other->pinzhi_);
    std::swap(blood_, other->blood_);
    std::swap(attack_, other->attack_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPet_descriptor_;
  metadata.reflection = OGAckPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetList::OGReqPetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetList::InitAsDefaultInstance() {
}

OGReqPetList::OGReqPetList(const OGReqPetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetList::~OGReqPetList() {
  SharedDtor();
}

void OGReqPetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetList_descriptor_;
}

const OGReqPetList& OGReqPetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetList* OGReqPetList::default_instance_ = NULL;

OGReqPetList* OGReqPetList::New() const {
  return new OGReqPetList;
}

void OGReqPetList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetList::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetList::MergeFrom(const OGReqPetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetList::CopyFrom(const OGReqPetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetList::IsInitialized() const {
  
  return true;
}

void OGReqPetList::Swap(OGReqPetList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetList_descriptor_;
  metadata.reflection = OGReqPetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetList_Pet::kPetNameFieldNumber;
const int OGAckPetList_Pet::kPinzhiFieldNumber;
const int OGAckPetList_Pet::kBloodFieldNumber;
const int OGAckPetList_Pet::kBloodMinFieldNumber;
const int OGAckPetList_Pet::kBloodMaxFieldNumber;
const int OGAckPetList_Pet::kBloodPlusFieldNumber;
const int OGAckPetList_Pet::kAttackFieldNumber;
const int OGAckPetList_Pet::kAttackMinFieldNumber;
const int OGAckPetList_Pet::kAttackMaxFieldNumber;
const int OGAckPetList_Pet::kAttackPlusFieldNumber;
const int OGAckPetList_Pet::kAwardFieldNumber;
const int OGAckPetList_Pet::kAwardMinFieldNumber;
const int OGAckPetList_Pet::kAwardMaxFieldNumber;
const int OGAckPetList_Pet::kAwardPlusFieldNumber;
const int OGAckPetList_Pet::kLevelFieldNumber;
const int OGAckPetList_Pet::kExpFieldNumber;
const int OGAckPetList_Pet::kReqexpFieldNumber;
const int OGAckPetList_Pet::kPetIdFieldNumber;
const int OGAckPetList_Pet::kStatusFieldNumber;
const int OGAckPetList_Pet::kPetPicFieldNumber;
const int OGAckPetList_Pet::kMaxLevFieldNumber;
const int OGAckPetList_Pet::kCsvidFieldNumber;
#endif  // !_MSC_VER

OGAckPetList_Pet::OGAckPetList_Pet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetList_Pet::InitAsDefaultInstance() {
}

OGAckPetList_Pet::OGAckPetList_Pet(const OGAckPetList_Pet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetList_Pet::SharedCtor() {
  _cached_size_ = 0;
  petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinzhi_ = 0;
  blood_ = 0;
  bloodmin_ = 0;
  bloodmax_ = 0;
  bloodplus_ = 0;
  attack_ = 0;
  attackmin_ = 0;
  attackmax_ = 0;
  attackplus_ = 0;
  award_ = 0;
  awardmin_ = 0;
  awardmax_ = 0;
  awardplus_ = 0;
  level_ = 0;
  exp_ = 0;
  reqexp_ = 0;
  petid_ = 0;
  status_ = 0;
  petpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxlev_ = 0;
  csvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetList_Pet::~OGAckPetList_Pet() {
  SharedDtor();
}

void OGAckPetList_Pet::SharedDtor() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    delete petname_;
  }
  if (petpic_ != &::google::protobuf::internal::kEmptyString) {
    delete petpic_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPetList_Pet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetList_Pet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetList_Pet_descriptor_;
}

const OGAckPetList_Pet& OGAckPetList_Pet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetList_Pet* OGAckPetList_Pet::default_instance_ = NULL;

OGAckPetList_Pet* OGAckPetList_Pet::New() const {
  return new OGAckPetList_Pet;
}

void OGAckPetList_Pet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_petname()) {
      if (petname_ != &::google::protobuf::internal::kEmptyString) {
        petname_->clear();
      }
    }
    pinzhi_ = 0;
    blood_ = 0;
    bloodmin_ = 0;
    bloodmax_ = 0;
    bloodplus_ = 0;
    attack_ = 0;
    attackmin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attackmax_ = 0;
    attackplus_ = 0;
    award_ = 0;
    awardmin_ = 0;
    awardmax_ = 0;
    awardplus_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reqexp_ = 0;
    petid_ = 0;
    status_ = 0;
    if (has_petpic()) {
      if (petpic_ != &::google::protobuf::internal::kEmptyString) {
        petpic_->clear();
      }
    }
    maxlev_ = 0;
    csvid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetList_Pet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string petName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->petname().data(), this->petname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pinzhi;
        break;
      }
      
      // optional int32 pinzhi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pinzhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pinzhi_)));
          set_has_pinzhi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bloodMin;
        break;
      }
      
      // optional int32 bloodMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodmin_)));
          set_has_bloodmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bloodMax;
        break;
      }
      
      // optional int32 bloodMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodmax_)));
          set_has_bloodmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bloodPlus;
        break;
      }
      
      // optional int32 bloodPlus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodplus_)));
          set_has_bloodplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack;
        break;
      }
      
      // optional int32 attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attackMin;
        break;
      }
      
      // optional int32 attackMin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackmin_)));
          set_has_attackmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attackMax;
        break;
      }
      
      // optional int32 attackMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackmax_)));
          set_has_attackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attackPlus;
        break;
      }
      
      // optional int32 attackPlus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackplus_)));
          set_has_attackplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_award;
        break;
      }
      
      // optional int32 award = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_awardMin;
        break;
      }
      
      // optional int32 awardMin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardmin_)));
          set_has_awardmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_awardMax;
        break;
      }
      
      // optional int32 awardMax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardmax_)));
          set_has_awardmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_awardPlus;
        break;
      }
      
      // optional int32 awardPlus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardplus_)));
          set_has_awardplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }
      
      // optional int32 level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_reqexp;
        break;
      }
      
      // optional int32 reqexp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqexp_)));
          set_has_reqexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_petId;
        break;
      }
      
      // optional int32 petId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_status;
        break;
      }
      
      // optional int32 status = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_petPic;
        break;
      }
      
      // optional string petPic = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petpic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->petpic().data(), this->petpic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_maxLev;
        break;
      }
      
      // optional int32 maxLev = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlev_)));
          set_has_maxlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_csvid;
        break;
      }
      
      // optional int32 csvid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_csvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csvid_)));
          set_has_csvid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetList_Pet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string petName = 1;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->petname(), output);
  }
  
  // optional int32 pinzhi = 2;
  if (has_pinzhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pinzhi(), output);
  }
  
  // optional int32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blood(), output);
  }
  
  // optional int32 bloodMin = 4;
  if (has_bloodmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bloodmin(), output);
  }
  
  // optional int32 bloodMax = 5;
  if (has_bloodmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bloodmax(), output);
  }
  
  // optional int32 bloodPlus = 6;
  if (has_bloodplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bloodplus(), output);
  }
  
  // optional int32 attack = 7;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack(), output);
  }
  
  // optional int32 attackMin = 8;
  if (has_attackmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attackmin(), output);
  }
  
  // optional int32 attackMax = 9;
  if (has_attackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attackmax(), output);
  }
  
  // optional int32 attackPlus = 10;
  if (has_attackplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attackplus(), output);
  }
  
  // optional int32 award = 11;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->award(), output);
  }
  
  // optional int32 awardMin = 12;
  if (has_awardmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->awardmin(), output);
  }
  
  // optional int32 awardMax = 13;
  if (has_awardmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->awardmax(), output);
  }
  
  // optional int32 awardPlus = 14;
  if (has_awardplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->awardplus(), output);
  }
  
  // optional int32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->level(), output);
  }
  
  // optional int32 exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exp(), output);
  }
  
  // optional int32 reqexp = 17;
  if (has_reqexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reqexp(), output);
  }
  
  // optional int32 petId = 18;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->petid(), output);
  }
  
  // optional int32 status = 19;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->status(), output);
  }
  
  // optional string petPic = 20;
  if (has_petpic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petpic().data(), this->petpic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->petpic(), output);
  }
  
  // optional int32 maxLev = 21;
  if (has_maxlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->maxlev(), output);
  }
  
  // optional int32 csvid = 22;
  if (has_csvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->csvid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetList_Pet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string petName = 1;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->petname(), target);
  }
  
  // optional int32 pinzhi = 2;
  if (has_pinzhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pinzhi(), target);
  }
  
  // optional int32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blood(), target);
  }
  
  // optional int32 bloodMin = 4;
  if (has_bloodmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bloodmin(), target);
  }
  
  // optional int32 bloodMax = 5;
  if (has_bloodmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bloodmax(), target);
  }
  
  // optional int32 bloodPlus = 6;
  if (has_bloodplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bloodplus(), target);
  }
  
  // optional int32 attack = 7;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attack(), target);
  }
  
  // optional int32 attackMin = 8;
  if (has_attackmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attackmin(), target);
  }
  
  // optional int32 attackMax = 9;
  if (has_attackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attackmax(), target);
  }
  
  // optional int32 attackPlus = 10;
  if (has_attackplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attackplus(), target);
  }
  
  // optional int32 award = 11;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->award(), target);
  }
  
  // optional int32 awardMin = 12;
  if (has_awardmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->awardmin(), target);
  }
  
  // optional int32 awardMax = 13;
  if (has_awardmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->awardmax(), target);
  }
  
  // optional int32 awardPlus = 14;
  if (has_awardplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->awardplus(), target);
  }
  
  // optional int32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->level(), target);
  }
  
  // optional int32 exp = 16;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exp(), target);
  }
  
  // optional int32 reqexp = 17;
  if (has_reqexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->reqexp(), target);
  }
  
  // optional int32 petId = 18;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->petid(), target);
  }
  
  // optional int32 status = 19;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->status(), target);
  }
  
  // optional string petPic = 20;
  if (has_petpic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petpic().data(), this->petpic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->petpic(), target);
  }
  
  // optional int32 maxLev = 21;
  if (has_maxlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->maxlev(), target);
  }
  
  // optional int32 csvid = 22;
  if (has_csvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->csvid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetList_Pet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string petName = 1;
    if (has_petname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petname());
    }
    
    // optional int32 pinzhi = 2;
    if (has_pinzhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pinzhi());
    }
    
    // optional int32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 bloodMin = 4;
    if (has_bloodmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodmin());
    }
    
    // optional int32 bloodMax = 5;
    if (has_bloodmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodmax());
    }
    
    // optional int32 bloodPlus = 6;
    if (has_bloodplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodplus());
    }
    
    // optional int32 attack = 7;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }
    
    // optional int32 attackMin = 8;
    if (has_attackmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackmin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 attackMax = 9;
    if (has_attackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackmax());
    }
    
    // optional int32 attackPlus = 10;
    if (has_attackplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackplus());
    }
    
    // optional int32 award = 11;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award());
    }
    
    // optional int32 awardMin = 12;
    if (has_awardmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardmin());
    }
    
    // optional int32 awardMax = 13;
    if (has_awardmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardmax());
    }
    
    // optional int32 awardPlus = 14;
    if (has_awardplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardplus());
    }
    
    // optional int32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 16;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 reqexp = 17;
    if (has_reqexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqexp());
    }
    
    // optional int32 petId = 18;
    if (has_petid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
    // optional int32 status = 19;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string petPic = 20;
    if (has_petpic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petpic());
    }
    
    // optional int32 maxLev = 21;
    if (has_maxlev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlev());
    }
    
    // optional int32 csvid = 22;
    if (has_csvid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csvid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetList_Pet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetList_Pet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetList_Pet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetList_Pet::MergeFrom(const OGAckPetList_Pet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petname()) {
      set_petname(from.petname());
    }
    if (from.has_pinzhi()) {
      set_pinzhi(from.pinzhi());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_bloodmin()) {
      set_bloodmin(from.bloodmin());
    }
    if (from.has_bloodmax()) {
      set_bloodmax(from.bloodmax());
    }
    if (from.has_bloodplus()) {
      set_bloodplus(from.bloodplus());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_attackmin()) {
      set_attackmin(from.attackmin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attackmax()) {
      set_attackmax(from.attackmax());
    }
    if (from.has_attackplus()) {
      set_attackplus(from.attackplus());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_awardmin()) {
      set_awardmin(from.awardmin());
    }
    if (from.has_awardmax()) {
      set_awardmax(from.awardmax());
    }
    if (from.has_awardplus()) {
      set_awardplus(from.awardplus());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reqexp()) {
      set_reqexp(from.reqexp());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_petpic()) {
      set_petpic(from.petpic());
    }
    if (from.has_maxlev()) {
      set_maxlev(from.maxlev());
    }
    if (from.has_csvid()) {
      set_csvid(from.csvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetList_Pet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetList_Pet::CopyFrom(const OGAckPetList_Pet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetList_Pet::IsInitialized() const {
  
  return true;
}

void OGAckPetList_Pet::Swap(OGAckPetList_Pet* other) {
  if (other != this) {
    std::swap(petname_, other->petname_);
    std::swap(pinzhi_, other->pinzhi_);
    std::swap(blood_, other->blood_);
    std::swap(bloodmin_, other->bloodmin_);
    std::swap(bloodmax_, other->bloodmax_);
    std::swap(bloodplus_, other->bloodplus_);
    std::swap(attack_, other->attack_);
    std::swap(attackmin_, other->attackmin_);
    std::swap(attackmax_, other->attackmax_);
    std::swap(attackplus_, other->attackplus_);
    std::swap(award_, other->award_);
    std::swap(awardmin_, other->awardmin_);
    std::swap(awardmax_, other->awardmax_);
    std::swap(awardplus_, other->awardplus_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(reqexp_, other->reqexp_);
    std::swap(petid_, other->petid_);
    std::swap(status_, other->status_);
    std::swap(petpic_, other->petpic_);
    std::swap(maxlev_, other->maxlev_);
    std::swap(csvid_, other->csvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetList_Pet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetList_Pet_descriptor_;
  metadata.reflection = OGAckPetList_Pet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckPetList::kPetListFieldNumber;
#endif  // !_MSC_VER

OGAckPetList::OGAckPetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetList::InitAsDefaultInstance() {
}

OGAckPetList::OGAckPetList(const OGAckPetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetList::~OGAckPetList() {
  SharedDtor();
}

void OGAckPetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetList_descriptor_;
}

const OGAckPetList& OGAckPetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetList* OGAckPetList::default_instance_ = NULL;

OGAckPetList* OGAckPetList::New() const {
  return new OGAckPetList;
}

void OGAckPetList::Clear() {
  petlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_petList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
  for (int i = 0; i < this->petlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
  for (int i = 0; i < this->petlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckPetList.Pet petList = 1;
  total_size += 1 * this->petlist_size();
  for (int i = 0; i < this->petlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetList::MergeFrom(const OGAckPetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  petlist_.MergeFrom(from.petlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetList::CopyFrom(const OGAckPetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetList::IsInitialized() const {
  
  return true;
}

void OGAckPetList::Swap(OGAckPetList* other) {
  if (other != this) {
    petlist_.Swap(&other->petlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetList_descriptor_;
  metadata.reflection = OGAckPetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqPetReSet::kPetIdFieldNumber;
#endif  // !_MSC_VER

OGReqPetReSet::OGReqPetReSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetReSet::InitAsDefaultInstance() {
}

OGReqPetReSet::OGReqPetReSet(const OGReqPetReSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetReSet::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetReSet::~OGReqPetReSet() {
  SharedDtor();
}

void OGReqPetReSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetReSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetReSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetReSet_descriptor_;
}

const OGReqPetReSet& OGReqPetReSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetReSet* OGReqPetReSet::default_instance_ = NULL;

OGReqPetReSet* OGReqPetReSet::New() const {
  return new OGReqPetReSet;
}

void OGReqPetReSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetReSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqPetReSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetReSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetReSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petId = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetReSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetReSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetReSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetReSet::MergeFrom(const OGReqPetReSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetReSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetReSet::CopyFrom(const OGReqPetReSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetReSet::IsInitialized() const {
  
  return true;
}

void OGReqPetReSet::Swap(OGReqPetReSet* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetReSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetReSet_descriptor_;
  metadata.reflection = OGReqPetReSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqPetJoinFight::kPetIdFieldNumber;
#endif  // !_MSC_VER

OGReqPetJoinFight::OGReqPetJoinFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetJoinFight::InitAsDefaultInstance() {
}

OGReqPetJoinFight::OGReqPetJoinFight(const OGReqPetJoinFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetJoinFight::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetJoinFight::~OGReqPetJoinFight() {
  SharedDtor();
}

void OGReqPetJoinFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetJoinFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetJoinFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetJoinFight_descriptor_;
}

const OGReqPetJoinFight& OGReqPetJoinFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetJoinFight* OGReqPetJoinFight::default_instance_ = NULL;

OGReqPetJoinFight* OGReqPetJoinFight::New() const {
  return new OGReqPetJoinFight;
}

void OGReqPetJoinFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetJoinFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqPetJoinFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetJoinFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetJoinFight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petId = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetJoinFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetJoinFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetJoinFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetJoinFight::MergeFrom(const OGReqPetJoinFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetJoinFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetJoinFight::CopyFrom(const OGReqPetJoinFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetJoinFight::IsInitialized() const {
  
  return true;
}

void OGReqPetJoinFight::Swap(OGReqPetJoinFight* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetJoinFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetJoinFight_descriptor_;
  metadata.reflection = OGReqPetJoinFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqPetChange::kPetIdFieldNumber;
#endif  // !_MSC_VER

OGReqPetChange::OGReqPetChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetChange::InitAsDefaultInstance() {
}

OGReqPetChange::OGReqPetChange(const OGReqPetChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetChange::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetChange::~OGReqPetChange() {
  SharedDtor();
}

void OGReqPetChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetChange_descriptor_;
}

const OGReqPetChange& OGReqPetChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetChange* OGReqPetChange::default_instance_ = NULL;

OGReqPetChange* OGReqPetChange::New() const {
  return new OGReqPetChange;
}

void OGReqPetChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqPetChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petId = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetChange::MergeFrom(const OGReqPetChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetChange::CopyFrom(const OGReqPetChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetChange::IsInitialized() const {
  
  return true;
}

void OGReqPetChange::Swap(OGReqPetChange* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetChange_descriptor_;
  metadata.reflection = OGReqPetChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetChange::kItemNameFieldNumber;
const int OGAckPetChange::kItemNumFieldNumber;
const int OGAckPetChange::kTipFieldNumber;
const int OGAckPetChange::kPicFieldNumber;
#endif  // !_MSC_VER

OGAckPetChange::OGAckPetChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetChange::InitAsDefaultInstance() {
}

OGAckPetChange::OGAckPetChange(const OGAckPetChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetChange::SharedCtor() {
  _cached_size_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemnum_ = 0;
  tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetChange::~OGAckPetChange() {
  SharedDtor();
}

void OGAckPetChange::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    delete tip_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPetChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetChange_descriptor_;
}

const OGAckPetChange& OGAckPetChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetChange* OGAckPetChange::default_instance_ = NULL;

OGAckPetChange* OGAckPetChange::New() const {
  return new OGAckPetChange;
}

void OGAckPetChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    itemnum_ = 0;
    if (has_tip()) {
      if (tip_ != &::google::protobuf::internal::kEmptyString) {
        tip_->clear();
      }
    }
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string itemName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tip;
        break;
      }
      
      // optional string tip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tip().data(), this->tip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pic;
        break;
      }
      
      // optional string pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string itemName = 1;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->itemname(), output);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }
  
  // optional string tip = 3;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tip(), output);
  }
  
  // optional string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string itemName = 1;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->itemname(), target);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional string tip = 3;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tip(), target);
  }
  
  // optional string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string itemName = 1;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }
    
    // optional int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional string tip = 3;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip());
    }
    
    // optional string pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetChange::MergeFrom(const OGAckPetChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_tip()) {
      set_tip(from.tip());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetChange::CopyFrom(const OGAckPetChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetChange::IsInitialized() const {
  
  return true;
}

void OGAckPetChange::Swap(OGAckPetChange* other) {
  if (other != this) {
    std::swap(itemname_, other->itemname_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(tip_, other->tip_);
    std::swap(pic_, other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetChange_descriptor_;
  metadata.reflection = OGAckPetChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqItemChange::kDebrisItemIdFieldNumber;
const int OGReqItemChange::kEvolveIdFieldNumber;
#endif  // !_MSC_VER

OGReqItemChange::OGReqItemChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqItemChange::InitAsDefaultInstance() {
}

OGReqItemChange::OGReqItemChange(const OGReqItemChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqItemChange::SharedCtor() {
  _cached_size_ = 0;
  debrisitemid_ = 0;
  evolveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqItemChange::~OGReqItemChange() {
  SharedDtor();
}

void OGReqItemChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqItemChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqItemChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqItemChange_descriptor_;
}

const OGReqItemChange& OGReqItemChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqItemChange* OGReqItemChange::default_instance_ = NULL;

OGReqItemChange* OGReqItemChange::New() const {
  return new OGReqItemChange;
}

void OGReqItemChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debrisitemid_ = 0;
    evolveid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqItemChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 debrisItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debrisitemid_)));
          set_has_debrisitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_evolveId;
        break;
      }
      
      // optional int32 evolveId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolveid_)));
          set_has_evolveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqItemChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 debrisItemId = 1;
  if (has_debrisitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->debrisitemid(), output);
  }
  
  // optional int32 evolveId = 2;
  if (has_evolveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->evolveid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqItemChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 debrisItemId = 1;
  if (has_debrisitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->debrisitemid(), target);
  }
  
  // optional int32 evolveId = 2;
  if (has_evolveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->evolveid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqItemChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 debrisItemId = 1;
    if (has_debrisitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debrisitemid());
    }
    
    // optional int32 evolveId = 2;
    if (has_evolveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolveid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqItemChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqItemChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqItemChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqItemChange::MergeFrom(const OGReqItemChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debrisitemid()) {
      set_debrisitemid(from.debrisitemid());
    }
    if (from.has_evolveid()) {
      set_evolveid(from.evolveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqItemChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqItemChange::CopyFrom(const OGReqItemChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqItemChange::IsInitialized() const {
  
  return true;
}

void OGReqItemChange::Swap(OGReqItemChange* other) {
  if (other != this) {
    std::swap(debrisitemid_, other->debrisitemid_);
    std::swap(evolveid_, other->evolveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqItemChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqItemChange_descriptor_;
  metadata.reflection = OGReqItemChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqItemChangeData::OGReqItemChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqItemChangeData::InitAsDefaultInstance() {
}

OGReqItemChangeData::OGReqItemChangeData(const OGReqItemChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqItemChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqItemChangeData::~OGReqItemChangeData() {
  SharedDtor();
}

void OGReqItemChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqItemChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqItemChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqItemChangeData_descriptor_;
}

const OGReqItemChangeData& OGReqItemChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqItemChangeData* OGReqItemChangeData::default_instance_ = NULL;

OGReqItemChangeData* OGReqItemChangeData::New() const {
  return new OGReqItemChangeData;
}

void OGReqItemChangeData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqItemChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqItemChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqItemChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqItemChangeData::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqItemChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqItemChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqItemChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqItemChangeData::MergeFrom(const OGReqItemChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqItemChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqItemChangeData::CopyFrom(const OGReqItemChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqItemChangeData::IsInitialized() const {
  
  return true;
}

void OGReqItemChangeData::Swap(OGReqItemChangeData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqItemChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqItemChangeData_descriptor_;
  metadata.reflection = OGReqItemChangeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckItemChangeData_Change::kDebrisIdFieldNumber;
const int OGAckItemChangeData_Change::kNeedNumFieldNumber;
const int OGAckItemChangeData_Change::kPetIdFieldNumber;
const int OGAckItemChangeData_Change::kJilvFieldNumber;
#endif  // !_MSC_VER

OGAckItemChangeData_Change::OGAckItemChangeData_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckItemChangeData_Change::InitAsDefaultInstance() {
}

OGAckItemChangeData_Change::OGAckItemChangeData_Change(const OGAckItemChangeData_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckItemChangeData_Change::SharedCtor() {
  _cached_size_ = 0;
  debrisid_ = 0;
  neednum_ = 0;
  petid_ = 0;
  jilv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckItemChangeData_Change::~OGAckItemChangeData_Change() {
  SharedDtor();
}

void OGAckItemChangeData_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckItemChangeData_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckItemChangeData_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckItemChangeData_Change_descriptor_;
}

const OGAckItemChangeData_Change& OGAckItemChangeData_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckItemChangeData_Change* OGAckItemChangeData_Change::default_instance_ = NULL;

OGAckItemChangeData_Change* OGAckItemChangeData_Change::New() const {
  return new OGAckItemChangeData_Change;
}

void OGAckItemChangeData_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debrisid_ = 0;
    neednum_ = 0;
    petid_ = 0;
    jilv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckItemChangeData_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 debrisId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debrisid_)));
          set_has_debrisid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needNum;
        break;
      }
      
      // optional int32 needNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neednum_)));
          set_has_neednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petId;
        break;
      }
      
      // optional int32 petId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jilv;
        break;
      }
      
      // optional int32 jilv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jilv_)));
          set_has_jilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckItemChangeData_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 debrisId = 1;
  if (has_debrisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->debrisid(), output);
  }
  
  // optional int32 needNum = 2;
  if (has_neednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->neednum(), output);
  }
  
  // optional int32 petId = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->petid(), output);
  }
  
  // optional int32 jilv = 4;
  if (has_jilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jilv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckItemChangeData_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 debrisId = 1;
  if (has_debrisid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->debrisid(), target);
  }
  
  // optional int32 needNum = 2;
  if (has_neednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->neednum(), target);
  }
  
  // optional int32 petId = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->petid(), target);
  }
  
  // optional int32 jilv = 4;
  if (has_jilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jilv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckItemChangeData_Change::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 debrisId = 1;
    if (has_debrisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debrisid());
    }
    
    // optional int32 needNum = 2;
    if (has_neednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neednum());
    }
    
    // optional int32 petId = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
    // optional int32 jilv = 4;
    if (has_jilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jilv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckItemChangeData_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckItemChangeData_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckItemChangeData_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckItemChangeData_Change::MergeFrom(const OGAckItemChangeData_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debrisid()) {
      set_debrisid(from.debrisid());
    }
    if (from.has_neednum()) {
      set_neednum(from.neednum());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_jilv()) {
      set_jilv(from.jilv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckItemChangeData_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckItemChangeData_Change::CopyFrom(const OGAckItemChangeData_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckItemChangeData_Change::IsInitialized() const {
  
  return true;
}

void OGAckItemChangeData_Change::Swap(OGAckItemChangeData_Change* other) {
  if (other != this) {
    std::swap(debrisid_, other->debrisid_);
    std::swap(neednum_, other->neednum_);
    std::swap(petid_, other->petid_);
    std::swap(jilv_, other->jilv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckItemChangeData_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckItemChangeData_Change_descriptor_;
  metadata.reflection = OGAckItemChangeData_Change_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckItemChangeData::kChangeListFieldNumber;
#endif  // !_MSC_VER

OGAckItemChangeData::OGAckItemChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckItemChangeData::InitAsDefaultInstance() {
}

OGAckItemChangeData::OGAckItemChangeData(const OGAckItemChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckItemChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckItemChangeData::~OGAckItemChangeData() {
  SharedDtor();
}

void OGAckItemChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckItemChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckItemChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckItemChangeData_descriptor_;
}

const OGAckItemChangeData& OGAckItemChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckItemChangeData* OGAckItemChangeData::default_instance_ = NULL;

OGAckItemChangeData* OGAckItemChangeData::New() const {
  return new OGAckItemChangeData;
}

void OGAckItemChangeData::Clear() {
  changelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckItemChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChangeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckItemChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
  for (int i = 0; i < this->changelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckItemChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
  for (int i = 0; i < this->changelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckItemChangeData::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckItemChangeData.Change ChangeList = 1;
  total_size += 1 * this->changelist_size();
  for (int i = 0; i < this->changelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckItemChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckItemChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckItemChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckItemChangeData::MergeFrom(const OGAckItemChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  changelist_.MergeFrom(from.changelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckItemChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckItemChangeData::CopyFrom(const OGAckItemChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckItemChangeData::IsInitialized() const {
  
  return true;
}

void OGAckItemChangeData::Swap(OGAckItemChangeData* other) {
  if (other != this) {
    changelist_.Swap(&other->changelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckItemChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckItemChangeData_descriptor_;
  metadata.reflection = OGAckItemChangeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetChangeData::OGReqPetChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetChangeData::InitAsDefaultInstance() {
}

OGReqPetChangeData::OGReqPetChangeData(const OGReqPetChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetChangeData::~OGReqPetChangeData() {
  SharedDtor();
}

void OGReqPetChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetChangeData_descriptor_;
}

const OGReqPetChangeData& OGReqPetChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetChangeData* OGReqPetChangeData::default_instance_ = NULL;

OGReqPetChangeData* OGReqPetChangeData::New() const {
  return new OGReqPetChangeData;
}

void OGReqPetChangeData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetChangeData::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetChangeData::MergeFrom(const OGReqPetChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetChangeData::CopyFrom(const OGReqPetChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetChangeData::IsInitialized() const {
  
  return true;
}

void OGReqPetChangeData::Swap(OGReqPetChangeData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetChangeData_descriptor_;
  metadata.reflection = OGReqPetChangeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetChangeData_ChangeData::kLevFieldNumber;
const int OGAckPetChangeData_ChangeData::kMinFieldNumber;
const int OGAckPetChangeData_ChangeData::kMaxFieldNumber;
#endif  // !_MSC_VER

OGAckPetChangeData_ChangeData::OGAckPetChangeData_ChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetChangeData_ChangeData::InitAsDefaultInstance() {
}

OGAckPetChangeData_ChangeData::OGAckPetChangeData_ChangeData(const OGAckPetChangeData_ChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetChangeData_ChangeData::SharedCtor() {
  _cached_size_ = 0;
  lev_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetChangeData_ChangeData::~OGAckPetChangeData_ChangeData() {
  SharedDtor();
}

void OGAckPetChangeData_ChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetChangeData_ChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetChangeData_ChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetChangeData_ChangeData_descriptor_;
}

const OGAckPetChangeData_ChangeData& OGAckPetChangeData_ChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetChangeData_ChangeData* OGAckPetChangeData_ChangeData::default_instance_ = NULL;

OGAckPetChangeData_ChangeData* OGAckPetChangeData_ChangeData::New() const {
  return new OGAckPetChangeData_ChangeData;
}

void OGAckPetChangeData_ChangeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lev_ = 0;
    min_ = 0;
    max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetChangeData_ChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min;
        break;
      }
      
      // optional int32 min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }
      
      // optional int32 max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetChangeData_ChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lev(), output);
  }
  
  // optional int32 min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }
  
  // optional int32 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetChangeData_ChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lev(), target);
  }
  
  // optional int32 min = 2;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min(), target);
  }
  
  // optional int32 max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetChangeData_ChangeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lev = 1;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }
    
    // optional int32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }
    
    // optional int32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetChangeData_ChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetChangeData_ChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetChangeData_ChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetChangeData_ChangeData::MergeFrom(const OGAckPetChangeData_ChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetChangeData_ChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetChangeData_ChangeData::CopyFrom(const OGAckPetChangeData_ChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetChangeData_ChangeData::IsInitialized() const {
  
  return true;
}

void OGAckPetChangeData_ChangeData::Swap(OGAckPetChangeData_ChangeData* other) {
  if (other != this) {
    std::swap(lev_, other->lev_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetChangeData_ChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetChangeData_ChangeData_descriptor_;
  metadata.reflection = OGAckPetChangeData_ChangeData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckPetChangeData::kDataListFieldNumber;
#endif  // !_MSC_VER

OGAckPetChangeData::OGAckPetChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetChangeData::InitAsDefaultInstance() {
}

OGAckPetChangeData::OGAckPetChangeData(const OGAckPetChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetChangeData::~OGAckPetChangeData() {
  SharedDtor();
}

void OGAckPetChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetChangeData_descriptor_;
}

const OGAckPetChangeData& OGAckPetChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetChangeData* OGAckPetChangeData::default_instance_ = NULL;

OGAckPetChangeData* OGAckPetChangeData::New() const {
  return new OGAckPetChangeData;
}

void OGAckPetChangeData::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetChangeData::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckPetChangeData.ChangeData DataList = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetChangeData::MergeFrom(const OGAckPetChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetChangeData::CopyFrom(const OGAckPetChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetChangeData::IsInitialized() const {
  
  return true;
}

void OGAckPetChangeData::Swap(OGAckPetChangeData* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetChangeData_descriptor_;
  metadata.reflection = OGAckPetChangeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckItemChange::kResultFieldNumber;
const int OGAckItemChange::kPicFieldNumber;
const int OGAckItemChange::kEvolveFldFieldNumber;
const int OGAckItemChange::kPetIdFieldNumber;
#endif  // !_MSC_VER

OGAckItemChange::OGAckItemChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckItemChange::InitAsDefaultInstance() {
}

OGAckItemChange::OGAckItemChange(const OGAckItemChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckItemChange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  evolvefld_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckItemChange::~OGAckItemChange() {
  SharedDtor();
}

void OGAckItemChange::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

void OGAckItemChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckItemChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckItemChange_descriptor_;
}

const OGAckItemChange& OGAckItemChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckItemChange* OGAckItemChange::default_instance_ = NULL;

OGAckItemChange* OGAckItemChange::New() const {
  return new OGAckItemChange;
}

void OGAckItemChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    evolvefld_ = 0;
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckItemChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pic;
        break;
      }
      
      // optional string pic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_evolveFld;
        break;
      }
      
      // optional int32 evolveFld = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolveFld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolvefld_)));
          set_has_evolvefld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_petId;
        break;
      }
      
      // optional int32 petId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckItemChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pic(), output);
  }
  
  // optional int32 evolveFld = 3;
  if (has_evolvefld()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->evolvefld(), output);
  }
  
  // optional int32 petId = 4;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->petid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckItemChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic(), target);
  }
  
  // optional int32 evolveFld = 3;
  if (has_evolvefld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->evolvefld(), target);
  }
  
  // optional int32 petId = 4;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->petid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckItemChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string pic = 2;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 evolveFld = 3;
    if (has_evolvefld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolvefld());
    }
    
    // optional int32 petId = 4;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckItemChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckItemChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckItemChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckItemChange::MergeFrom(const OGAckItemChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_evolvefld()) {
      set_evolvefld(from.evolvefld());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckItemChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckItemChange::CopyFrom(const OGAckItemChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckItemChange::IsInitialized() const {
  
  return true;
}

void OGAckItemChange::Swap(OGAckItemChange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pic_, other->pic_);
    std::swap(evolvefld_, other->evolvefld_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckItemChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckItemChange_descriptor_;
  metadata.reflection = OGAckItemChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetReSet::kPetIdFieldNumber;
const int OGAckPetReSet::kBloodFieldNumber;
const int OGAckPetReSet::kAttackFieldNumber;
const int OGAckPetReSet::kAwardFieldNumber;
#endif  // !_MSC_VER

OGAckPetReSet::OGAckPetReSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetReSet::InitAsDefaultInstance() {
}

OGAckPetReSet::OGAckPetReSet(const OGAckPetReSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetReSet::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  blood_ = 0;
  attack_ = 0;
  award_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetReSet::~OGAckPetReSet() {
  SharedDtor();
}

void OGAckPetReSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetReSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetReSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetReSet_descriptor_;
}

const OGAckPetReSet& OGAckPetReSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetReSet* OGAckPetReSet::default_instance_ = NULL;

OGAckPetReSet* OGAckPetReSet::New() const {
  return new OGAckPetReSet;
}

void OGAckPetReSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    blood_ = 0;
    attack_ = 0;
    award_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetReSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack;
        break;
      }
      
      // optional int32 attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_award;
        break;
      }
      
      // optional int32 award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetReSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blood(), output);
  }
  
  // optional int32 attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attack(), output);
  }
  
  // optional int32 award = 4;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->award(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetReSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 petId = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blood(), target);
  }
  
  // optional int32 attack = 3;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attack(), target);
  }
  
  // optional int32 award = 4;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->award(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetReSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petId = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }
    
    // optional int32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 attack = 3;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }
    
    // optional int32 award = 4;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetReSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetReSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetReSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetReSet::MergeFrom(const OGAckPetReSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetReSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetReSet::CopyFrom(const OGAckPetReSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetReSet::IsInitialized() const {
  
  return true;
}

void OGAckPetReSet::Swap(OGAckPetReSet* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(blood_, other->blood_);
    std::swap(attack_, other->attack_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetReSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetReSet_descriptor_;
  metadata.reflection = OGAckPetReSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetGridOnList_PetGrid::kIdFieldNumber;
const int OGAckPetGridOnList_PetGrid::kGridFieldNumber;
const int OGAckPetGridOnList_PetGrid::kTipsFieldNumber;
const int OGAckPetGridOnList_PetGrid::kLevFieldNumber;
const int OGAckPetGridOnList_PetGrid::kGoldFieldNumber;
#endif  // !_MSC_VER

OGAckPetGridOnList_PetGrid::OGAckPetGridOnList_PetGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetGridOnList_PetGrid::InitAsDefaultInstance() {
}

OGAckPetGridOnList_PetGrid::OGAckPetGridOnList_PetGrid(const OGAckPetGridOnList_PetGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetGridOnList_PetGrid::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  grid_ = 0;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lev_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetGridOnList_PetGrid::~OGAckPetGridOnList_PetGrid() {
  SharedDtor();
}

void OGAckPetGridOnList_PetGrid::SharedDtor() {
  if (tips_ != &::google::protobuf::internal::kEmptyString) {
    delete tips_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPetGridOnList_PetGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetGridOnList_PetGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetGridOnList_PetGrid_descriptor_;
}

const OGAckPetGridOnList_PetGrid& OGAckPetGridOnList_PetGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetGridOnList_PetGrid* OGAckPetGridOnList_PetGrid::default_instance_ = NULL;

OGAckPetGridOnList_PetGrid* OGAckPetGridOnList_PetGrid::New() const {
  return new OGAckPetGridOnList_PetGrid;
}

void OGAckPetGridOnList_PetGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    grid_ = 0;
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::kEmptyString) {
        tips_->clear();
      }
    }
    lev_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetGridOnList_PetGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid;
        break;
      }
      
      // optional int32 grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tips;
        break;
      }
      
      // optional string tips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lev;
        break;
      }
      
      // optional int32 lev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }
      
      // optional int64 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetGridOnList_PetGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 grid = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid(), output);
  }
  
  // optional string tips = 3;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tips(), output);
  }
  
  // optional int32 lev = 4;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lev(), output);
  }
  
  // optional int64 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetGridOnList_PetGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 grid = 2;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid(), target);
  }
  
  // optional string tips = 3;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tips(), target);
  }
  
  // optional int32 lev = 4;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lev(), target);
  }
  
  // optional int64 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetGridOnList_PetGrid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 grid = 2;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid());
    }
    
    // optional string tips = 3;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }
    
    // optional int32 lev = 4;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }
    
    // optional int64 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetGridOnList_PetGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetGridOnList_PetGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetGridOnList_PetGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetGridOnList_PetGrid::MergeFrom(const OGAckPetGridOnList_PetGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetGridOnList_PetGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetGridOnList_PetGrid::CopyFrom(const OGAckPetGridOnList_PetGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetGridOnList_PetGrid::IsInitialized() const {
  
  return true;
}

void OGAckPetGridOnList_PetGrid::Swap(OGAckPetGridOnList_PetGrid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grid_, other->grid_);
    std::swap(tips_, other->tips_);
    std::swap(lev_, other->lev_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetGridOnList_PetGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetGridOnList_PetGrid_descriptor_;
  metadata.reflection = OGAckPetGridOnList_PetGrid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckPetGridOnList::kPetGridListFieldNumber;
#endif  // !_MSC_VER

OGAckPetGridOnList::OGAckPetGridOnList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetGridOnList::InitAsDefaultInstance() {
}

OGAckPetGridOnList::OGAckPetGridOnList(const OGAckPetGridOnList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetGridOnList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetGridOnList::~OGAckPetGridOnList() {
  SharedDtor();
}

void OGAckPetGridOnList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetGridOnList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetGridOnList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetGridOnList_descriptor_;
}

const OGAckPetGridOnList& OGAckPetGridOnList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetGridOnList* OGAckPetGridOnList::default_instance_ = NULL;

OGAckPetGridOnList* OGAckPetGridOnList::New() const {
  return new OGAckPetGridOnList;
}

void OGAckPetGridOnList::Clear() {
  petgridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetGridOnList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petGridList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petgridlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_petGridList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetGridOnList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
  for (int i = 0; i < this->petgridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petgridlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetGridOnList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
  for (int i = 0; i < this->petgridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petgridlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetGridOnList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckPetGridOnList.PetGrid petGridList = 1;
  total_size += 1 * this->petgridlist_size();
  for (int i = 0; i < this->petgridlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petgridlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetGridOnList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetGridOnList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetGridOnList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetGridOnList::MergeFrom(const OGAckPetGridOnList& from) {
  GOOGLE_CHECK_NE(&from, this);
  petgridlist_.MergeFrom(from.petgridlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetGridOnList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetGridOnList::CopyFrom(const OGAckPetGridOnList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetGridOnList::IsInitialized() const {
  
  return true;
}

void OGAckPetGridOnList::Swap(OGAckPetGridOnList* other) {
  if (other != this) {
    petgridlist_.Swap(&other->petgridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetGridOnList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetGridOnList_descriptor_;
  metadata.reflection = OGAckPetGridOnList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetGrid::OGReqPetGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetGrid::InitAsDefaultInstance() {
}

OGReqPetGrid::OGReqPetGrid(const OGReqPetGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetGrid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetGrid::~OGReqPetGrid() {
  SharedDtor();
}

void OGReqPetGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetGrid_descriptor_;
}

const OGReqPetGrid& OGReqPetGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetGrid* OGReqPetGrid::default_instance_ = NULL;

OGReqPetGrid* OGReqPetGrid::New() const {
  return new OGReqPetGrid;
}

void OGReqPetGrid::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetGrid::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetGrid::MergeFrom(const OGReqPetGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetGrid::CopyFrom(const OGReqPetGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetGrid::IsInitialized() const {
  
  return true;
}

void OGReqPetGrid::Swap(OGReqPetGrid* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetGrid_descriptor_;
  metadata.reflection = OGReqPetGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPage::kStateFieldNumber;
#endif  // !_MSC_VER

OGAckPage::OGAckPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPage::InitAsDefaultInstance() {
}

OGAckPage::OGAckPage(const OGAckPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPage::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPage::~OGAckPage() {
  SharedDtor();
}

void OGAckPage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPage_descriptor_;
}

const OGAckPage& OGAckPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPage* OGAckPage::default_instance_ = NULL;

OGAckPage* OGAckPage::New() const {
  return new OGAckPage;
}

void OGAckPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPage::MergeFrom(const OGAckPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPage::CopyFrom(const OGAckPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPage::IsInitialized() const {
  
  return true;
}

void OGAckPage::Swap(OGAckPage* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPage_descriptor_;
  metadata.reflection = OGAckPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetFight::OGReqPetFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetFight::InitAsDefaultInstance() {
}

OGReqPetFight::OGReqPetFight(const OGReqPetFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetFight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetFight::~OGReqPetFight() {
  SharedDtor();
}

void OGReqPetFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetFight_descriptor_;
}

const OGReqPetFight& OGReqPetFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetFight* OGReqPetFight::default_instance_ = NULL;

OGReqPetFight* OGReqPetFight::New() const {
  return new OGReqPetFight;
}

void OGReqPetFight::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetFight::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetFight::MergeFrom(const OGReqPetFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetFight::CopyFrom(const OGReqPetFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetFight::IsInitialized() const {
  
  return true;
}

void OGReqPetFight::Swap(OGReqPetFight* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetFight_descriptor_;
  metadata.reflection = OGReqPetFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetFightResult::kResultFieldNumber;
const int OGAckPetFightResult::kWinResultFieldNumber;
const int OGAckPetFightResult::kPetSkillFieldNumber;
const int OGAckPetFightResult::kPetJoinNumFieldNumber;
const int OGAckPetFightResult::kPetDataFieldNumber;
const int OGAckPetFightResult::kBossSkillFieldNumber;
const int OGAckPetFightResult::kBossJoinNumFieldNumber;
const int OGAckPetFightResult::kBossDataFieldNumber;
const int OGAckPetFightResult::kPetTimesFieldNumber;
const int OGAckPetFightResult::kPetEffectFieldNumber;
const int OGAckPetFightResult::kBossTimesFieldNumber;
const int OGAckPetFightResult::kBossEffectFieldNumber;
const int OGAckPetFightResult::kPageFieldNumber;
#endif  // !_MSC_VER

OGAckPetFightResult::OGAckPetFightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetFightResult::InitAsDefaultInstance() {
}

OGAckPetFightResult::OGAckPetFightResult(const OGAckPetFightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetFightResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  winresult_ = 0;
  petskill_ = 0;
  petjoinnum_ = 0;
  petdata_ = 0;
  bossskill_ = 0;
  bossjoinnum_ = 0;
  bossdata_ = 0;
  pettimes_ = 0;
  peteffect_ = 0;
  bosstimes_ = 0;
  bosseffect_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetFightResult::~OGAckPetFightResult() {
  SharedDtor();
}

void OGAckPetFightResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetFightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetFightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetFightResult_descriptor_;
}

const OGAckPetFightResult& OGAckPetFightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetFightResult* OGAckPetFightResult::default_instance_ = NULL;

OGAckPetFightResult* OGAckPetFightResult::New() const {
  return new OGAckPetFightResult;
}

void OGAckPetFightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    winresult_ = 0;
    petskill_ = 0;
    petjoinnum_ = 0;
    petdata_ = 0;
    bossskill_ = 0;
    bossjoinnum_ = 0;
    bossdata_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pettimes_ = 0;
    peteffect_ = 0;
    bosstimes_ = 0;
    bosseffect_ = 0;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetFightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winResult;
        break;
      }
      
      // optional int32 winResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winresult_)));
          set_has_winresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petSkill;
        break;
      }
      
      // optional int32 petSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petskill_)));
          set_has_petskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_petJoinNum;
        break;
      }
      
      // optional int32 petJoinNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petJoinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petjoinnum_)));
          set_has_petjoinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_petData;
        break;
      }
      
      // optional int32 petData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petdata_)));
          set_has_petdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bossSkill;
        break;
      }
      
      // optional int32 bossSkill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossskill_)));
          set_has_bossskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bossJoinNum;
        break;
      }
      
      // optional int32 bossJoinNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossJoinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossjoinnum_)));
          set_has_bossjoinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossData;
        break;
      }
      
      // optional int32 bossData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossdata_)));
          set_has_bossdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_petTimes;
        break;
      }
      
      // optional int32 petTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pettimes_)));
          set_has_pettimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_petEffect;
        break;
      }
      
      // optional int32 petEffect = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peteffect_)));
          set_has_peteffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bossTimes;
        break;
      }
      
      // optional int32 bossTimes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstimes_)));
          set_has_bosstimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bossEffect;
        break;
      }
      
      // optional int32 bossEffect = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosseffect_)));
          set_has_bosseffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_page;
        break;
      }
      
      // optional int32 page = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetFightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 winResult = 2;
  if (has_winresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winresult(), output);
  }
  
  // optional int32 petSkill = 3;
  if (has_petskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->petskill(), output);
  }
  
  // optional int32 petJoinNum = 4;
  if (has_petjoinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->petjoinnum(), output);
  }
  
  // optional int32 petData = 5;
  if (has_petdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->petdata(), output);
  }
  
  // optional int32 bossSkill = 6;
  if (has_bossskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bossskill(), output);
  }
  
  // optional int32 bossJoinNum = 7;
  if (has_bossjoinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bossjoinnum(), output);
  }
  
  // optional int32 bossData = 8;
  if (has_bossdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bossdata(), output);
  }
  
  // optional int32 petTimes = 9;
  if (has_pettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pettimes(), output);
  }
  
  // optional int32 petEffect = 10;
  if (has_peteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->peteffect(), output);
  }
  
  // optional int32 bossTimes = 11;
  if (has_bosstimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bosstimes(), output);
  }
  
  // optional int32 bossEffect = 12;
  if (has_bosseffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bosseffect(), output);
  }
  
  // optional int32 page = 13;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetFightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 winResult = 2;
  if (has_winresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winresult(), target);
  }
  
  // optional int32 petSkill = 3;
  if (has_petskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->petskill(), target);
  }
  
  // optional int32 petJoinNum = 4;
  if (has_petjoinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->petjoinnum(), target);
  }
  
  // optional int32 petData = 5;
  if (has_petdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->petdata(), target);
  }
  
  // optional int32 bossSkill = 6;
  if (has_bossskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bossskill(), target);
  }
  
  // optional int32 bossJoinNum = 7;
  if (has_bossjoinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bossjoinnum(), target);
  }
  
  // optional int32 bossData = 8;
  if (has_bossdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bossdata(), target);
  }
  
  // optional int32 petTimes = 9;
  if (has_pettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pettimes(), target);
  }
  
  // optional int32 petEffect = 10;
  if (has_peteffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->peteffect(), target);
  }
  
  // optional int32 bossTimes = 11;
  if (has_bosstimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bosstimes(), target);
  }
  
  // optional int32 bossEffect = 12;
  if (has_bosseffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bosseffect(), target);
  }
  
  // optional int32 page = 13;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetFightResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 winResult = 2;
    if (has_winresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winresult());
    }
    
    // optional int32 petSkill = 3;
    if (has_petskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petskill());
    }
    
    // optional int32 petJoinNum = 4;
    if (has_petjoinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petjoinnum());
    }
    
    // optional int32 petData = 5;
    if (has_petdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petdata());
    }
    
    // optional int32 bossSkill = 6;
    if (has_bossskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossskill());
    }
    
    // optional int32 bossJoinNum = 7;
    if (has_bossjoinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossjoinnum());
    }
    
    // optional int32 bossData = 8;
    if (has_bossdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossdata());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 petTimes = 9;
    if (has_pettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pettimes());
    }
    
    // optional int32 petEffect = 10;
    if (has_peteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peteffect());
    }
    
    // optional int32 bossTimes = 11;
    if (has_bosstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstimes());
    }
    
    // optional int32 bossEffect = 12;
    if (has_bosseffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosseffect());
    }
    
    // optional int32 page = 13;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetFightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetFightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetFightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetFightResult::MergeFrom(const OGAckPetFightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_winresult()) {
      set_winresult(from.winresult());
    }
    if (from.has_petskill()) {
      set_petskill(from.petskill());
    }
    if (from.has_petjoinnum()) {
      set_petjoinnum(from.petjoinnum());
    }
    if (from.has_petdata()) {
      set_petdata(from.petdata());
    }
    if (from.has_bossskill()) {
      set_bossskill(from.bossskill());
    }
    if (from.has_bossjoinnum()) {
      set_bossjoinnum(from.bossjoinnum());
    }
    if (from.has_bossdata()) {
      set_bossdata(from.bossdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pettimes()) {
      set_pettimes(from.pettimes());
    }
    if (from.has_peteffect()) {
      set_peteffect(from.peteffect());
    }
    if (from.has_bosstimes()) {
      set_bosstimes(from.bosstimes());
    }
    if (from.has_bosseffect()) {
      set_bosseffect(from.bosseffect());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetFightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetFightResult::CopyFrom(const OGAckPetFightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetFightResult::IsInitialized() const {
  
  return true;
}

void OGAckPetFightResult::Swap(OGAckPetFightResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(winresult_, other->winresult_);
    std::swap(petskill_, other->petskill_);
    std::swap(petjoinnum_, other->petjoinnum_);
    std::swap(petdata_, other->petdata_);
    std::swap(bossskill_, other->bossskill_);
    std::swap(bossjoinnum_, other->bossjoinnum_);
    std::swap(bossdata_, other->bossdata_);
    std::swap(pettimes_, other->pettimes_);
    std::swap(peteffect_, other->peteffect_);
    std::swap(bosstimes_, other->bosstimes_);
    std::swap(bosseffect_, other->bosseffect_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetFightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetFightResult_descriptor_;
  metadata.reflection = OGAckPetFightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetFlee::OGReqPetFlee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetFlee::InitAsDefaultInstance() {
}

OGReqPetFlee::OGReqPetFlee(const OGReqPetFlee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetFlee::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetFlee::~OGReqPetFlee() {
  SharedDtor();
}

void OGReqPetFlee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetFlee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetFlee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetFlee_descriptor_;
}

const OGReqPetFlee& OGReqPetFlee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetFlee* OGReqPetFlee::default_instance_ = NULL;

OGReqPetFlee* OGReqPetFlee::New() const {
  return new OGReqPetFlee;
}

void OGReqPetFlee::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetFlee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetFlee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetFlee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetFlee::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetFlee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetFlee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetFlee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetFlee::MergeFrom(const OGReqPetFlee& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetFlee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetFlee::CopyFrom(const OGReqPetFlee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetFlee::IsInitialized() const {
  
  return true;
}

void OGReqPetFlee::Swap(OGReqPetFlee* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetFlee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetFlee_descriptor_;
  metadata.reflection = OGReqPetFlee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqPetGetAward::OGReqPetGetAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetGetAward::InitAsDefaultInstance() {
}

OGReqPetGetAward::OGReqPetGetAward(const OGReqPetGetAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetGetAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetGetAward::~OGReqPetGetAward() {
  SharedDtor();
}

void OGReqPetGetAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetGetAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetGetAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetGetAward_descriptor_;
}

const OGReqPetGetAward& OGReqPetGetAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetGetAward* OGReqPetGetAward::default_instance_ = NULL;

OGReqPetGetAward* OGReqPetGetAward::New() const {
  return new OGReqPetGetAward;
}

void OGReqPetGetAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetGetAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqPetGetAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetGetAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetGetAward::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetGetAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetGetAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetGetAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetGetAward::MergeFrom(const OGReqPetGetAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetGetAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetGetAward::CopyFrom(const OGReqPetGetAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetGetAward::IsInitialized() const {
  
  return true;
}

void OGReqPetGetAward::Swap(OGReqPetGetAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetGetAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetGetAward_descriptor_;
  metadata.reflection = OGReqPetGetAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetGetAward_Award::kTypeFieldNumber;
const int OGAckPetGetAward_Award::kNumFieldNumber;
const int OGAckPetGetAward_Award::kOkFieldNumber;
const int OGAckPetGetAward_Award::kPetNameFieldNumber;
const int OGAckPetGetAward_Award::kPicFieldNumber;
const int OGAckPetGetAward_Award::kItemIdFieldNumber;
#endif  // !_MSC_VER

OGAckPetGetAward_Award::OGAckPetGetAward_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetGetAward_Award::InitAsDefaultInstance() {
}

OGAckPetGetAward_Award::OGAckPetGetAward_Award(const OGAckPetGetAward_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetGetAward_Award::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  ok_ = 0;
  petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetGetAward_Award::~OGAckPetGetAward_Award() {
  SharedDtor();
}

void OGAckPetGetAward_Award::SharedDtor() {
  if (petname_ != &::google::protobuf::internal::kEmptyString) {
    delete petname_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPetGetAward_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetGetAward_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetGetAward_Award_descriptor_;
}

const OGAckPetGetAward_Award& OGAckPetGetAward_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetGetAward_Award* OGAckPetGetAward_Award::default_instance_ = NULL;

OGAckPetGetAward_Award* OGAckPetGetAward_Award::New() const {
  return new OGAckPetGetAward_Award;
}

void OGAckPetGetAward_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_ = GOOGLE_LONGLONG(0);
    ok_ = 0;
    if (has_petname()) {
      if (petname_ != &::google::protobuf::internal::kEmptyString) {
        petname_->clear();
      }
    }
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetGetAward_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ok;
        break;
      }
      
      // optional int32 ok = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_petName;
        break;
      }
      
      // optional string petName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->petname().data(), this->petname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pic;
        break;
      }
      
      // optional string pic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemId;
        break;
      }
      
      // optional int32 itemId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetGetAward_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }
  
  // optional int32 ok = 3;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ok(), output);
  }
  
  // optional string petName = 4;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->petname(), output);
  }
  
  // optional string pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pic(), output);
  }
  
  // optional int32 itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetGetAward_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }
  
  // optional int32 ok = 3;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ok(), target);
  }
  
  // optional string petName = 4;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->petname(), target);
  }
  
  // optional string pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pic(), target);
  }
  
  // optional int32 itemId = 6;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetGetAward_Award::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }
    
    // optional int32 ok = 3;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }
    
    // optional string petName = 4;
    if (has_petname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petname());
    }
    
    // optional string pic = 5;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 itemId = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetGetAward_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetGetAward_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetGetAward_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetGetAward_Award::MergeFrom(const OGAckPetGetAward_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
    if (from.has_petname()) {
      set_petname(from.petname());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetGetAward_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetGetAward_Award::CopyFrom(const OGAckPetGetAward_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetGetAward_Award::IsInitialized() const {
  
  return true;
}

void OGAckPetGetAward_Award::Swap(OGAckPetGetAward_Award* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(ok_, other->ok_);
    std::swap(petname_, other->petname_);
    std::swap(pic_, other->pic_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetGetAward_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetGetAward_Award_descriptor_;
  metadata.reflection = OGAckPetGetAward_Award_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckPetGetAward::kAwardListFieldNumber;
const int OGAckPetGetAward::kAwardFlgFieldNumber;
const int OGAckPetGetAward::kRoleNameFieldNumber;
#endif  // !_MSC_VER

OGAckPetGetAward::OGAckPetGetAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetGetAward::InitAsDefaultInstance() {
}

OGAckPetGetAward::OGAckPetGetAward(const OGAckPetGetAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetGetAward::SharedCtor() {
  _cached_size_ = 0;
  awardflg_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetGetAward::~OGAckPetGetAward() {
  SharedDtor();
}

void OGAckPetGetAward::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPetGetAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetGetAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetGetAward_descriptor_;
}

const OGAckPetGetAward& OGAckPetGetAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetGetAward* OGAckPetGetAward::default_instance_ = NULL;

OGAckPetGetAward* OGAckPetGetAward::New() const {
  return new OGAckPetGetAward;
}

void OGAckPetGetAward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    awardflg_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetGetAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awardList;
        if (input->ExpectTag(16)) goto parse_awardFlg;
        break;
      }
      
      // optional int32 awardFlg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardflg_)));
          set_has_awardflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetGetAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awardlist(i), output);
  }
  
  // optional int32 awardFlg = 2;
  if (has_awardflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardflg(), output);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetGetAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awardlist(i), target);
  }
  
  // optional int32 awardFlg = 2;
  if (has_awardflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardflg(), target);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetGetAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 awardFlg = 2;
    if (has_awardflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardflg());
    }
    
    // optional string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckPetGetAward.Award awardList = 1;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetGetAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetGetAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetGetAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetGetAward::MergeFrom(const OGAckPetGetAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_awardflg()) {
      set_awardflg(from.awardflg());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetGetAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetGetAward::CopyFrom(const OGAckPetGetAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetGetAward::IsInitialized() const {
  
  return true;
}

void OGAckPetGetAward::Swap(OGAckPetGetAward* other) {
  if (other != this) {
    awardlist_.Swap(&other->awardlist_);
    std::swap(awardflg_, other->awardflg_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetGetAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetGetAward_descriptor_;
  metadata.reflection = OGAckPetGetAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRankList_Rank::kRankIdFieldNumber;
const int OGAckRankList_Rank::kRoleNameFieldNumber;
const int OGAckRankList_Rank::kGetGoldFieldNumber;
#endif  // !_MSC_VER

OGAckRankList_Rank::OGAckRankList_Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRankList_Rank::InitAsDefaultInstance() {
}

OGAckRankList_Rank::OGAckRankList_Rank(const OGAckRankList_Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRankList_Rank::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRankList_Rank::~OGAckRankList_Rank() {
  SharedDtor();
}

void OGAckRankList_Rank::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRankList_Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRankList_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRankList_Rank_descriptor_;
}

const OGAckRankList_Rank& OGAckRankList_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRankList_Rank* OGAckRankList_Rank::default_instance_ = NULL;

OGAckRankList_Rank* OGAckRankList_Rank::New() const {
  return new OGAckRankList_Rank;
}

void OGAckRankList_Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    getgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRankList_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getGold;
        break;
      }
      
      // optional int64 getGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold_)));
          set_has_getgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRankList_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional int64 getGold = 3;
  if (has_getgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->getgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRankList_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional int64 getGold = 3;
  if (has_getgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->getgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRankList_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 getGold = 3;
    if (has_getgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getgold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRankList_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRankList_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRankList_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRankList_Rank::MergeFrom(const OGAckRankList_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_getgold()) {
      set_getgold(from.getgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRankList_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRankList_Rank::CopyFrom(const OGAckRankList_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRankList_Rank::IsInitialized() const {
  
  return true;
}

void OGAckRankList_Rank::Swap(OGAckRankList_Rank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(rolename_, other->rolename_);
    std::swap(getgold_, other->getgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRankList_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRankList_Rank_descriptor_;
  metadata.reflection = OGAckRankList_Rank_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckRankList::kRankListFieldNumber;
const int OGAckRankList::kTypeFieldNumber;
#endif  // !_MSC_VER

OGAckRankList::OGAckRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRankList::InitAsDefaultInstance() {
}

OGAckRankList::OGAckRankList(const OGAckRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRankList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRankList::~OGAckRankList() {
  SharedDtor();
}

void OGAckRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRankList_descriptor_;
}

const OGAckRankList& OGAckRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRankList* OGAckRankList::default_instance_ = NULL;

OGAckRankList* OGAckRankList::New() const {
  return new OGAckRankList;
}

void OGAckRankList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankList;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklist(i), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklist(i), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRankList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckRankList.Rank rankList = 1;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRankList::MergeFrom(const OGAckRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRankList::CopyFrom(const OGAckRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRankList::IsInitialized() const {
  
  return true;
}

void OGAckRankList::Swap(OGAckRankList* other) {
  if (other != this) {
    ranklist_.Swap(&other->ranklist_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRankList_descriptor_;
  metadata.reflection = OGAckRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRank_Rank::kRankIdFieldNumber;
const int OGAckRank_Rank::kRoleNameFieldNumber;
const int OGAckRank_Rank::kGetGoldFieldNumber;
#endif  // !_MSC_VER

OGAckRank_Rank::OGAckRank_Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRank_Rank::InitAsDefaultInstance() {
}

OGAckRank_Rank::OGAckRank_Rank(const OGAckRank_Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRank_Rank::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRank_Rank::~OGAckRank_Rank() {
  SharedDtor();
}

void OGAckRank_Rank::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRank_Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRank_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRank_Rank_descriptor_;
}

const OGAckRank_Rank& OGAckRank_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRank_Rank* OGAckRank_Rank::default_instance_ = NULL;

OGAckRank_Rank* OGAckRank_Rank::New() const {
  return new OGAckRank_Rank;
}

void OGAckRank_Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    getgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRank_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getGold;
        break;
      }
      
      // optional int64 getGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold_)));
          set_has_getgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRank_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional int64 getGold = 3;
  if (has_getgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->getgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRank_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional int64 getGold = 3;
  if (has_getgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->getgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRank_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 getGold = 3;
    if (has_getgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getgold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRank_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRank_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRank_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRank_Rank::MergeFrom(const OGAckRank_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_getgold()) {
      set_getgold(from.getgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRank_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRank_Rank::CopyFrom(const OGAckRank_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRank_Rank::IsInitialized() const {
  
  return true;
}

void OGAckRank_Rank::Swap(OGAckRank_Rank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(rolename_, other->rolename_);
    std::swap(getgold_, other->getgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRank_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRank_Rank_descriptor_;
  metadata.reflection = OGAckRank_Rank_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckRank::kRankListAFieldNumber;
const int OGAckRank::kRankListBFieldNumber;
const int OGAckRank::kRoleNameFieldNumber;
const int OGAckRank::kANumFieldNumber;
const int OGAckRank::kAGoldFieldNumber;
const int OGAckRank::kARoleNameFieldNumber;
const int OGAckRank::kBNumFieldNumber;
const int OGAckRank::kBGoldFieldNumber;
const int OGAckRank::kBRoleNameFieldNumber;
const int OGAckRank::kLastWeekAFieldNumber;
const int OGAckRank::kLastWeekBFieldNumber;
const int OGAckRank::kRankListCFieldNumber;
const int OGAckRank::kCRankNameFieldNumber;
const int OGAckRank::kARankTipFieldNumber;
const int OGAckRank::kBRankTipFieldNumber;
const int OGAckRank::kCRankTipFieldNumber;
const int OGAckRank::kLaRankTipFieldNumber;
const int OGAckRank::kLbRankTipFieldNumber;
const int OGAckRank::kRankBtnOnFieldNumber;
#endif  // !_MSC_VER

OGAckRank::OGAckRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRank::InitAsDefaultInstance() {
}

OGAckRank::OGAckRank(const OGAckRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRank::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  anum_ = 0;
  agold_ = GOOGLE_LONGLONG(0);
  arolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bnum_ = 0;
  bgold_ = GOOGLE_LONGLONG(0);
  brolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  branktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  laranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lbranktip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rankbtnon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRank::~OGAckRank() {
  SharedDtor();
}

void OGAckRank::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (arolename_ != &::google::protobuf::internal::kEmptyString) {
    delete arolename_;
  }
  if (brolename_ != &::google::protobuf::internal::kEmptyString) {
    delete brolename_;
  }
  if (crankname_ != &::google::protobuf::internal::kEmptyString) {
    delete crankname_;
  }
  if (aranktip_ != &::google::protobuf::internal::kEmptyString) {
    delete aranktip_;
  }
  if (branktip_ != &::google::protobuf::internal::kEmptyString) {
    delete branktip_;
  }
  if (cranktip_ != &::google::protobuf::internal::kEmptyString) {
    delete cranktip_;
  }
  if (laranktip_ != &::google::protobuf::internal::kEmptyString) {
    delete laranktip_;
  }
  if (lbranktip_ != &::google::protobuf::internal::kEmptyString) {
    delete lbranktip_;
  }
  if (this != default_instance_) {
  }
}

void OGAckRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRank_descriptor_;
}

const OGAckRank& OGAckRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRank* OGAckRank::default_instance_ = NULL;

OGAckRank* OGAckRank::New() const {
  return new OGAckRank;
}

void OGAckRank::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    anum_ = 0;
    agold_ = GOOGLE_LONGLONG(0);
    if (has_arolename()) {
      if (arolename_ != &::google::protobuf::internal::kEmptyString) {
        arolename_->clear();
      }
    }
    bnum_ = 0;
    bgold_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_brolename()) {
      if (brolename_ != &::google::protobuf::internal::kEmptyString) {
        brolename_->clear();
      }
    }
    if (has_crankname()) {
      if (crankname_ != &::google::protobuf::internal::kEmptyString) {
        crankname_->clear();
      }
    }
    if (has_aranktip()) {
      if (aranktip_ != &::google::protobuf::internal::kEmptyString) {
        aranktip_->clear();
      }
    }
    if (has_branktip()) {
      if (branktip_ != &::google::protobuf::internal::kEmptyString) {
        branktip_->clear();
      }
    }
    if (has_cranktip()) {
      if (cranktip_ != &::google::protobuf::internal::kEmptyString) {
        cranktip_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_laranktip()) {
      if (laranktip_ != &::google::protobuf::internal::kEmptyString) {
        laranktip_->clear();
      }
    }
    if (has_lbranktip()) {
      if (lbranktip_ != &::google::protobuf::internal::kEmptyString) {
        lbranktip_->clear();
      }
    }
    rankbtnon_ = 0;
  }
  ranklista_.Clear();
  ranklistb_.Clear();
  lastweeka_.Clear();
  lastweekb_.Clear();
  ranklistc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankListA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklista()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankListA;
        if (input->ExpectTag(18)) goto parse_rankListB;
        break;
      }
      
      // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankListB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklistb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankListB;
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aNum;
        break;
      }
      
      // optional int32 aNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anum_)));
          set_has_anum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_aGold;
        break;
      }
      
      // optional int64 aGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &agold_)));
          set_has_agold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_aRoleName;
        break;
      }
      
      // optional string aRoleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aRoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arolename().data(), this->arolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bNum;
        break;
      }
      
      // optional int32 bNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bnum_)));
          set_has_bnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bGold;
        break;
      }
      
      // optional int64 bGold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bgold_)));
          set_has_bgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bRoleName;
        break;
      }
      
      // optional string bRoleName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bRoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brolename().data(), this->brolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lastWeekA;
        break;
      }
      
      // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastWeekA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lastweeka()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lastWeekA;
        if (input->ExpectTag(90)) goto parse_lastWeekB;
        break;
      }
      
      // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastWeekB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lastweekb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_lastWeekB;
        if (input->ExpectTag(98)) goto parse_rankListC;
        break;
      }
      
      // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankListC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklistc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rankListC;
        if (input->ExpectTag(106)) goto parse_cRankName;
        break;
      }
      
      // optional string cRankName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cRankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crankname().data(), this->crankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_aRankTip;
        break;
      }
      
      // optional string aRankTip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aranktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aranktip().data(), this->aranktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bRankTip;
        break;
      }
      
      // optional string bRankTip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branktip().data(), this->branktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_cRankTip;
        break;
      }
      
      // optional string cRankTip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cranktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cranktip().data(), this->cranktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_laRankTip;
        break;
      }
      
      // optional string laRankTip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_laranktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->laranktip().data(), this->laranktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_lbRankTip;
        break;
      }
      
      // optional string lbRankTip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lbRankTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lbranktip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lbranktip().data(), this->lbranktip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_rankBtnOn;
        break;
      }
      
      // optional int32 rankBtnOn = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankBtnOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankbtnon_)));
          set_has_rankbtnon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
  for (int i = 0; i < this->ranklista_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklista(i), output);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
  for (int i = 0; i < this->ranklistb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklistb(i), output);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  // optional int32 aNum = 4;
  if (has_anum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->anum(), output);
  }
  
  // optional int64 aGold = 5;
  if (has_agold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->agold(), output);
  }
  
  // optional string aRoleName = 6;
  if (has_arolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arolename().data(), this->arolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->arolename(), output);
  }
  
  // optional int32 bNum = 7;
  if (has_bnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bnum(), output);
  }
  
  // optional int64 bGold = 8;
  if (has_bgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bgold(), output);
  }
  
  // optional string bRoleName = 9;
  if (has_brolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brolename().data(), this->brolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->brolename(), output);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
  for (int i = 0; i < this->lastweeka_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lastweeka(i), output);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
  for (int i = 0; i < this->lastweekb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lastweekb(i), output);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
  for (int i = 0; i < this->ranklistc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ranklistc(i), output);
  }
  
  // optional string cRankName = 13;
  if (has_crankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crankname().data(), this->crankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->crankname(), output);
  }
  
  // optional string aRankTip = 14;
  if (has_aranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aranktip().data(), this->aranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->aranktip(), output);
  }
  
  // optional string bRankTip = 15;
  if (has_branktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branktip().data(), this->branktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->branktip(), output);
  }
  
  // optional string cRankTip = 16;
  if (has_cranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cranktip().data(), this->cranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->cranktip(), output);
  }
  
  // optional string laRankTip = 17;
  if (has_laranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laranktip().data(), this->laranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->laranktip(), output);
  }
  
  // optional string lbRankTip = 18;
  if (has_lbranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lbranktip().data(), this->lbranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->lbranktip(), output);
  }
  
  // optional int32 rankBtnOn = 19;
  if (has_rankbtnon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->rankbtnon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
  for (int i = 0; i < this->ranklista_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklista(i), target);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
  for (int i = 0; i < this->ranklistb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklistb(i), target);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }
  
  // optional int32 aNum = 4;
  if (has_anum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->anum(), target);
  }
  
  // optional int64 aGold = 5;
  if (has_agold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->agold(), target);
  }
  
  // optional string aRoleName = 6;
  if (has_arolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arolename().data(), this->arolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->arolename(), target);
  }
  
  // optional int32 bNum = 7;
  if (has_bnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bnum(), target);
  }
  
  // optional int64 bGold = 8;
  if (has_bgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bgold(), target);
  }
  
  // optional string bRoleName = 9;
  if (has_brolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brolename().data(), this->brolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->brolename(), target);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
  for (int i = 0; i < this->lastweeka_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lastweeka(i), target);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
  for (int i = 0; i < this->lastweekb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lastweekb(i), target);
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
  for (int i = 0; i < this->ranklistc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ranklistc(i), target);
  }
  
  // optional string cRankName = 13;
  if (has_crankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crankname().data(), this->crankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->crankname(), target);
  }
  
  // optional string aRankTip = 14;
  if (has_aranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aranktip().data(), this->aranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->aranktip(), target);
  }
  
  // optional string bRankTip = 15;
  if (has_branktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branktip().data(), this->branktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->branktip(), target);
  }
  
  // optional string cRankTip = 16;
  if (has_cranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cranktip().data(), this->cranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cranktip(), target);
  }
  
  // optional string laRankTip = 17;
  if (has_laranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laranktip().data(), this->laranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->laranktip(), target);
  }
  
  // optional string lbRankTip = 18;
  if (has_lbranktip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lbranktip().data(), this->lbranktip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->lbranktip(), target);
  }
  
  // optional int32 rankBtnOn = 19;
  if (has_rankbtnon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->rankbtnon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 aNum = 4;
    if (has_anum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anum());
    }
    
    // optional int64 aGold = 5;
    if (has_agold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->agold());
    }
    
    // optional string aRoleName = 6;
    if (has_arolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arolename());
    }
    
    // optional int32 bNum = 7;
    if (has_bnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bnum());
    }
    
    // optional int64 bGold = 8;
    if (has_bgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bgold());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bRoleName = 9;
    if (has_brolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brolename());
    }
    
    // optional string cRankName = 13;
    if (has_crankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crankname());
    }
    
    // optional string aRankTip = 14;
    if (has_aranktip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aranktip());
    }
    
    // optional string bRankTip = 15;
    if (has_branktip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branktip());
    }
    
    // optional string cRankTip = 16;
    if (has_cranktip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cranktip());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string laRankTip = 17;
    if (has_laranktip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->laranktip());
    }
    
    // optional string lbRankTip = 18;
    if (has_lbranktip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lbranktip());
    }
    
    // optional int32 rankBtnOn = 19;
    if (has_rankbtnon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankbtnon());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListA = 1;
  total_size += 1 * this->ranklista_size();
  for (int i = 0; i < this->ranklista_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklista(i));
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListB = 2;
  total_size += 1 * this->ranklistb_size();
  for (int i = 0; i < this->ranklistb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklistb(i));
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekA = 10;
  total_size += 1 * this->lastweeka_size();
  for (int i = 0; i < this->lastweeka_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastweeka(i));
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank lastWeekB = 11;
  total_size += 1 * this->lastweekb_size();
  for (int i = 0; i < this->lastweekb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastweekb(i));
  }
  
  // repeated .com.ourgame.texasSlots.OGAckRank.Rank rankListC = 12;
  total_size += 1 * this->ranklistc_size();
  for (int i = 0; i < this->ranklistc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklistc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRank::MergeFrom(const OGAckRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklista_.MergeFrom(from.ranklista_);
  ranklistb_.MergeFrom(from.ranklistb_);
  lastweeka_.MergeFrom(from.lastweeka_);
  lastweekb_.MergeFrom(from.lastweekb_);
  ranklistc_.MergeFrom(from.ranklistc_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_anum()) {
      set_anum(from.anum());
    }
    if (from.has_agold()) {
      set_agold(from.agold());
    }
    if (from.has_arolename()) {
      set_arolename(from.arolename());
    }
    if (from.has_bnum()) {
      set_bnum(from.bnum());
    }
    if (from.has_bgold()) {
      set_bgold(from.bgold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_brolename()) {
      set_brolename(from.brolename());
    }
    if (from.has_crankname()) {
      set_crankname(from.crankname());
    }
    if (from.has_aranktip()) {
      set_aranktip(from.aranktip());
    }
    if (from.has_branktip()) {
      set_branktip(from.branktip());
    }
    if (from.has_cranktip()) {
      set_cranktip(from.cranktip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_laranktip()) {
      set_laranktip(from.laranktip());
    }
    if (from.has_lbranktip()) {
      set_lbranktip(from.lbranktip());
    }
    if (from.has_rankbtnon()) {
      set_rankbtnon(from.rankbtnon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRank::CopyFrom(const OGAckRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRank::IsInitialized() const {
  
  return true;
}

void OGAckRank::Swap(OGAckRank* other) {
  if (other != this) {
    ranklista_.Swap(&other->ranklista_);
    ranklistb_.Swap(&other->ranklistb_);
    std::swap(rolename_, other->rolename_);
    std::swap(anum_, other->anum_);
    std::swap(agold_, other->agold_);
    std::swap(arolename_, other->arolename_);
    std::swap(bnum_, other->bnum_);
    std::swap(bgold_, other->bgold_);
    std::swap(brolename_, other->brolename_);
    lastweeka_.Swap(&other->lastweeka_);
    lastweekb_.Swap(&other->lastweekb_);
    ranklistc_.Swap(&other->ranklistc_);
    std::swap(crankname_, other->crankname_);
    std::swap(aranktip_, other->aranktip_);
    std::swap(branktip_, other->branktip_);
    std::swap(cranktip_, other->cranktip_);
    std::swap(laranktip_, other->laranktip_);
    std::swap(lbranktip_, other->lbranktip_);
    std::swap(rankbtnon_, other->rankbtnon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRank_descriptor_;
  metadata.reflection = OGAckRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqRank::kRoleNameFieldNumber;
#endif  // !_MSC_VER

OGReqRank::OGReqRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqRank::InitAsDefaultInstance() {
}

OGReqRank::OGReqRank(const OGReqRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqRank::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqRank::~OGReqRank() {
  SharedDtor();
}

void OGReqRank::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqRank_descriptor_;
}

const OGReqRank& OGReqRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqRank* OGReqRank::default_instance_ = NULL;

OGReqRank* OGReqRank::New() const {
  return new OGReqRank;
}

void OGReqRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqRank::MergeFrom(const OGReqRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqRank::CopyFrom(const OGReqRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqRank::IsInitialized() const {
  
  return true;
}

void OGReqRank::Swap(OGReqRank* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqRank_descriptor_;
  metadata.reflection = OGReqRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqRankToJS::kRoleNameFieldNumber;
const int OGReqRankToJS::kGetGold1FieldNumber;
const int OGReqRankToJS::kGetGold4FieldNumber;
#endif  // !_MSC_VER

OGReqRankToJS::OGReqRankToJS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqRankToJS::InitAsDefaultInstance() {
}

OGReqRankToJS::OGReqRankToJS(const OGReqRankToJS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqRankToJS::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getgold1_ = GOOGLE_LONGLONG(0);
  getgold4_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqRankToJS::~OGReqRankToJS() {
  SharedDtor();
}

void OGReqRankToJS::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqRankToJS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqRankToJS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqRankToJS_descriptor_;
}

const OGReqRankToJS& OGReqRankToJS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqRankToJS* OGReqRankToJS::default_instance_ = NULL;

OGReqRankToJS* OGReqRankToJS::New() const {
  return new OGReqRankToJS;
}

void OGReqRankToJS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    getgold1_ = GOOGLE_LONGLONG(0);
    getgold4_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqRankToJS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getGold1;
        break;
      }
      
      // optional int64 getGold1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGold1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold1_)));
          set_has_getgold1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getGold4;
        break;
      }
      
      // optional int64 getGold4 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGold4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getgold4_)));
          set_has_getgold4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqRankToJS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional int64 getGold1 = 2;
  if (has_getgold1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->getgold1(), output);
  }
  
  // optional int64 getGold4 = 3;
  if (has_getgold4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->getgold4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqRankToJS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional int64 getGold1 = 2;
  if (has_getgold1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->getgold1(), target);
  }
  
  // optional int64 getGold4 = 3;
  if (has_getgold4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->getgold4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqRankToJS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 getGold1 = 2;
    if (has_getgold1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getgold1());
    }
    
    // optional int64 getGold4 = 3;
    if (has_getgold4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getgold4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqRankToJS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqRankToJS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqRankToJS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqRankToJS::MergeFrom(const OGReqRankToJS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_getgold1()) {
      set_getgold1(from.getgold1());
    }
    if (from.has_getgold4()) {
      set_getgold4(from.getgold4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqRankToJS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqRankToJS::CopyFrom(const OGReqRankToJS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqRankToJS::IsInitialized() const {
  
  return true;
}

void OGReqRankToJS::Swap(OGReqRankToJS* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(getgold1_, other->getgold1_);
    std::swap(getgold4_, other->getgold4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqRankToJS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqRankToJS_descriptor_;
  metadata.reflection = OGReqRankToJS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqNotice::kNumFieldNumber;
const int OGReqNotice::kTimeFieldNumber;
const int OGReqNotice::kContentFieldNumber;
const int OGReqNotice::kColorFieldNumber;
const int OGReqNotice::kSendTimeFieldNumber;
const int OGReqNotice::kTypeFieldNumber;
#endif  // !_MSC_VER

OGReqNotice::OGReqNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqNotice::InitAsDefaultInstance() {
}

OGReqNotice::OGReqNotice(const OGReqNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqNotice::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  time_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqNotice::~OGReqNotice() {
  SharedDtor();
}

void OGReqNotice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    delete color_;
  }
  if (sendtime_ != &::google::protobuf::internal::kEmptyString) {
    delete sendtime_;
  }
  if (this != default_instance_) {
  }
}

void OGReqNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqNotice_descriptor_;
}

const OGReqNotice& OGReqNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqNotice* OGReqNotice::default_instance_ = NULL;

OGReqNotice* OGReqNotice::New() const {
  return new OGReqNotice;
}

void OGReqNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::kEmptyString) {
        color_->clear();
      }
    }
    if (has_sendtime()) {
      if (sendtime_ != &::google::protobuf::internal::kEmptyString) {
        sendtime_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }
      
      // optional string color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sendTime;
        break;
      }
      
      // optional string sendTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendtime().data(), this->sendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }
  
  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  // optional string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->color(), output);
  }
  
  // optional string sendTime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtime().data(), this->sendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sendtime(), output);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }
  
  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  // optional string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }
  
  // optional string sendTime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtime().data(), this->sendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sendtime(), target);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional string color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }
    
    // optional string sendTime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendtime());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqNotice::MergeFrom(const OGReqNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqNotice::CopyFrom(const OGReqNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqNotice::IsInitialized() const {
  
  return true;
}

void OGReqNotice::Swap(OGReqNotice* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(color_, other->color_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqNotice_descriptor_;
  metadata.reflection = OGReqNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGGuangGao::kFlgFieldNumber;
const int OGGuangGao::kContentFieldNumber;
#endif  // !_MSC_VER

OGGuangGao::OGGuangGao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGGuangGao::InitAsDefaultInstance() {
}

OGGuangGao::OGGuangGao(const OGGuangGao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGGuangGao::SharedCtor() {
  _cached_size_ = 0;
  flg_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGGuangGao::~OGGuangGao() {
  SharedDtor();
}

void OGGuangGao::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGGuangGao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGGuangGao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGGuangGao_descriptor_;
}

const OGGuangGao& OGGuangGao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGGuangGao* OGGuangGao::default_instance_ = NULL;

OGGuangGao* OGGuangGao::New() const {
  return new OGGuangGao;
}

void OGGuangGao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flg_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGGuangGao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGGuangGao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flg = 1;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flg(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGGuangGao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flg = 1;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flg(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGGuangGao::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flg = 1;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGGuangGao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGGuangGao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGGuangGao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGGuangGao::MergeFrom(const OGGuangGao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGGuangGao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGGuangGao::CopyFrom(const OGGuangGao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGGuangGao::IsInitialized() const {
  
  return true;
}

void OGGuangGao::Swap(OGGuangGao* other) {
  if (other != this) {
    std::swap(flg_, other->flg_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGGuangGao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGGuangGao_descriptor_;
  metadata.reflection = OGGuangGao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckMessage::kTypeFieldNumber;
const int OGAckMessage::kContentFieldNumber;
const int OGAckMessage::kSubtypeFieldNumber;
const int OGAckMessage::kFlgFieldNumber;
const int OGAckMessage::kRoleNameFieldNumber;
const int OGAckMessage::kUseridFieldNumber;
const int OGAckMessage::kRankTypeFieldNumber;
const int OGAckMessage::kRankNumFieldNumber;
const int OGAckMessage::kTipFieldNumber;
const int OGAckMessage::kTimeFieldNumber;
#endif  // !_MSC_VER

OGAckMessage::OGAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckMessage::InitAsDefaultInstance() {
}

OGAckMessage::OGAckMessage(const OGAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtype_ = 0;
  flg_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranktype_ = 0;
  ranknum_ = 0;
  tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckMessage::~OGAckMessage() {
  SharedDtor();
}

void OGAckMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    delete tip_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void OGAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckMessage_descriptor_;
}

const OGAckMessage& OGAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckMessage* OGAckMessage::default_instance_ = NULL;

OGAckMessage* OGAckMessage::New() const {
  return new OGAckMessage;
}

void OGAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    subtype_ = 0;
    flg_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    ranktype_ = 0;
    ranknum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tip()) {
      if (tip_ != &::google::protobuf::internal::kEmptyString) {
        tip_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subtype;
        break;
      }
      
      // optional int32 subtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userid;
        break;
      }
      
      // optional string userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rankType;
        break;
      }
      
      // optional int32 rankType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rankNum;
        break;
      }
      
      // optional int32 rankNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranknum_)));
          set_has_ranknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tip;
        break;
      }
      
      // optional string tip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tip().data(), this->tip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_time;
        break;
      }
      
      // optional string time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional int32 subtype = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subtype(), output);
  }
  
  // optional int32 flg = 4;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flg(), output);
  }
  
  // optional string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rolename(), output);
  }
  
  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userid(), output);
  }
  
  // optional int32 rankType = 7;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ranktype(), output);
  }
  
  // optional int32 rankNum = 8;
  if (has_ranknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ranknum(), output);
  }
  
  // optional string tip = 9;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tip(), output);
  }
  
  // optional string time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional int32 subtype = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subtype(), target);
  }
  
  // optional int32 flg = 4;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flg(), target);
  }
  
  // optional string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rolename(), target);
  }
  
  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }
  
  // optional int32 rankType = 7;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ranktype(), target);
  }
  
  // optional int32 rankNum = 8;
  if (has_ranknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ranknum(), target);
  }
  
  // optional string tip = 9;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tip(), target);
  }
  
  // optional string time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 subtype = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }
    
    // optional int32 flg = 4;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
    // optional string roleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional int32 rankType = 7;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }
    
    // optional int32 rankNum = 8;
    if (has_ranknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranknum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string tip = 9;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip());
    }
    
    // optional string time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckMessage::MergeFrom(const OGAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_ranknum()) {
      set_ranknum(from.ranknum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tip()) {
      set_tip(from.tip());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckMessage::CopyFrom(const OGAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckMessage::IsInitialized() const {
  
  return true;
}

void OGAckMessage::Swap(OGAckMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(subtype_, other->subtype_);
    std::swap(flg_, other->flg_);
    std::swap(rolename_, other->rolename_);
    std::swap(userid_, other->userid_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(ranknum_, other->ranknum_);
    std::swap(tip_, other->tip_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckMessage_descriptor_;
  metadata.reflection = OGAckMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OGAckStopGame_E_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckStopGame_E_Status_descriptor_;
}
bool OGAckStopGame_E_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OGAckStopGame_E_Status OGAckStopGame::ET_STOPS;
const OGAckStopGame_E_Status OGAckStopGame::ET_CARRYCAPS;
const OGAckStopGame_E_Status OGAckStopGame::E_Status_MIN;
const OGAckStopGame_E_Status OGAckStopGame::E_Status_MAX;
const int OGAckStopGame::E_Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OGAckStopGame::kStatusFieldNumber;
#endif  // !_MSC_VER

OGAckStopGame::OGAckStopGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckStopGame::InitAsDefaultInstance() {
}

OGAckStopGame::OGAckStopGame(const OGAckStopGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckStopGame::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckStopGame::~OGAckStopGame() {
  SharedDtor();
}

void OGAckStopGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckStopGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckStopGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckStopGame_descriptor_;
}

const OGAckStopGame& OGAckStopGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckStopGame* OGAckStopGame::default_instance_ = NULL;

OGAckStopGame* OGAckStopGame::New() const {
  return new OGAckStopGame;
}

void OGAckStopGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckStopGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ourgame::texasSlots::OGAckStopGame_E_Status_IsValid(value)) {
            set_status(static_cast< ::com::ourgame::texasSlots::OGAckStopGame_E_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckStopGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckStopGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckStopGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ourgame.texasSlots.OGAckStopGame.E_Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckStopGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckStopGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckStopGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckStopGame::MergeFrom(const OGAckStopGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckStopGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckStopGame::CopyFrom(const OGAckStopGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckStopGame::IsInitialized() const {
  
  return true;
}

void OGAckStopGame::Swap(OGAckStopGame* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckStopGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckStopGame_descriptor_;
  metadata.reflection = OGAckStopGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckMails_Mail::kIdFieldNumber;
const int OGAckMails_Mail::kSendRoleNameFieldNumber;
const int OGAckMails_Mail::kRecvRoleNameFieldNumber;
const int OGAckMails_Mail::kContentFieldNumber;
const int OGAckMails_Mail::kCreateTimeFieldNumber;
const int OGAckMails_Mail::kMailTitleFieldNumber;
const int OGAckMails_Mail::kAwardTypeFieldNumber;
const int OGAckMails_Mail::kItemIdFieldNumber;
const int OGAckMails_Mail::kItemNumFieldNumber;
const int OGAckMails_Mail::kIsReadFieldNumber;
const int OGAckMails_Mail::kIsOkFieldNumber;
const int OGAckMails_Mail::kPicFieldNumber;
const int OGAckMails_Mail::kItemNameFieldNumber;
const int OGAckMails_Mail::kItemTipFieldNumber;
#endif  // !_MSC_VER

OGAckMails_Mail::OGAckMails_Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckMails_Mail::InitAsDefaultInstance() {
}

OGAckMails_Mail::OGAckMails_Mail(const OGAckMails_Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckMails_Mail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  sendrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recvrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  isread_ = 0;
  isok_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckMails_Mail::~OGAckMails_Mail() {
  SharedDtor();
}

void OGAckMails_Mail::SharedDtor() {
  if (sendrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete sendrolename_;
  }
  if (recvrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete recvrolename_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (mailtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete mailtitle_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemtip_ != &::google::protobuf::internal::kEmptyString) {
    delete itemtip_;
  }
  if (this != default_instance_) {
  }
}

void OGAckMails_Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckMails_Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckMails_Mail_descriptor_;
}

const OGAckMails_Mail& OGAckMails_Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckMails_Mail* OGAckMails_Mail::default_instance_ = NULL;

OGAckMails_Mail* OGAckMails_Mail::New() const {
  return new OGAckMails_Mail;
}

void OGAckMails_Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_sendrolename()) {
      if (sendrolename_ != &::google::protobuf::internal::kEmptyString) {
        sendrolename_->clear();
      }
    }
    if (has_recvrolename()) {
      if (recvrolename_ != &::google::protobuf::internal::kEmptyString) {
        recvrolename_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    if (has_mailtitle()) {
      if (mailtitle_ != &::google::protobuf::internal::kEmptyString) {
        mailtitle_->clear();
      }
    }
    awardtype_ = 0;
    itemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    itemnum_ = 0;
    isread_ = 0;
    isok_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    if (has_itemtip()) {
      if (itemtip_ != &::google::protobuf::internal::kEmptyString) {
        itemtip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckMails_Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sendRoleName;
        break;
      }
      
      // optional string sendRoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendRoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendrolename().data(), this->sendrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recvRoleName;
        break;
      }
      
      // optional string recvRoleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvRoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recvrolename().data(), this->recvrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_createTime;
        break;
      }
      
      // optional string createTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mailTitle;
        break;
      }
      
      // optional string mailTitle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailtitle().data(), this->mailtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_awardType;
        break;
      }
      
      // optional int32 awardType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemId;
        break;
      }
      
      // optional int32 itemId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isRead;
        break;
      }
      
      // optional int32 isRead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isOk;
        break;
      }
      
      // optional int32 isOk = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pic;
        break;
      }
      
      // optional string pic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_itemName;
        break;
      }
      
      // optional string itemName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_itemTip;
        break;
      }
      
      // optional string itemTip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemtip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemtip().data(), this->itemtip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckMails_Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string sendRoleName = 2;
  if (has_sendrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendrolename().data(), this->sendrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendrolename(), output);
  }
  
  // optional string recvRoleName = 3;
  if (has_recvrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvrolename().data(), this->recvrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->recvrolename(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional string createTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->createtime(), output);
  }
  
  // optional string mailTitle = 6;
  if (has_mailtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailtitle().data(), this->mailtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mailtitle(), output);
  }
  
  // optional int32 awardType = 7;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->awardtype(), output);
  }
  
  // optional int32 itemId = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemid(), output);
  }
  
  // optional int32 itemNum = 9;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->itemnum(), output);
  }
  
  // optional int32 isRead = 10;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isread(), output);
  }
  
  // optional int32 isOk = 11;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isok(), output);
  }
  
  // optional string pic = 12;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pic(), output);
  }
  
  // optional string itemName = 13;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->itemname(), output);
  }
  
  // optional string itemTip = 14;
  if (has_itemtip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemtip().data(), this->itemtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->itemtip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckMails_Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string sendRoleName = 2;
  if (has_sendrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendrolename().data(), this->sendrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendrolename(), target);
  }
  
  // optional string recvRoleName = 3;
  if (has_recvrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvrolename().data(), this->recvrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recvrolename(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional string createTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->createtime(), target);
  }
  
  // optional string mailTitle = 6;
  if (has_mailtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailtitle().data(), this->mailtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mailtitle(), target);
  }
  
  // optional int32 awardType = 7;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->awardtype(), target);
  }
  
  // optional int32 itemId = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->itemid(), target);
  }
  
  // optional int32 itemNum = 9;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->itemnum(), target);
  }
  
  // optional int32 isRead = 10;
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isread(), target);
  }
  
  // optional int32 isOk = 11;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isok(), target);
  }
  
  // optional string pic = 12;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pic(), target);
  }
  
  // optional string itemName = 13;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->itemname(), target);
  }
  
  // optional string itemTip = 14;
  if (has_itemtip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemtip().data(), this->itemtip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->itemtip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckMails_Mail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string sendRoleName = 2;
    if (has_sendrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendrolename());
    }
    
    // optional string recvRoleName = 3;
    if (has_recvrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvrolename());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional string createTime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }
    
    // optional string mailTitle = 6;
    if (has_mailtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailtitle());
    }
    
    // optional int32 awardType = 7;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }
    
    // optional int32 itemId = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 itemNum = 9;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional int32 isRead = 10;
    if (has_isread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isread());
    }
    
    // optional int32 isOk = 11;
    if (has_isok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isok());
    }
    
    // optional string pic = 12;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional string itemName = 13;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }
    
    // optional string itemTip = 14;
    if (has_itemtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemtip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckMails_Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckMails_Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckMails_Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckMails_Mail::MergeFrom(const OGAckMails_Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sendrolename()) {
      set_sendrolename(from.sendrolename());
    }
    if (from.has_recvrolename()) {
      set_recvrolename(from.recvrolename());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_mailtitle()) {
      set_mailtitle(from.mailtitle());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemtip()) {
      set_itemtip(from.itemtip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckMails_Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckMails_Mail::CopyFrom(const OGAckMails_Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckMails_Mail::IsInitialized() const {
  
  return true;
}

void OGAckMails_Mail::Swap(OGAckMails_Mail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sendrolename_, other->sendrolename_);
    std::swap(recvrolename_, other->recvrolename_);
    std::swap(content_, other->content_);
    std::swap(createtime_, other->createtime_);
    std::swap(mailtitle_, other->mailtitle_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(isread_, other->isread_);
    std::swap(isok_, other->isok_);
    std::swap(pic_, other->pic_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemtip_, other->itemtip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckMails_Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckMails_Mail_descriptor_;
  metadata.reflection = OGAckMails_Mail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckMails::kMailListFieldNumber;
#endif  // !_MSC_VER

OGAckMails::OGAckMails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckMails::InitAsDefaultInstance() {
}

OGAckMails::OGAckMails(const OGAckMails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckMails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckMails::~OGAckMails() {
  SharedDtor();
}

void OGAckMails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckMails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckMails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckMails_descriptor_;
}

const OGAckMails& OGAckMails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckMails* OGAckMails::default_instance_ = NULL;

OGAckMails* OGAckMails::New() const {
  return new OGAckMails;
}

void OGAckMails::Clear() {
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckMails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MailList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckMails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckMails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckMails::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckMails.Mail MailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckMails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckMails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckMails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckMails::MergeFrom(const OGAckMails& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckMails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckMails::CopyFrom(const OGAckMails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckMails::IsInitialized() const {
  
  return true;
}

void OGAckMails::Swap(OGAckMails* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckMails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckMails_descriptor_;
  metadata.reflection = OGAckMails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqHandleMails::kTypeFieldNumber;
const int OGReqHandleMails::kIdFieldNumber;
#endif  // !_MSC_VER

OGReqHandleMails::OGReqHandleMails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqHandleMails::InitAsDefaultInstance() {
}

OGReqHandleMails::OGReqHandleMails(const OGReqHandleMails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqHandleMails::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqHandleMails::~OGReqHandleMails() {
  SharedDtor();
}

void OGReqHandleMails::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void OGReqHandleMails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqHandleMails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqHandleMails_descriptor_;
}

const OGReqHandleMails& OGReqHandleMails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqHandleMails* OGReqHandleMails::default_instance_ = NULL;

OGReqHandleMails* OGReqHandleMails::New() const {
  return new OGReqHandleMails;
}

void OGReqHandleMails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqHandleMails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqHandleMails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqHandleMails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqHandleMails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqHandleMails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqHandleMails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqHandleMails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqHandleMails::MergeFrom(const OGReqHandleMails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqHandleMails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqHandleMails::CopyFrom(const OGReqHandleMails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqHandleMails::IsInitialized() const {
  
  return true;
}

void OGReqHandleMails::Swap(OGReqHandleMails* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqHandleMails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqHandleMails_descriptor_;
  metadata.reflection = OGReqHandleMails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqMails::OGReqMails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqMails::InitAsDefaultInstance() {
}

OGReqMails::OGReqMails(const OGReqMails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqMails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqMails::~OGReqMails() {
  SharedDtor();
}

void OGReqMails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqMails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqMails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqMails_descriptor_;
}

const OGReqMails& OGReqMails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqMails* OGReqMails::default_instance_ = NULL;

OGReqMails* OGReqMails::New() const {
  return new OGReqMails;
}

void OGReqMails::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqMails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqMails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqMails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqMails::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqMails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqMails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqMails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqMails::MergeFrom(const OGReqMails& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqMails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqMails::CopyFrom(const OGReqMails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqMails::IsInitialized() const {
  
  return true;
}

void OGReqMails::Swap(OGReqMails* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqMails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqMails_descriptor_;
  metadata.reflection = OGReqMails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckMail::kResultFieldNumber;
const int OGAckMail::kPicFieldNumber;
const int OGAckMail::kNumFieldNumber;
const int OGAckMail::kAwardTypeFieldNumber;
const int OGAckMail::kErrorMsgFieldNumber;
const int OGAckMail::kMailIdFieldNumber;
#endif  // !_MSC_VER

OGAckMail::OGAckMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckMail::InitAsDefaultInstance() {
}

OGAckMail::OGAckMail(const OGAckMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckMail::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  awardtype_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckMail::~OGAckMail() {
  SharedDtor();
}

void OGAckMail::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void OGAckMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckMail_descriptor_;
}

const OGAckMail& OGAckMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckMail* OGAckMail::default_instance_ = NULL;

OGAckMail* OGAckMail::New() const {
  return new OGAckMail;
}

void OGAckMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    num_ = 0;
    awardtype_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
    mailid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pic;
        break;
      }
      
      // optional string pic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awardType;
        break;
      }
      
      // optional int32 awardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mailId;
        break;
      }
      
      // optional int32 mailId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pic(), output);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  // optional int32 awardType = 4;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardtype(), output);
  }
  
  // optional string errorMsg = 5;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errormsg(), output);
  }
  
  // optional int32 mailId = 6;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic(), target);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  // optional int32 awardType = 4;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awardtype(), target);
  }
  
  // optional string errorMsg = 5;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errormsg(), target);
  }
  
  // optional int32 mailId = 6;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string pic = 2;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 awardType = 4;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }
    
    // optional string errorMsg = 5;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
    // optional int32 mailId = 6;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckMail::MergeFrom(const OGAckMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckMail::CopyFrom(const OGAckMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckMail::IsInitialized() const {
  
  return true;
}

void OGAckMail::Swap(OGAckMail* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pic_, other->pic_);
    std::swap(num_, other->num_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckMail_descriptor_;
  metadata.reflection = OGAckMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGAckUnreadMail::OGAckUnreadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckUnreadMail::InitAsDefaultInstance() {
}

OGAckUnreadMail::OGAckUnreadMail(const OGAckUnreadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckUnreadMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckUnreadMail::~OGAckUnreadMail() {
  SharedDtor();
}

void OGAckUnreadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckUnreadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckUnreadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckUnreadMail_descriptor_;
}

const OGAckUnreadMail& OGAckUnreadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckUnreadMail* OGAckUnreadMail::default_instance_ = NULL;

OGAckUnreadMail* OGAckUnreadMail::New() const {
  return new OGAckUnreadMail;
}

void OGAckUnreadMail::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckUnreadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGAckUnreadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckUnreadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckUnreadMail::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckUnreadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckUnreadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckUnreadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckUnreadMail::MergeFrom(const OGAckUnreadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckUnreadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckUnreadMail::CopyFrom(const OGAckUnreadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckUnreadMail::IsInitialized() const {
  
  return true;
}

void OGAckUnreadMail::Swap(OGAckUnreadMail* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckUnreadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckUnreadMail_descriptor_;
  metadata.reflection = OGAckUnreadMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckItems_Item::kIdFieldNumber;
const int OGAckItems_Item::kItemIdFieldNumber;
const int OGAckItems_Item::kItemNumFieldNumber;
const int OGAckItems_Item::kPicFieldNumber;
const int OGAckItems_Item::kNameFieldNumber;
const int OGAckItems_Item::kTypeFieldNumber;
const int OGAckItems_Item::kTipFieldNumber;
const int OGAckItems_Item::kMaxNumFieldNumber;
const int OGAckItems_Item::kEffectFieldNumber;
#endif  // !_MSC_VER

OGAckItems_Item::OGAckItems_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckItems_Item::InitAsDefaultInstance() {
}

OGAckItems_Item::OGAckItems_Item(const OGAckItems_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckItems_Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxnum_ = 0;
  effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckItems_Item::~OGAckItems_Item() {
  SharedDtor();
}

void OGAckItems_Item::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tip_ != &::google::protobuf::internal::kEmptyString) {
    delete tip_;
  }
  if (this != default_instance_) {
  }
}

void OGAckItems_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckItems_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckItems_Item_descriptor_;
}

const OGAckItems_Item& OGAckItems_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckItems_Item* OGAckItems_Item::default_instance_ = NULL;

OGAckItems_Item* OGAckItems_Item::New() const {
  return new OGAckItems_Item;
}

void OGAckItems_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = 0;
    itemnum_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_tip()) {
      if (tip_ != &::google::protobuf::internal::kEmptyString) {
        tip_->clear();
      }
    }
    maxnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckItems_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }
      
      // optional int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pic;
        break;
      }
      
      // optional string pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tip;
        break;
      }
      
      // optional string tip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tip().data(), this->tip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxNum;
        break;
      }
      
      // optional int32 maxNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_effect;
        break;
      }
      
      // optional int32 effect = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckItems_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }
  
  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }
  
  // optional string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pic(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  // optional string tip = 7;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tip(), output);
  }
  
  // optional int32 maxNum = 8;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxnum(), output);
  }
  
  // optional int32 effect = 9;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->effect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckItems_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }
  
  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }
  
  // optional string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pic(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  // optional string tip = 7;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tip(), target);
  }
  
  // optional int32 maxNum = 8;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxnum(), target);
  }
  
  // optional int32 effect = 9;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->effect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckItems_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional string pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string tip = 7;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip());
    }
    
    // optional int32 maxNum = 8;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 effect = 9;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckItems_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckItems_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckItems_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckItems_Item::MergeFrom(const OGAckItems_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tip()) {
      set_tip(from.tip());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckItems_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckItems_Item::CopyFrom(const OGAckItems_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckItems_Item::IsInitialized() const {
  
  return true;
}

void OGAckItems_Item::Swap(OGAckItems_Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(pic_, other->pic_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(tip_, other->tip_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckItems_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckItems_Item_descriptor_;
  metadata.reflection = OGAckItems_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckItems::kItemListFieldNumber;
#endif  // !_MSC_VER

OGAckItems::OGAckItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckItems::InitAsDefaultInstance() {
}

OGAckItems::OGAckItems(const OGAckItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckItems::~OGAckItems() {
  SharedDtor();
}

void OGAckItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckItems_descriptor_;
}

const OGAckItems& OGAckItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckItems* OGAckItems::default_instance_ = NULL;

OGAckItems* OGAckItems::New() const {
  return new OGAckItems;
}

void OGAckItems::Clear() {
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckItems::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckItems.Item ItemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckItems::MergeFrom(const OGAckItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckItems::CopyFrom(const OGAckItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckItems::IsInitialized() const {
  
  return true;
}

void OGAckItems::Swap(OGAckItems* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckItems_descriptor_;
  metadata.reflection = OGAckItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckShopItemInfo_ItemInfo::kItemIdFieldNumber;
const int OGAckShopItemInfo_ItemInfo::kItemPriceFieldNumber;
const int OGAckShopItemInfo_ItemInfo::kShopDescFieldNumber;
const int OGAckShopItemInfo_ItemInfo::kShopPicFieldNumber;
const int OGAckShopItemInfo_ItemInfo::kShopMaxNumFieldNumber;
const int OGAckShopItemInfo_ItemInfo::kItemNameFieldNumber;
#endif  // !_MSC_VER

OGAckShopItemInfo_ItemInfo::OGAckShopItemInfo_ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckShopItemInfo_ItemInfo::InitAsDefaultInstance() {
}

OGAckShopItemInfo_ItemInfo::OGAckShopItemInfo_ItemInfo(const OGAckShopItemInfo_ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckShopItemInfo_ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemprice_ = 0;
  shopdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shoppic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shopmaxnum_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckShopItemInfo_ItemInfo::~OGAckShopItemInfo_ItemInfo() {
  SharedDtor();
}

void OGAckShopItemInfo_ItemInfo::SharedDtor() {
  if (shopdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete shopdesc_;
  }
  if (shoppic_ != &::google::protobuf::internal::kEmptyString) {
    delete shoppic_;
  }
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (this != default_instance_) {
  }
}

void OGAckShopItemInfo_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckShopItemInfo_ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckShopItemInfo_ItemInfo_descriptor_;
}

const OGAckShopItemInfo_ItemInfo& OGAckShopItemInfo_ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckShopItemInfo_ItemInfo* OGAckShopItemInfo_ItemInfo::default_instance_ = NULL;

OGAckShopItemInfo_ItemInfo* OGAckShopItemInfo_ItemInfo::New() const {
  return new OGAckShopItemInfo_ItemInfo;
}

void OGAckShopItemInfo_ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemprice_ = 0;
    if (has_shopdesc()) {
      if (shopdesc_ != &::google::protobuf::internal::kEmptyString) {
        shopdesc_->clear();
      }
    }
    if (has_shoppic()) {
      if (shoppic_ != &::google::protobuf::internal::kEmptyString) {
        shoppic_->clear();
      }
    }
    shopmaxnum_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckShopItemInfo_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemPrice;
        break;
      }
      
      // optional int32 itemPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemprice_)));
          set_has_itemprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shopDesc;
        break;
      }
      
      // optional string shopDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shopdesc().data(), this->shopdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shopPic;
        break;
      }
      
      // optional string shopPic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shoppic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shoppic().data(), this->shoppic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shopMaxNum;
        break;
      }
      
      // optional int32 shopMaxNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopmaxnum_)));
          set_has_shopmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemName;
        break;
      }
      
      // optional string itemName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckShopItemInfo_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 itemPrice = 2;
  if (has_itemprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemprice(), output);
  }
  
  // optional string shopDesc = 3;
  if (has_shopdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopdesc().data(), this->shopdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shopdesc(), output);
  }
  
  // optional string shopPic = 4;
  if (has_shoppic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shoppic().data(), this->shoppic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->shoppic(), output);
  }
  
  // optional int32 shopMaxNum = 5;
  if (has_shopmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shopmaxnum(), output);
  }
  
  // optional string itemName = 6;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->itemname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckShopItemInfo_ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 itemPrice = 2;
  if (has_itemprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemprice(), target);
  }
  
  // optional string shopDesc = 3;
  if (has_shopdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopdesc().data(), this->shopdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shopdesc(), target);
  }
  
  // optional string shopPic = 4;
  if (has_shoppic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shoppic().data(), this->shoppic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shoppic(), target);
  }
  
  // optional int32 shopMaxNum = 5;
  if (has_shopmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shopmaxnum(), target);
  }
  
  // optional string itemName = 6;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->itemname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckShopItemInfo_ItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 itemPrice = 2;
    if (has_itemprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemprice());
    }
    
    // optional string shopDesc = 3;
    if (has_shopdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopdesc());
    }
    
    // optional string shopPic = 4;
    if (has_shoppic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shoppic());
    }
    
    // optional int32 shopMaxNum = 5;
    if (has_shopmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopmaxnum());
    }
    
    // optional string itemName = 6;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckShopItemInfo_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckShopItemInfo_ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckShopItemInfo_ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckShopItemInfo_ItemInfo::MergeFrom(const OGAckShopItemInfo_ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemprice()) {
      set_itemprice(from.itemprice());
    }
    if (from.has_shopdesc()) {
      set_shopdesc(from.shopdesc());
    }
    if (from.has_shoppic()) {
      set_shoppic(from.shoppic());
    }
    if (from.has_shopmaxnum()) {
      set_shopmaxnum(from.shopmaxnum());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckShopItemInfo_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckShopItemInfo_ItemInfo::CopyFrom(const OGAckShopItemInfo_ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckShopItemInfo_ItemInfo::IsInitialized() const {
  
  return true;
}

void OGAckShopItemInfo_ItemInfo::Swap(OGAckShopItemInfo_ItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemprice_, other->itemprice_);
    std::swap(shopdesc_, other->shopdesc_);
    std::swap(shoppic_, other->shoppic_);
    std::swap(shopmaxnum_, other->shopmaxnum_);
    std::swap(itemname_, other->itemname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckShopItemInfo_ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckShopItemInfo_ItemInfo_descriptor_;
  metadata.reflection = OGAckShopItemInfo_ItemInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckShopItemInfo::kShopListFieldNumber;
#endif  // !_MSC_VER

OGAckShopItemInfo::OGAckShopItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckShopItemInfo::InitAsDefaultInstance() {
}

OGAckShopItemInfo::OGAckShopItemInfo(const OGAckShopItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckShopItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckShopItemInfo::~OGAckShopItemInfo() {
  SharedDtor();
}

void OGAckShopItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckShopItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckShopItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckShopItemInfo_descriptor_;
}

const OGAckShopItemInfo& OGAckShopItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckShopItemInfo* OGAckShopItemInfo::default_instance_ = NULL;

OGAckShopItemInfo* OGAckShopItemInfo::New() const {
  return new OGAckShopItemInfo;
}

void OGAckShopItemInfo::Clear() {
  shoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckShopItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShopList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ShopList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckShopItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
  for (int i = 0; i < this->shoplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shoplist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckShopItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
  for (int i = 0; i < this->shoplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shoplist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckShopItemInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckShopItemInfo.ItemInfo ShopList = 1;
  total_size += 1 * this->shoplist_size();
  for (int i = 0; i < this->shoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoplist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckShopItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckShopItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckShopItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckShopItemInfo::MergeFrom(const OGAckShopItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoplist_.MergeFrom(from.shoplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckShopItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckShopItemInfo::CopyFrom(const OGAckShopItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckShopItemInfo::IsInitialized() const {
  
  return true;
}

void OGAckShopItemInfo::Swap(OGAckShopItemInfo* other) {
  if (other != this) {
    shoplist_.Swap(&other->shoplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckShopItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckShopItemInfo_descriptor_;
  metadata.reflection = OGAckShopItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqShopItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

OGReqShopItem::OGReqShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqShopItem::InitAsDefaultInstance() {
}

OGReqShopItem::OGReqShopItem(const OGReqShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqShopItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqShopItem::~OGReqShopItem() {
  SharedDtor();
}

void OGReqShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqShopItem_descriptor_;
}

const OGReqShopItem& OGReqShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqShopItem* OGReqShopItem::default_instance_ = NULL;

OGReqShopItem* OGReqShopItem::New() const {
  return new OGReqShopItem;
}

void OGReqShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqShopItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqShopItem::MergeFrom(const OGReqShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqShopItem::CopyFrom(const OGReqShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqShopItem::IsInitialized() const {
  
  return true;
}

void OGReqShopItem::Swap(OGReqShopItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqShopItem_descriptor_;
  metadata.reflection = OGReqShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckCutItems_Item::kIdFieldNumber;
const int OGAckCutItems_Item::kItemNumFieldNumber;
const int OGAckCutItems_Item::kFlgFieldNumber;
#endif  // !_MSC_VER

OGAckCutItems_Item::OGAckCutItems_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckCutItems_Item::InitAsDefaultInstance() {
}

OGAckCutItems_Item::OGAckCutItems_Item(const OGAckCutItems_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckCutItems_Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemnum_ = 0;
  flg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckCutItems_Item::~OGAckCutItems_Item() {
  SharedDtor();
}

void OGAckCutItems_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckCutItems_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckCutItems_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckCutItems_Item_descriptor_;
}

const OGAckCutItems_Item& OGAckCutItems_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckCutItems_Item* OGAckCutItems_Item::default_instance_ = NULL;

OGAckCutItems_Item* OGAckCutItems_Item::New() const {
  return new OGAckCutItems_Item;
}

void OGAckCutItems_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemnum_ = 0;
    flg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckCutItems_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckCutItems_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }
  
  // optional int32 flg = 3;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckCutItems_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional int32 flg = 3;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckCutItems_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional int32 flg = 3;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckCutItems_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckCutItems_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckCutItems_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckCutItems_Item::MergeFrom(const OGAckCutItems_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckCutItems_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckCutItems_Item::CopyFrom(const OGAckCutItems_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckCutItems_Item::IsInitialized() const {
  
  return true;
}

void OGAckCutItems_Item::Swap(OGAckCutItems_Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(flg_, other->flg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckCutItems_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckCutItems_Item_descriptor_;
  metadata.reflection = OGAckCutItems_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckCutItems::kItemListFieldNumber;
#endif  // !_MSC_VER

OGAckCutItems::OGAckCutItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckCutItems::InitAsDefaultInstance() {
}

OGAckCutItems::OGAckCutItems(const OGAckCutItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckCutItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckCutItems::~OGAckCutItems() {
  SharedDtor();
}

void OGAckCutItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckCutItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckCutItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckCutItems_descriptor_;
}

const OGAckCutItems& OGAckCutItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckCutItems* OGAckCutItems::default_instance_ = NULL;

OGAckCutItems* OGAckCutItems::New() const {
  return new OGAckCutItems;
}

void OGAckCutItems::Clear() {
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckCutItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ItemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckCutItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckCutItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckCutItems::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckCutItems.Item ItemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckCutItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckCutItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckCutItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckCutItems::MergeFrom(const OGAckCutItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckCutItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckCutItems::CopyFrom(const OGAckCutItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckCutItems::IsInitialized() const {
  
  return true;
}

void OGAckCutItems::Swap(OGAckCutItems* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckCutItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckCutItems_descriptor_;
  metadata.reflection = OGAckCutItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckErrorMsg::kContentFieldNumber;
#endif  // !_MSC_VER

OGAckErrorMsg::OGAckErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckErrorMsg::InitAsDefaultInstance() {
}

OGAckErrorMsg::OGAckErrorMsg(const OGAckErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckErrorMsg::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckErrorMsg::~OGAckErrorMsg() {
  SharedDtor();
}

void OGAckErrorMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGAckErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckErrorMsg_descriptor_;
}

const OGAckErrorMsg& OGAckErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckErrorMsg* OGAckErrorMsg::default_instance_ = NULL;

OGAckErrorMsg* OGAckErrorMsg::New() const {
  return new OGAckErrorMsg;
}

void OGAckErrorMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckErrorMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckErrorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckErrorMsg::MergeFrom(const OGAckErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckErrorMsg::CopyFrom(const OGAckErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckErrorMsg::IsInitialized() const {
  
  return true;
}

void OGAckErrorMsg::Swap(OGAckErrorMsg* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckErrorMsg_descriptor_;
  metadata.reflection = OGAckErrorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqBuyItem::kItemIdFieldNumber;
const int OGReqBuyItem::kNumFieldNumber;
#endif  // !_MSC_VER

OGReqBuyItem::OGReqBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqBuyItem::InitAsDefaultInstance() {
}

OGReqBuyItem::OGReqBuyItem(const OGReqBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqBuyItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqBuyItem::~OGReqBuyItem() {
  SharedDtor();
}

void OGReqBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqBuyItem_descriptor_;
}

const OGReqBuyItem& OGReqBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqBuyItem* OGReqBuyItem::default_instance_ = NULL;

OGReqBuyItem* OGReqBuyItem::New() const {
  return new OGReqBuyItem;
}

void OGReqBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqBuyItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqBuyItem::MergeFrom(const OGReqBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqBuyItem::CopyFrom(const OGReqBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqBuyItem::IsInitialized() const {
  
  return true;
}

void OGReqBuyItem::Swap(OGReqBuyItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqBuyItem_descriptor_;
  metadata.reflection = OGReqBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqNewHandOver::OGReqNewHandOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqNewHandOver::InitAsDefaultInstance() {
}

OGReqNewHandOver::OGReqNewHandOver(const OGReqNewHandOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqNewHandOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqNewHandOver::~OGReqNewHandOver() {
  SharedDtor();
}

void OGReqNewHandOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqNewHandOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqNewHandOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqNewHandOver_descriptor_;
}

const OGReqNewHandOver& OGReqNewHandOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqNewHandOver* OGReqNewHandOver::default_instance_ = NULL;

OGReqNewHandOver* OGReqNewHandOver::New() const {
  return new OGReqNewHandOver;
}

void OGReqNewHandOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqNewHandOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqNewHandOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqNewHandOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqNewHandOver::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqNewHandOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqNewHandOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqNewHandOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqNewHandOver::MergeFrom(const OGReqNewHandOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqNewHandOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqNewHandOver::CopyFrom(const OGReqNewHandOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqNewHandOver::IsInitialized() const {
  
  return true;
}

void OGReqNewHandOver::Swap(OGReqNewHandOver* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqNewHandOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqNewHandOver_descriptor_;
  metadata.reflection = OGReqNewHandOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqNewHandAward::OGReqNewHandAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqNewHandAward::InitAsDefaultInstance() {
}

OGReqNewHandAward::OGReqNewHandAward(const OGReqNewHandAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqNewHandAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqNewHandAward::~OGReqNewHandAward() {
  SharedDtor();
}

void OGReqNewHandAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqNewHandAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqNewHandAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqNewHandAward_descriptor_;
}

const OGReqNewHandAward& OGReqNewHandAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqNewHandAward* OGReqNewHandAward::default_instance_ = NULL;

OGReqNewHandAward* OGReqNewHandAward::New() const {
  return new OGReqNewHandAward;
}

void OGReqNewHandAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqNewHandAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqNewHandAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqNewHandAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqNewHandAward::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqNewHandAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqNewHandAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqNewHandAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqNewHandAward::MergeFrom(const OGReqNewHandAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqNewHandAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqNewHandAward::CopyFrom(const OGReqNewHandAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqNewHandAward::IsInitialized() const {
  
  return true;
}

void OGReqNewHandAward::Swap(OGReqNewHandAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqNewHandAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqNewHandAward_descriptor_;
  metadata.reflection = OGReqNewHandAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckNewHandAward::kItemIdFieldNumber;
const int OGAckNewHandAward::kItemNumFieldNumber;
const int OGAckNewHandAward::kPicFieldNumber;
const int OGAckNewHandAward::kNameFieldNumber;
const int OGAckNewHandAward::kDisFieldNumber;
#endif  // !_MSC_VER

OGAckNewHandAward::OGAckNewHandAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckNewHandAward::InitAsDefaultInstance() {
}

OGAckNewHandAward::OGAckNewHandAward(const OGAckNewHandAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckNewHandAward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dis_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckNewHandAward::~OGAckNewHandAward() {
  SharedDtor();
}

void OGAckNewHandAward::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (dis_ != &::google::protobuf::internal::kEmptyString) {
    delete dis_;
  }
  if (this != default_instance_) {
  }
}

void OGAckNewHandAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckNewHandAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckNewHandAward_descriptor_;
}

const OGAckNewHandAward& OGAckNewHandAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckNewHandAward* OGAckNewHandAward::default_instance_ = NULL;

OGAckNewHandAward* OGAckNewHandAward::New() const {
  return new OGAckNewHandAward;
}

void OGAckNewHandAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_dis()) {
      if (dis_ != &::google::protobuf::internal::kEmptyString) {
        dis_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckNewHandAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }
      
      // optional string pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dis;
        break;
      }
      
      // optional string dis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dis()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dis().data(), this->dis().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckNewHandAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }
  
  // optional string pic = 3;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional string dis = 5;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dis().data(), this->dis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dis(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckNewHandAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional string pic = 3;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional string dis = 5;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dis().data(), this->dis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dis(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckNewHandAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional string pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string dis = 5;
    if (has_dis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dis());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckNewHandAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckNewHandAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckNewHandAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckNewHandAward::MergeFrom(const OGAckNewHandAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dis()) {
      set_dis(from.dis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckNewHandAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckNewHandAward::CopyFrom(const OGAckNewHandAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckNewHandAward::IsInitialized() const {
  
  return true;
}

void OGAckNewHandAward::Swap(OGAckNewHandAward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(pic_, other->pic_);
    std::swap(name_, other->name_);
    std::swap(dis_, other->dis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckNewHandAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckNewHandAward_descriptor_;
  metadata.reflection = OGAckNewHandAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPlayerLogot::kUserIdFieldNumber;
#endif  // !_MSC_VER

OGAckPlayerLogot::OGAckPlayerLogot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPlayerLogot::InitAsDefaultInstance() {
}

OGAckPlayerLogot::OGAckPlayerLogot(const OGAckPlayerLogot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPlayerLogot::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPlayerLogot::~OGAckPlayerLogot() {
  SharedDtor();
}

void OGAckPlayerLogot::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OGAckPlayerLogot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPlayerLogot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPlayerLogot_descriptor_;
}

const OGAckPlayerLogot& OGAckPlayerLogot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPlayerLogot* OGAckPlayerLogot::default_instance_ = NULL;

OGAckPlayerLogot* OGAckPlayerLogot::New() const {
  return new OGAckPlayerLogot;
}

void OGAckPlayerLogot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPlayerLogot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPlayerLogot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPlayerLogot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPlayerLogot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPlayerLogot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPlayerLogot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPlayerLogot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPlayerLogot::MergeFrom(const OGAckPlayerLogot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPlayerLogot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPlayerLogot::CopyFrom(const OGAckPlayerLogot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPlayerLogot::IsInitialized() const {
  
  return true;
}

void OGAckPlayerLogot::Swap(OGAckPlayerLogot* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPlayerLogot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPlayerLogot_descriptor_;
  metadata.reflection = OGAckPlayerLogot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckRankHour::kTypeFieldNumber;
const int OGAckRankHour::kWeekFieldNumber;
const int OGAckRankHour::kHourFieldNumber;
const int OGAckRankHour::kMinuteFieldNumber;
#endif  // !_MSC_VER

OGAckRankHour::OGAckRankHour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckRankHour::InitAsDefaultInstance() {
}

OGAckRankHour::OGAckRankHour(const OGAckRankHour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckRankHour::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  week_ = 0;
  hour_ = 0;
  minute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckRankHour::~OGAckRankHour() {
  SharedDtor();
}

void OGAckRankHour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckRankHour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckRankHour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckRankHour_descriptor_;
}

const OGAckRankHour& OGAckRankHour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckRankHour* OGAckRankHour::default_instance_ = NULL;

OGAckRankHour* OGAckRankHour::New() const {
  return new OGAckRankHour;
}

void OGAckRankHour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    week_ = 0;
    hour_ = 0;
    minute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckRankHour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week;
        break;
      }
      
      // optional int32 week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hour;
        break;
      }
      
      // optional int32 hour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minute;
        break;
      }
      
      // optional int32 minute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckRankHour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->week(), output);
  }
  
  // optional int32 hour = 3;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hour(), output);
  }
  
  // optional int32 minute = 4;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckRankHour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->week(), target);
  }
  
  // optional int32 hour = 3;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hour(), target);
  }
  
  // optional int32 minute = 4;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckRankHour::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 week = 2;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }
    
    // optional int32 hour = 3;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }
    
    // optional int32 minute = 4;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckRankHour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckRankHour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckRankHour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckRankHour::MergeFrom(const OGAckRankHour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckRankHour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckRankHour::CopyFrom(const OGAckRankHour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckRankHour::IsInitialized() const {
  
  return true;
}

void OGAckRankHour::Swap(OGAckRankHour* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(week_, other->week_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckRankHour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckRankHour_descriptor_;
  metadata.reflection = OGAckRankHour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqJpRecord::kRoleNameFieldNumber;
#endif  // !_MSC_VER

OGReqJpRecord::OGReqJpRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqJpRecord::InitAsDefaultInstance() {
}

OGReqJpRecord::OGReqJpRecord(const OGReqJpRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqJpRecord::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqJpRecord::~OGReqJpRecord() {
  SharedDtor();
}

void OGReqJpRecord::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqJpRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqJpRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqJpRecord_descriptor_;
}

const OGReqJpRecord& OGReqJpRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqJpRecord* OGReqJpRecord::default_instance_ = NULL;

OGReqJpRecord* OGReqJpRecord::New() const {
  return new OGReqJpRecord;
}

void OGReqJpRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqJpRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqJpRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqJpRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqJpRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqJpRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqJpRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqJpRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqJpRecord::MergeFrom(const OGReqJpRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqJpRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqJpRecord::CopyFrom(const OGReqJpRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqJpRecord::IsInitialized() const {
  
  return true;
}

void OGReqJpRecord::Swap(OGReqJpRecord* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqJpRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqJpRecord_descriptor_;
  metadata.reflection = OGReqJpRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqJpStar::kRoleNameFieldNumber;
const int OGReqJpStar::kJpStarNameFieldNumber;
const int OGReqJpStar::kJpStarTemNumFieldNumber;
const int OGReqJpStar::kJpStarTimeFieldNumber;
#endif  // !_MSC_VER

OGReqJpStar::OGReqJpStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqJpStar::InitAsDefaultInstance() {
}

OGReqJpStar::OGReqJpStar(const OGReqJpStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqJpStar::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jpstartemnum_ = GOOGLE_LONGLONG(0);
  jpstartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqJpStar::~OGReqJpStar() {
  SharedDtor();
}

void OGReqJpStar::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    delete jpstarname_;
  }
  if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
    delete jpstartime_;
  }
  if (this != default_instance_) {
  }
}

void OGReqJpStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqJpStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqJpStar_descriptor_;
}

const OGReqJpStar& OGReqJpStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqJpStar* OGReqJpStar::default_instance_ = NULL;

OGReqJpStar* OGReqJpStar::New() const {
  return new OGReqJpStar;
}

void OGReqJpStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_jpstarname()) {
      if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
        jpstarname_->clear();
      }
    }
    jpstartemnum_ = GOOGLE_LONGLONG(0);
    if (has_jpstartime()) {
      if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
        jpstartime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqJpStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_jpStarName;
        break;
      }
      
      // optional string jpStarName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpStarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpstarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpstarname().data(), this->jpstarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jpStarTemNum;
        break;
      }
      
      // optional int64 jpStarTemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpStarTemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jpstartemnum_)));
          set_has_jpstartemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jpStarTime;
        break;
      }
      
      // optional string jpStarTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpStarTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpstartime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpstartime().data(), this->jpstartime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqJpStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional string jpStarName = 2;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->jpstarname(), output);
  }
  
  // optional int64 jpStarTemNum = 3;
  if (has_jpstartemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jpstartemnum(), output);
  }
  
  // optional string jpStarTime = 4;
  if (has_jpstartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstartime().data(), this->jpstartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jpstartime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqJpStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional string jpStarName = 2;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->jpstarname(), target);
  }
  
  // optional int64 jpStarTemNum = 3;
  if (has_jpstartemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jpstartemnum(), target);
  }
  
  // optional string jpStarTime = 4;
  if (has_jpstartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstartime().data(), this->jpstartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jpstartime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqJpStar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string jpStarName = 2;
    if (has_jpstarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpstarname());
    }
    
    // optional int64 jpStarTemNum = 3;
    if (has_jpstartemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jpstartemnum());
    }
    
    // optional string jpStarTime = 4;
    if (has_jpstartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpstartime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqJpStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqJpStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqJpStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqJpStar::MergeFrom(const OGReqJpStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_jpstarname()) {
      set_jpstarname(from.jpstarname());
    }
    if (from.has_jpstartemnum()) {
      set_jpstartemnum(from.jpstartemnum());
    }
    if (from.has_jpstartime()) {
      set_jpstartime(from.jpstartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqJpStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqJpStar::CopyFrom(const OGReqJpStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqJpStar::IsInitialized() const {
  
  return true;
}

void OGReqJpStar::Swap(OGReqJpStar* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(jpstarname_, other->jpstarname_);
    std::swap(jpstartemnum_, other->jpstartemnum_);
    std::swap(jpstartime_, other->jpstartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqJpStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqJpStar_descriptor_;
  metadata.reflection = OGReqJpStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckJpRecord_JpRecord::kUserIdFieldNumber;
const int OGAckJpRecord_JpRecord::kRoleNameFieldNumber;
const int OGAckJpRecord_JpRecord::kWinGoldFieldNumber;
const int OGAckJpRecord_JpRecord::kCurrJpFieldNumber;
const int OGAckJpRecord_JpRecord::kShowTypeFieldNumber;
const int OGAckJpRecord_JpRecord::kGameNameFieldNumber;
const int OGAckJpRecord_JpRecord::kCreatetimeFieldNumber;
const int OGAckJpRecord_JpRecord::kGameIdFieldNumber;
#endif  // !_MSC_VER

OGAckJpRecord_JpRecord::OGAckJpRecord_JpRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJpRecord_JpRecord::InitAsDefaultInstance() {
}

OGAckJpRecord_JpRecord::OGAckJpRecord_JpRecord(const OGAckJpRecord_JpRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJpRecord_JpRecord::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wingold_ = GOOGLE_LONGLONG(0);
  currjp_ = GOOGLE_LONGLONG(0);
  showtype_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJpRecord_JpRecord::~OGAckJpRecord_JpRecord() {
  SharedDtor();
}

void OGAckJpRecord_JpRecord::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete gamename_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void OGAckJpRecord_JpRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJpRecord_JpRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJpRecord_JpRecord_descriptor_;
}

const OGAckJpRecord_JpRecord& OGAckJpRecord_JpRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJpRecord_JpRecord* OGAckJpRecord_JpRecord::default_instance_ = NULL;

OGAckJpRecord_JpRecord* OGAckJpRecord_JpRecord::New() const {
  return new OGAckJpRecord_JpRecord;
}

void OGAckJpRecord_JpRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    wingold_ = GOOGLE_LONGLONG(0);
    currjp_ = GOOGLE_LONGLONG(0);
    showtype_ = 0;
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::kEmptyString) {
        gamename_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJpRecord_JpRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winGold;
        break;
      }
      
      // required int64 winGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingold_)));
          set_has_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currJp;
        break;
      }
      
      // required int64 currJp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currJp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currjp_)));
          set_has_currjp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showType;
        break;
      }
      
      // required int32 showType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtype_)));
          set_has_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gameName;
        break;
      }
      
      // required string gameName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_createtime;
        break;
      }
      
      // required string createtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gameId;
        break;
      }
      
      // required int32 gameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJpRecord_JpRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // required int64 winGold = 3;
  if (has_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wingold(), output);
  }
  
  // required int64 currJp = 4;
  if (has_currjp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->currjp(), output);
  }
  
  // required int32 showType = 5;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showtype(), output);
  }
  
  // required string gameName = 6;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gamename(), output);
  }
  
  // required string createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->createtime(), output);
  }
  
  // required int32 gameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJpRecord_JpRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // required int64 winGold = 3;
  if (has_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wingold(), target);
  }
  
  // required int64 currJp = 4;
  if (has_currjp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->currjp(), target);
  }
  
  // required int32 showType = 5;
  if (has_showtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->showtype(), target);
  }
  
  // required string gameName = 6;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gamename(), target);
  }
  
  // required string createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createtime(), target);
  }
  
  // required int32 gameId = 8;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJpRecord_JpRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int64 winGold = 3;
    if (has_wingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingold());
    }
    
    // required int64 currJp = 4;
    if (has_currjp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currjp());
    }
    
    // required int32 showType = 5;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtype());
    }
    
    // required string gameName = 6;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }
    
    // required string createtime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }
    
    // required int32 gameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJpRecord_JpRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJpRecord_JpRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJpRecord_JpRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJpRecord_JpRecord::MergeFrom(const OGAckJpRecord_JpRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_wingold()) {
      set_wingold(from.wingold());
    }
    if (from.has_currjp()) {
      set_currjp(from.currjp());
    }
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJpRecord_JpRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJpRecord_JpRecord::CopyFrom(const OGAckJpRecord_JpRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJpRecord_JpRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void OGAckJpRecord_JpRecord::Swap(OGAckJpRecord_JpRecord* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(rolename_, other->rolename_);
    std::swap(wingold_, other->wingold_);
    std::swap(currjp_, other->currjp_);
    std::swap(showtype_, other->showtype_);
    std::swap(gamename_, other->gamename_);
    std::swap(createtime_, other->createtime_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJpRecord_JpRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJpRecord_JpRecord_descriptor_;
  metadata.reflection = OGAckJpRecord_JpRecord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckJpRecord::kJpRecordListFieldNumber;
const int OGAckJpRecord::kTipOnFieldNumber;
const int OGAckJpRecord::kTipTextFieldNumber;
#endif  // !_MSC_VER

OGAckJpRecord::OGAckJpRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJpRecord::InitAsDefaultInstance() {
}

OGAckJpRecord::OGAckJpRecord(const OGAckJpRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJpRecord::SharedCtor() {
  _cached_size_ = 0;
  tipon_ = 0;
  tiptext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJpRecord::~OGAckJpRecord() {
  SharedDtor();
}

void OGAckJpRecord::SharedDtor() {
  if (tiptext_ != &::google::protobuf::internal::kEmptyString) {
    delete tiptext_;
  }
  if (this != default_instance_) {
  }
}

void OGAckJpRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJpRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJpRecord_descriptor_;
}

const OGAckJpRecord& OGAckJpRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJpRecord* OGAckJpRecord::default_instance_ = NULL;

OGAckJpRecord* OGAckJpRecord::New() const {
  return new OGAckJpRecord;
}

void OGAckJpRecord::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    tipon_ = 0;
    if (has_tiptext()) {
      if (tiptext_ != &::google::protobuf::internal::kEmptyString) {
        tiptext_->clear();
      }
    }
  }
  jprecordlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJpRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JpRecordList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jprecordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_JpRecordList;
        if (input->ExpectTag(16)) goto parse_tipOn;
        break;
      }
      
      // required int32 tipOn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tipOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipon_)));
          set_has_tipon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tipText;
        break;
      }
      
      // optional string tipText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tipText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiptext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiptext().data(), this->tiptext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJpRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
  for (int i = 0; i < this->jprecordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jprecordlist(i), output);
  }
  
  // required int32 tipOn = 2;
  if (has_tipon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tipon(), output);
  }
  
  // optional string tipText = 3;
  if (has_tiptext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiptext().data(), this->tiptext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tiptext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJpRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
  for (int i = 0; i < this->jprecordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jprecordlist(i), target);
  }
  
  // required int32 tipOn = 2;
  if (has_tipon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tipon(), target);
  }
  
  // optional string tipText = 3;
  if (has_tiptext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiptext().data(), this->tiptext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tiptext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJpRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 tipOn = 2;
    if (has_tipon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipon());
    }
    
    // optional string tipText = 3;
    if (has_tiptext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiptext());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckJpRecord.JpRecord JpRecordList = 1;
  total_size += 1 * this->jprecordlist_size();
  for (int i = 0; i < this->jprecordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jprecordlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJpRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJpRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJpRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJpRecord::MergeFrom(const OGAckJpRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  jprecordlist_.MergeFrom(from.jprecordlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tipon()) {
      set_tipon(from.tipon());
    }
    if (from.has_tiptext()) {
      set_tiptext(from.tiptext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJpRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJpRecord::CopyFrom(const OGAckJpRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJpRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < jprecordlist_size(); i++) {
    if (!this->jprecordlist(i).IsInitialized()) return false;
  }
  return true;
}

void OGAckJpRecord::Swap(OGAckJpRecord* other) {
  if (other != this) {
    jprecordlist_.Swap(&other->jprecordlist_);
    std::swap(tipon_, other->tipon_);
    std::swap(tiptext_, other->tiptext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJpRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJpRecord_descriptor_;
  metadata.reflection = OGAckJpRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckLoginJpMsg::kContentFieldNumber;
#endif  // !_MSC_VER

OGAckLoginJpMsg::OGAckLoginJpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLoginJpMsg::InitAsDefaultInstance() {
}

OGAckLoginJpMsg::OGAckLoginJpMsg(const OGAckLoginJpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLoginJpMsg::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLoginJpMsg::~OGAckLoginJpMsg() {
  SharedDtor();
}

void OGAckLoginJpMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGAckLoginJpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLoginJpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLoginJpMsg_descriptor_;
}

const OGAckLoginJpMsg& OGAckLoginJpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLoginJpMsg* OGAckLoginJpMsg::default_instance_ = NULL;

OGAckLoginJpMsg* OGAckLoginJpMsg::New() const {
  return new OGAckLoginJpMsg;
}

void OGAckLoginJpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLoginJpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckLoginJpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLoginJpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLoginJpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLoginJpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLoginJpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLoginJpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLoginJpMsg::MergeFrom(const OGAckLoginJpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLoginJpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLoginJpMsg::CopyFrom(const OGAckLoginJpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLoginJpMsg::IsInitialized() const {
  
  return true;
}

void OGAckLoginJpMsg::Swap(OGAckLoginJpMsg* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLoginJpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLoginJpMsg_descriptor_;
  metadata.reflection = OGAckLoginJpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqLoginGetAward::kRoleNameFieldNumber;
const int OGReqLoginGetAward::kLevFieldNumber;
#endif  // !_MSC_VER

OGReqLoginGetAward::OGReqLoginGetAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqLoginGetAward::InitAsDefaultInstance() {
}

OGReqLoginGetAward::OGReqLoginGetAward(const OGReqLoginGetAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqLoginGetAward::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqLoginGetAward::~OGReqLoginGetAward() {
  SharedDtor();
}

void OGReqLoginGetAward::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqLoginGetAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqLoginGetAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqLoginGetAward_descriptor_;
}

const OGReqLoginGetAward& OGReqLoginGetAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqLoginGetAward* OGReqLoginGetAward::default_instance_ = NULL;

OGReqLoginGetAward* OGReqLoginGetAward::New() const {
  return new OGReqLoginGetAward;
}

void OGReqLoginGetAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqLoginGetAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lev;
        break;
      }
      
      // optional int32 lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqLoginGetAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional int32 lev = 2;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqLoginGetAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional int32 lev = 2;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqLoginGetAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 lev = 2;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqLoginGetAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqLoginGetAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqLoginGetAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqLoginGetAward::MergeFrom(const OGReqLoginGetAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqLoginGetAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqLoginGetAward::CopyFrom(const OGReqLoginGetAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqLoginGetAward::IsInitialized() const {
  
  return true;
}

void OGReqLoginGetAward::Swap(OGReqLoginGetAward* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(lev_, other->lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqLoginGetAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqLoginGetAward_descriptor_;
  metadata.reflection = OGReqLoginGetAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckLoginGetAward::kPosFieldNumber;
const int OGAckLoginGetAward::kPicFieldNumber;
const int OGAckLoginGetAward::kContentFieldNumber;
const int OGAckLoginGetAward::kItemtypeFieldNumber;
const int OGAckLoginGetAward::kItemidFieldNumber;
const int OGAckLoginGetAward::kNumFieldNumber;
const int OGAckLoginGetAward::kRoleNameFieldNumber;
const int OGAckLoginGetAward::kOkFieldNumber;
const int OGAckLoginGetAward::kJilvFieldNumber;
#endif  // !_MSC_VER

OGAckLoginGetAward::OGAckLoginGetAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLoginGetAward::InitAsDefaultInstance() {
}

OGAckLoginGetAward::OGAckLoginGetAward(const OGAckLoginGetAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLoginGetAward::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemtype_ = 0;
  itemid_ = 0;
  num_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ok_ = 0;
  jilv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLoginGetAward::~OGAckLoginGetAward() {
  SharedDtor();
}

void OGAckLoginGetAward::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckLoginGetAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLoginGetAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLoginGetAward_descriptor_;
}

const OGAckLoginGetAward& OGAckLoginGetAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLoginGetAward* OGAckLoginGetAward::default_instance_ = NULL;

OGAckLoginGetAward* OGAckLoginGetAward::New() const {
  return new OGAckLoginGetAward;
}

void OGAckLoginGetAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    itemtype_ = 0;
    itemid_ = 0;
    num_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    ok_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jilv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLoginGetAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pic;
        break;
      }
      
      // optional string pic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemtype;
        break;
      }
      
      // optional int32 itemtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }
      
      // optional int32 itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }
      
      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ok;
        break;
      }
      
      // optional int32 ok = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jilv;
        break;
      }
      
      // optional int32 jilv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jilv_)));
          set_has_jilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckLoginGetAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pic(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  // optional int32 itemtype = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemtype(), output);
  }
  
  // optional int32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemid(), output);
  }
  
  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }
  
  // optional string roleName = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rolename(), output);
  }
  
  // optional int32 ok = 8;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ok(), output);
  }
  
  // optional int32 jilv = 9;
  if (has_jilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->jilv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLoginGetAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  // optional int32 itemtype = 4;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemtype(), target);
  }
  
  // optional int32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemid(), target);
  }
  
  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }
  
  // optional string roleName = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rolename(), target);
  }
  
  // optional int32 ok = 8;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ok(), target);
  }
  
  // optional int32 jilv = 9;
  if (has_jilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->jilv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLoginGetAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional string pic = 2;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 itemtype = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }
    
    // optional int32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional string roleName = 7;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 ok = 8;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 jilv = 9;
    if (has_jilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jilv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLoginGetAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLoginGetAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLoginGetAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLoginGetAward::MergeFrom(const OGAckLoginGetAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jilv()) {
      set_jilv(from.jilv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLoginGetAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLoginGetAward::CopyFrom(const OGAckLoginGetAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLoginGetAward::IsInitialized() const {
  
  return true;
}

void OGAckLoginGetAward::Swap(OGAckLoginGetAward* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(pic_, other->pic_);
    std::swap(content_, other->content_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(rolename_, other->rolename_);
    std::swap(ok_, other->ok_);
    std::swap(jilv_, other->jilv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLoginGetAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLoginGetAward_descriptor_;
  metadata.reflection = OGAckLoginGetAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckLoginAwardList_Award::kPosFieldNumber;
const int OGAckLoginAwardList_Award::kPicFieldNumber;
const int OGAckLoginAwardList_Award::kLevFieldNumber;
const int OGAckLoginAwardList_Award::kContentFieldNumber;
const int OGAckLoginAwardList_Award::kNumFieldNumber;
const int OGAckLoginAwardList_Award::kTypeFieldNumber;
#endif  // !_MSC_VER

OGAckLoginAwardList_Award::OGAckLoginAwardList_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLoginAwardList_Award::InitAsDefaultInstance() {
}

OGAckLoginAwardList_Award::OGAckLoginAwardList_Award(const OGAckLoginAwardList_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLoginAwardList_Award::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lev_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLoginAwardList_Award::~OGAckLoginAwardList_Award() {
  SharedDtor();
}

void OGAckLoginAwardList_Award::SharedDtor() {
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGAckLoginAwardList_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLoginAwardList_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLoginAwardList_Award_descriptor_;
}

const OGAckLoginAwardList_Award& OGAckLoginAwardList_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLoginAwardList_Award* OGAckLoginAwardList_Award::default_instance_ = NULL;

OGAckLoginAwardList_Award* OGAckLoginAwardList_Award::New() const {
  return new OGAckLoginAwardList_Award;
}

void OGAckLoginAwardList_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    lev_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    num_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLoginAwardList_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pic;
        break;
      }
      
      // optional string pic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lev;
        break;
      }
      
      // optional int32 lev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }
      
      // optional int32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckLoginAwardList_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pic(), output);
  }
  
  // optional int32 lev = 3;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lev(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLoginAwardList_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional string pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic(), target);
  }
  
  // optional int32 lev = 3;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lev(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLoginAwardList_Award::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional string pic = 2;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }
    
    // optional int32 lev = 3;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLoginAwardList_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLoginAwardList_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLoginAwardList_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLoginAwardList_Award::MergeFrom(const OGAckLoginAwardList_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLoginAwardList_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLoginAwardList_Award::CopyFrom(const OGAckLoginAwardList_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLoginAwardList_Award::IsInitialized() const {
  
  return true;
}

void OGAckLoginAwardList_Award::Swap(OGAckLoginAwardList_Award* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(pic_, other->pic_);
    std::swap(lev_, other->lev_);
    std::swap(content_, other->content_);
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLoginAwardList_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLoginAwardList_Award_descriptor_;
  metadata.reflection = OGAckLoginAwardList_Award_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckLoginAwardList::kAwardListFieldNumber;
const int OGAckLoginAwardList::kRoleNameFieldNumber;
#endif  // !_MSC_VER

OGAckLoginAwardList::OGAckLoginAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLoginAwardList::InitAsDefaultInstance() {
}

OGAckLoginAwardList::OGAckLoginAwardList(const OGAckLoginAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLoginAwardList::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLoginAwardList::~OGAckLoginAwardList() {
  SharedDtor();
}

void OGAckLoginAwardList::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckLoginAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLoginAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLoginAwardList_descriptor_;
}

const OGAckLoginAwardList& OGAckLoginAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLoginAwardList* OGAckLoginAwardList::default_instance_ = NULL;

OGAckLoginAwardList* OGAckLoginAwardList::New() const {
  return new OGAckLoginAwardList;
}

void OGAckLoginAwardList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLoginAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AwardList;
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckLoginAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awardlist(i), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLoginAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awardlist(i), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLoginAwardList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  // repeated .com.ourgame.texasSlots.OGAckLoginAwardList.Award AwardList = 1;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLoginAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLoginAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLoginAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLoginAwardList::MergeFrom(const OGAckLoginAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLoginAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLoginAwardList::CopyFrom(const OGAckLoginAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLoginAwardList::IsInitialized() const {
  
  return true;
}

void OGAckLoginAwardList::Swap(OGAckLoginAwardList* other) {
  if (other != this) {
    awardlist_.Swap(&other->awardlist_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLoginAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLoginAwardList_descriptor_;
  metadata.reflection = OGAckLoginAwardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqDoubleJpResult::kNeedGoldFieldNumber;
const int OGReqDoubleJpResult::kRoleNameFieldNumber;
const int OGReqDoubleJpResult::kUserIdFieldNumber;
const int OGReqDoubleJpResult::kDaygoldFieldNumber;
const int OGReqDoubleJpResult::kWeekgoldFieldNumber;
const int OGReqDoubleJpResult::kMonthgoldFieldNumber;
#endif  // !_MSC_VER

OGReqDoubleJpResult::OGReqDoubleJpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqDoubleJpResult::InitAsDefaultInstance() {
}

OGReqDoubleJpResult::OGReqDoubleJpResult(const OGReqDoubleJpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqDoubleJpResult::SharedCtor() {
  _cached_size_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  daygold_ = GOOGLE_LONGLONG(0);
  weekgold_ = GOOGLE_LONGLONG(0);
  monthgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqDoubleJpResult::~OGReqDoubleJpResult() {
  SharedDtor();
}

void OGReqDoubleJpResult::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OGReqDoubleJpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqDoubleJpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqDoubleJpResult_descriptor_;
}

const OGReqDoubleJpResult& OGReqDoubleJpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqDoubleJpResult* OGReqDoubleJpResult::default_instance_ = NULL;

OGReqDoubleJpResult* OGReqDoubleJpResult::New() const {
  return new OGReqDoubleJpResult;
}

void OGReqDoubleJpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needgold_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    daygold_ = GOOGLE_LONGLONG(0);
    weekgold_ = GOOGLE_LONGLONG(0);
    monthgold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqDoubleJpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 needGold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userId;
        break;
      }
      
      // optional string userId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_daygold;
        break;
      }
      
      // optional int64 daygold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daygold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daygold_)));
          set_has_daygold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weekgold;
        break;
      }
      
      // optional int64 weekgold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weekgold_)));
          set_has_weekgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monthgold;
        break;
      }
      
      // optional int64 monthgold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monthgold_)));
          set_has_monthgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqDoubleJpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 needGold = 1;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->needgold(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional string userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // optional int64 daygold = 4;
  if (has_daygold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->daygold(), output);
  }
  
  // optional int64 weekgold = 5;
  if (has_weekgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->weekgold(), output);
  }
  
  // optional int64 monthgold = 6;
  if (has_monthgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->monthgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqDoubleJpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 needGold = 1;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->needgold(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional string userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // optional int64 daygold = 4;
  if (has_daygold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->daygold(), target);
  }
  
  // optional int64 weekgold = 5;
  if (has_weekgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->weekgold(), target);
  }
  
  // optional int64 monthgold = 6;
  if (has_monthgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->monthgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqDoubleJpResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 needGold = 1;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional int64 daygold = 4;
    if (has_daygold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daygold());
    }
    
    // optional int64 weekgold = 5;
    if (has_weekgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weekgold());
    }
    
    // optional int64 monthgold = 6;
    if (has_monthgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monthgold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqDoubleJpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqDoubleJpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqDoubleJpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqDoubleJpResult::MergeFrom(const OGReqDoubleJpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_daygold()) {
      set_daygold(from.daygold());
    }
    if (from.has_weekgold()) {
      set_weekgold(from.weekgold());
    }
    if (from.has_monthgold()) {
      set_monthgold(from.monthgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqDoubleJpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqDoubleJpResult::CopyFrom(const OGReqDoubleJpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqDoubleJpResult::IsInitialized() const {
  
  return true;
}

void OGReqDoubleJpResult::Swap(OGReqDoubleJpResult* other) {
  if (other != this) {
    std::swap(needgold_, other->needgold_);
    std::swap(rolename_, other->rolename_);
    std::swap(userid_, other->userid_);
    std::swap(daygold_, other->daygold_);
    std::swap(weekgold_, other->weekgold_);
    std::swap(monthgold_, other->monthgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqDoubleJpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqDoubleJpResult_descriptor_;
  metadata.reflection = OGReqDoubleJpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckDoubleJpResult::kGoldFieldNumber;
const int OGAckDoubleJpResult::kRoleNameFieldNumber;
const int OGAckDoubleJpResult::kNeedGoldFieldNumber;
const int OGAckDoubleJpResult::kJpFieldNumber;
const int OGAckDoubleJpResult::kIdFieldNumber;
const int OGAckDoubleJpResult::kJilv1FieldNumber;
const int OGAckDoubleJpResult::kJilv2FieldNumber;
#endif  // !_MSC_VER

OGAckDoubleJpResult::OGAckDoubleJpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckDoubleJpResult::InitAsDefaultInstance() {
}

OGAckDoubleJpResult::OGAckDoubleJpResult(const OGAckDoubleJpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckDoubleJpResult::SharedCtor() {
  _cached_size_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgold_ = GOOGLE_LONGLONG(0);
  jp_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  jilv1_ = 0;
  jilv2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckDoubleJpResult::~OGAckDoubleJpResult() {
  SharedDtor();
}

void OGAckDoubleJpResult::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckDoubleJpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckDoubleJpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoubleJpResult_descriptor_;
}

const OGAckDoubleJpResult& OGAckDoubleJpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckDoubleJpResult* OGAckDoubleJpResult::default_instance_ = NULL;

OGAckDoubleJpResult* OGAckDoubleJpResult::New() const {
  return new OGAckDoubleJpResult;
}

void OGAckDoubleJpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    needgold_ = GOOGLE_LONGLONG(0);
    jp_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    jilv1_ = 0;
    jilv2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckDoubleJpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needGold;
        break;
      }
      
      // optional int64 needGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jp;
        break;
      }
      
      // optional int64 jp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jp_)));
          set_has_jp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // optional int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jilv1;
        break;
      }
      
      // optional int32 jilv1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jilv1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jilv1_)));
          set_has_jilv1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jilv2;
        break;
      }
      
      // optional int32 jilv2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jilv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jilv2_)));
          set_has_jilv2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckDoubleJpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gold(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional int64 needGold = 3;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->needgold(), output);
  }
  
  // optional int64 jp = 4;
  if (has_jp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->jp(), output);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }
  
  // optional int32 jilv1 = 6;
  if (has_jilv1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jilv1(), output);
  }
  
  // optional int32 jilv2 = 7;
  if (has_jilv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jilv2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckDoubleJpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gold(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional int64 needGold = 3;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->needgold(), target);
  }
  
  // optional int64 jp = 4;
  if (has_jp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->jp(), target);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }
  
  // optional int32 jilv1 = 6;
  if (has_jilv1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jilv1(), target);
  }
  
  // optional int32 jilv2 = 7;
  if (has_jilv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jilv2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckDoubleJpResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 needGold = 3;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }
    
    // optional int64 jp = 4;
    if (has_jp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jp());
    }
    
    // optional int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 jilv1 = 6;
    if (has_jilv1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jilv1());
    }
    
    // optional int32 jilv2 = 7;
    if (has_jilv2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jilv2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckDoubleJpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckDoubleJpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckDoubleJpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckDoubleJpResult::MergeFrom(const OGAckDoubleJpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_jp()) {
      set_jp(from.jp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jilv1()) {
      set_jilv1(from.jilv1());
    }
    if (from.has_jilv2()) {
      set_jilv2(from.jilv2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckDoubleJpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckDoubleJpResult::CopyFrom(const OGAckDoubleJpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckDoubleJpResult::IsInitialized() const {
  
  return true;
}

void OGAckDoubleJpResult::Swap(OGAckDoubleJpResult* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(rolename_, other->rolename_);
    std::swap(needgold_, other->needgold_);
    std::swap(jp_, other->jp_);
    std::swap(id_, other->id_);
    std::swap(jilv1_, other->jilv1_);
    std::swap(jilv2_, other->jilv2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckDoubleJpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckDoubleJpResult_descriptor_;
  metadata.reflection = OGAckDoubleJpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckDoublePlus_DoublePlus::kStartLevFieldNumber;
const int OGAckDoublePlus_DoublePlus::kPlusFieldNumber;
#endif  // !_MSC_VER

OGAckDoublePlus_DoublePlus::OGAckDoublePlus_DoublePlus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckDoublePlus_DoublePlus::InitAsDefaultInstance() {
}

OGAckDoublePlus_DoublePlus::OGAckDoublePlus_DoublePlus(const OGAckDoublePlus_DoublePlus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckDoublePlus_DoublePlus::SharedCtor() {
  _cached_size_ = 0;
  startlev_ = 0;
  plus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckDoublePlus_DoublePlus::~OGAckDoublePlus_DoublePlus() {
  SharedDtor();
}

void OGAckDoublePlus_DoublePlus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckDoublePlus_DoublePlus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckDoublePlus_DoublePlus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoublePlus_DoublePlus_descriptor_;
}

const OGAckDoublePlus_DoublePlus& OGAckDoublePlus_DoublePlus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckDoublePlus_DoublePlus* OGAckDoublePlus_DoublePlus::default_instance_ = NULL;

OGAckDoublePlus_DoublePlus* OGAckDoublePlus_DoublePlus::New() const {
  return new OGAckDoublePlus_DoublePlus;
}

void OGAckDoublePlus_DoublePlus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startlev_ = 0;
    plus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckDoublePlus_DoublePlus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startLev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startlev_)));
          set_has_startlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plus;
        break;
      }
      
      // optional int32 plus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plus_)));
          set_has_plus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckDoublePlus_DoublePlus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startLev = 1;
  if (has_startlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startlev(), output);
  }
  
  // optional int32 plus = 2;
  if (has_plus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckDoublePlus_DoublePlus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startLev = 1;
  if (has_startlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startlev(), target);
  }
  
  // optional int32 plus = 2;
  if (has_plus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckDoublePlus_DoublePlus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startLev = 1;
    if (has_startlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startlev());
    }
    
    // optional int32 plus = 2;
    if (has_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckDoublePlus_DoublePlus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckDoublePlus_DoublePlus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckDoublePlus_DoublePlus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckDoublePlus_DoublePlus::MergeFrom(const OGAckDoublePlus_DoublePlus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startlev()) {
      set_startlev(from.startlev());
    }
    if (from.has_plus()) {
      set_plus(from.plus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckDoublePlus_DoublePlus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckDoublePlus_DoublePlus::CopyFrom(const OGAckDoublePlus_DoublePlus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckDoublePlus_DoublePlus::IsInitialized() const {
  
  return true;
}

void OGAckDoublePlus_DoublePlus::Swap(OGAckDoublePlus_DoublePlus* other) {
  if (other != this) {
    std::swap(startlev_, other->startlev_);
    std::swap(plus_, other->plus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckDoublePlus_DoublePlus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckDoublePlus_DoublePlus_descriptor_;
  metadata.reflection = OGAckDoublePlus_DoublePlus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckDoublePlus::kDoublePlusListFieldNumber;
#endif  // !_MSC_VER

OGAckDoublePlus::OGAckDoublePlus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckDoublePlus::InitAsDefaultInstance() {
}

OGAckDoublePlus::OGAckDoublePlus(const OGAckDoublePlus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckDoublePlus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckDoublePlus::~OGAckDoublePlus() {
  SharedDtor();
}

void OGAckDoublePlus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckDoublePlus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckDoublePlus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckDoublePlus_descriptor_;
}

const OGAckDoublePlus& OGAckDoublePlus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckDoublePlus* OGAckDoublePlus::default_instance_ = NULL;

OGAckDoublePlus* OGAckDoublePlus::New() const {
  return new OGAckDoublePlus;
}

void OGAckDoublePlus::Clear() {
  doublepluslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckDoublePlus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoublePlusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doublepluslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DoublePlusList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckDoublePlus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
  for (int i = 0; i < this->doublepluslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doublepluslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckDoublePlus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
  for (int i = 0; i < this->doublepluslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doublepluslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckDoublePlus::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckDoublePlus.DoublePlus DoublePlusList = 1;
  total_size += 1 * this->doublepluslist_size();
  for (int i = 0; i < this->doublepluslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doublepluslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckDoublePlus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckDoublePlus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckDoublePlus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckDoublePlus::MergeFrom(const OGAckDoublePlus& from) {
  GOOGLE_CHECK_NE(&from, this);
  doublepluslist_.MergeFrom(from.doublepluslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckDoublePlus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckDoublePlus::CopyFrom(const OGAckDoublePlus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckDoublePlus::IsInitialized() const {
  
  return true;
}

void OGAckDoublePlus::Swap(OGAckDoublePlus* other) {
  if (other != this) {
    doublepluslist_.Swap(&other->doublepluslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckDoublePlus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckDoublePlus_descriptor_;
  metadata.reflection = OGAckDoublePlus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqGetPlayer::kRolenameFieldNumber;
#endif  // !_MSC_VER

OGReqGetPlayer::OGReqGetPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqGetPlayer::InitAsDefaultInstance() {
}

OGReqGetPlayer::OGReqGetPlayer(const OGReqGetPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqGetPlayer::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqGetPlayer::~OGReqGetPlayer() {
  SharedDtor();
}

void OGReqGetPlayer::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqGetPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqGetPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqGetPlayer_descriptor_;
}

const OGReqGetPlayer& OGReqGetPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqGetPlayer* OGReqGetPlayer::default_instance_ = NULL;

OGReqGetPlayer* OGReqGetPlayer::New() const {
  return new OGReqGetPlayer;
}

void OGReqGetPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqGetPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqGetPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqGetPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqGetPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rolename = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqGetPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqGetPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqGetPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqGetPlayer::MergeFrom(const OGReqGetPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqGetPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqGetPlayer::CopyFrom(const OGReqGetPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqGetPlayer::IsInitialized() const {
  
  return true;
}

void OGReqGetPlayer::Swap(OGReqGetPlayer* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqGetPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqGetPlayer_descriptor_;
  metadata.reflection = OGReqGetPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqChangePutGold::kGoldFieldNumber;
const int OGReqChangePutGold::kFreeFlgFieldNumber;
const int OGReqChangePutGold::kWhiteGldFieldNumber;
#endif  // !_MSC_VER

OGReqChangePutGold::OGReqChangePutGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqChangePutGold::InitAsDefaultInstance() {
}

OGReqChangePutGold::OGReqChangePutGold(const OGReqChangePutGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqChangePutGold::SharedCtor() {
  _cached_size_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  freeflg_ = GOOGLE_LONGLONG(0);
  whitegld_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqChangePutGold::~OGReqChangePutGold() {
  SharedDtor();
}

void OGReqChangePutGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqChangePutGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqChangePutGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqChangePutGold_descriptor_;
}

const OGReqChangePutGold& OGReqChangePutGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqChangePutGold* OGReqChangePutGold::default_instance_ = NULL;

OGReqChangePutGold* OGReqChangePutGold::New() const {
  return new OGReqChangePutGold;
}

void OGReqChangePutGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    freeflg_ = GOOGLE_LONGLONG(0);
    whitegld_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqChangePutGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeFlg;
        break;
      }
      
      // optional int64 freeFlg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeFlg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeflg_)));
          set_has_freeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_whiteGld;
        break;
      }
      
      // optional int64 whiteGld = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whiteGld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &whitegld_)));
          set_has_whitegld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqChangePutGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gold(), output);
  }
  
  // optional int64 freeFlg = 2;
  if (has_freeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->freeflg(), output);
  }
  
  // optional int64 whiteGld = 3;
  if (has_whitegld()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->whitegld(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqChangePutGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gold(), target);
  }
  
  // optional int64 freeFlg = 2;
  if (has_freeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->freeflg(), target);
  }
  
  // optional int64 whiteGld = 3;
  if (has_whitegld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->whitegld(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqChangePutGold::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional int64 freeFlg = 2;
    if (has_freeflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeflg());
    }
    
    // optional int64 whiteGld = 3;
    if (has_whitegld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->whitegld());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqChangePutGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqChangePutGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqChangePutGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqChangePutGold::MergeFrom(const OGReqChangePutGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_freeflg()) {
      set_freeflg(from.freeflg());
    }
    if (from.has_whitegld()) {
      set_whitegld(from.whitegld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqChangePutGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqChangePutGold::CopyFrom(const OGReqChangePutGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqChangePutGold::IsInitialized() const {
  
  return true;
}

void OGReqChangePutGold::Swap(OGReqChangePutGold* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(freeflg_, other->freeflg_);
    std::swap(whitegld_, other->whitegld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqChangePutGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqChangePutGold_descriptor_;
  metadata.reflection = OGReqChangePutGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqPetReturnAward::kActionFieldNumber;
#endif  // !_MSC_VER

OGReqPetReturnAward::OGReqPetReturnAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqPetReturnAward::InitAsDefaultInstance() {
}

OGReqPetReturnAward::OGReqPetReturnAward(const OGReqPetReturnAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqPetReturnAward::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqPetReturnAward::~OGReqPetReturnAward() {
  SharedDtor();
}

void OGReqPetReturnAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqPetReturnAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqPetReturnAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqPetReturnAward_descriptor_;
}

const OGReqPetReturnAward& OGReqPetReturnAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqPetReturnAward* OGReqPetReturnAward::default_instance_ = NULL;

OGReqPetReturnAward* OGReqPetReturnAward::New() const {
  return new OGReqPetReturnAward;
}

void OGReqPetReturnAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqPetReturnAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqPetReturnAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqPetReturnAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqPetReturnAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqPetReturnAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqPetReturnAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqPetReturnAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqPetReturnAward::MergeFrom(const OGReqPetReturnAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqPetReturnAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqPetReturnAward::CopyFrom(const OGReqPetReturnAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqPetReturnAward::IsInitialized() const {
  
  return true;
}

void OGReqPetReturnAward::Swap(OGReqPetReturnAward* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqPetReturnAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqPetReturnAward_descriptor_;
  metadata.reflection = OGReqPetReturnAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckPetReturnAward::kTypeFieldNumber;
const int OGAckPetReturnAward::kGoldFieldNumber;
#endif  // !_MSC_VER

OGAckPetReturnAward::OGAckPetReturnAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckPetReturnAward::InitAsDefaultInstance() {
}

OGAckPetReturnAward::OGAckPetReturnAward(const OGAckPetReturnAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckPetReturnAward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckPetReturnAward::~OGAckPetReturnAward() {
  SharedDtor();
}

void OGAckPetReturnAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckPetReturnAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckPetReturnAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckPetReturnAward_descriptor_;
}

const OGAckPetReturnAward& OGAckPetReturnAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckPetReturnAward* OGAckPetReturnAward::default_instance_ = NULL;

OGAckPetReturnAward* OGAckPetReturnAward::New() const {
  return new OGAckPetReturnAward;
}

void OGAckPetReturnAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckPetReturnAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }
      
      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckPetReturnAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckPetReturnAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckPetReturnAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckPetReturnAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckPetReturnAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckPetReturnAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckPetReturnAward::MergeFrom(const OGAckPetReturnAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckPetReturnAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckPetReturnAward::CopyFrom(const OGAckPetReturnAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckPetReturnAward::IsInitialized() const {
  
  return true;
}

void OGAckPetReturnAward::Swap(OGAckPetReturnAward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckPetReturnAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckPetReturnAward_descriptor_;
  metadata.reflection = OGAckPetReturnAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqGetPutGoldAward::kGoldFieldNumber;
const int OGReqGetPutGoldAward::kRoleNameFieldNumber;
const int OGReqGetPutGoldAward::kPutGoldFieldNumber;
const int OGReqGetPutGoldAward::kActionFieldNumber;
const int OGReqGetPutGoldAward::kComFieldNumber;
const int OGReqGetPutGoldAward::kPutGoldSumFieldNumber;
#endif  // !_MSC_VER

OGReqGetPutGoldAward::OGReqGetPutGoldAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqGetPutGoldAward::InitAsDefaultInstance() {
}

OGReqGetPutGoldAward::OGReqGetPutGoldAward(const OGReqGetPutGoldAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqGetPutGoldAward::SharedCtor() {
  _cached_size_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  putgold_ = GOOGLE_LONGLONG(0);
  action_ = 0;
  com_ = 0;
  putgoldsum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqGetPutGoldAward::~OGReqGetPutGoldAward() {
  SharedDtor();
}

void OGReqGetPutGoldAward::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqGetPutGoldAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqGetPutGoldAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqGetPutGoldAward_descriptor_;
}

const OGReqGetPutGoldAward& OGReqGetPutGoldAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqGetPutGoldAward* OGReqGetPutGoldAward::default_instance_ = NULL;

OGReqGetPutGoldAward* OGReqGetPutGoldAward::New() const {
  return new OGReqGetPutGoldAward;
}

void OGReqGetPutGoldAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    putgold_ = GOOGLE_LONGLONG(0);
    action_ = 0;
    com_ = 0;
    putgoldsum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqGetPutGoldAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_putGold;
        break;
      }
      
      // optional int64 putGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_putGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &putgold_)));
          set_has_putgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }
      
      // optional int32 action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_com;
        break;
      }
      
      // optional int32 com = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_com:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &com_)));
          set_has_com();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_putGoldSum;
        break;
      }
      
      // optional int64 putGoldSum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_putGoldSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &putgoldsum_)));
          set_has_putgoldsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqGetPutGoldAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gold(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // optional int64 putGold = 3;
  if (has_putgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->putgold(), output);
  }
  
  // optional int32 action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }
  
  // optional int32 com = 5;
  if (has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->com(), output);
  }
  
  // optional int64 putGoldSum = 6;
  if (has_putgoldsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->putgoldsum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqGetPutGoldAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gold(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // optional int64 putGold = 3;
  if (has_putgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->putgold(), target);
  }
  
  // optional int32 action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }
  
  // optional int32 com = 5;
  if (has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->com(), target);
  }
  
  // optional int64 putGoldSum = 6;
  if (has_putgoldsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->putgoldsum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqGetPutGoldAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 putGold = 3;
    if (has_putgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->putgold());
    }
    
    // optional int32 action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // optional int32 com = 5;
    if (has_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->com());
    }
    
    // optional int64 putGoldSum = 6;
    if (has_putgoldsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->putgoldsum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqGetPutGoldAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqGetPutGoldAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqGetPutGoldAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqGetPutGoldAward::MergeFrom(const OGReqGetPutGoldAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_putgold()) {
      set_putgold(from.putgold());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_com()) {
      set_com(from.com());
    }
    if (from.has_putgoldsum()) {
      set_putgoldsum(from.putgoldsum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqGetPutGoldAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqGetPutGoldAward::CopyFrom(const OGReqGetPutGoldAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqGetPutGoldAward::IsInitialized() const {
  
  return true;
}

void OGReqGetPutGoldAward::Swap(OGReqGetPutGoldAward* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(rolename_, other->rolename_);
    std::swap(putgold_, other->putgold_);
    std::swap(action_, other->action_);
    std::swap(com_, other->com_);
    std::swap(putgoldsum_, other->putgoldsum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqGetPutGoldAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqGetPutGoldAward_descriptor_;
  metadata.reflection = OGReqGetPutGoldAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckReSetFeed_PlayerFeed::kRoleNameFieldNumber;
const int OGAckReSetFeed_PlayerFeed::kFeedFieldNumber;
#endif  // !_MSC_VER

OGAckReSetFeed_PlayerFeed::OGAckReSetFeed_PlayerFeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckReSetFeed_PlayerFeed::InitAsDefaultInstance() {
}

OGAckReSetFeed_PlayerFeed::OGAckReSetFeed_PlayerFeed(const OGAckReSetFeed_PlayerFeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckReSetFeed_PlayerFeed::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckReSetFeed_PlayerFeed::~OGAckReSetFeed_PlayerFeed() {
  SharedDtor();
}

void OGAckReSetFeed_PlayerFeed::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGAckReSetFeed_PlayerFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckReSetFeed_PlayerFeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckReSetFeed_PlayerFeed_descriptor_;
}

const OGAckReSetFeed_PlayerFeed& OGAckReSetFeed_PlayerFeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckReSetFeed_PlayerFeed* OGAckReSetFeed_PlayerFeed::default_instance_ = NULL;

OGAckReSetFeed_PlayerFeed* OGAckReSetFeed_PlayerFeed::New() const {
  return new OGAckReSetFeed_PlayerFeed;
}

void OGAckReSetFeed_PlayerFeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    feed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckReSetFeed_PlayerFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feed;
        break;
      }
      
      // optional int32 feed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_)));
          set_has_feed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckReSetFeed_PlayerFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional int32 feed = 2;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->feed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckReSetFeed_PlayerFeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional int32 feed = 2;
  if (has_feed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->feed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckReSetFeed_PlayerFeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int32 feed = 2;
    if (has_feed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckReSetFeed_PlayerFeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckReSetFeed_PlayerFeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckReSetFeed_PlayerFeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckReSetFeed_PlayerFeed::MergeFrom(const OGAckReSetFeed_PlayerFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_feed()) {
      set_feed(from.feed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckReSetFeed_PlayerFeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckReSetFeed_PlayerFeed::CopyFrom(const OGAckReSetFeed_PlayerFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckReSetFeed_PlayerFeed::IsInitialized() const {
  
  return true;
}

void OGAckReSetFeed_PlayerFeed::Swap(OGAckReSetFeed_PlayerFeed* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(feed_, other->feed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckReSetFeed_PlayerFeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckReSetFeed_PlayerFeed_descriptor_;
  metadata.reflection = OGAckReSetFeed_PlayerFeed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckReSetFeed::kPlayerFeedListFieldNumber;
#endif  // !_MSC_VER

OGAckReSetFeed::OGAckReSetFeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckReSetFeed::InitAsDefaultInstance() {
}

OGAckReSetFeed::OGAckReSetFeed(const OGAckReSetFeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckReSetFeed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckReSetFeed::~OGAckReSetFeed() {
  SharedDtor();
}

void OGAckReSetFeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckReSetFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckReSetFeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckReSetFeed_descriptor_;
}

const OGAckReSetFeed& OGAckReSetFeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckReSetFeed* OGAckReSetFeed::default_instance_ = NULL;

OGAckReSetFeed* OGAckReSetFeed::New() const {
  return new OGAckReSetFeed;
}

void OGAckReSetFeed::Clear() {
  playerfeedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckReSetFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerFeedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerfeedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerFeedList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckReSetFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
  for (int i = 0; i < this->playerfeedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerfeedlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckReSetFeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
  for (int i = 0; i < this->playerfeedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerfeedlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckReSetFeed::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckReSetFeed.PlayerFeed playerFeedList = 1;
  total_size += 1 * this->playerfeedlist_size();
  for (int i = 0; i < this->playerfeedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerfeedlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckReSetFeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckReSetFeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckReSetFeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckReSetFeed::MergeFrom(const OGAckReSetFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerfeedlist_.MergeFrom(from.playerfeedlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckReSetFeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckReSetFeed::CopyFrom(const OGAckReSetFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckReSetFeed::IsInitialized() const {
  
  return true;
}

void OGAckReSetFeed::Swap(OGAckReSetFeed* other) {
  if (other != this) {
    playerfeedlist_.Swap(&other->playerfeedlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckReSetFeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckReSetFeed_descriptor_;
  metadata.reflection = OGAckReSetFeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqJpStart::kRoleNameFieldNumber;
#endif  // !_MSC_VER

OGReqJpStart::OGReqJpStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqJpStart::InitAsDefaultInstance() {
}

OGReqJpStart::OGReqJpStart(const OGReqJpStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqJpStart::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqJpStart::~OGReqJpStart() {
  SharedDtor();
}

void OGReqJpStart::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void OGReqJpStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqJpStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqJpStart_descriptor_;
}

const OGReqJpStart& OGReqJpStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqJpStart* OGReqJpStart::default_instance_ = NULL;

OGReqJpStart* OGReqJpStart::New() const {
  return new OGReqJpStart;
}

void OGReqJpStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqJpStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqJpStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqJpStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqJpStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqJpStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqJpStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqJpStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqJpStart::MergeFrom(const OGReqJpStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqJpStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqJpStart::CopyFrom(const OGReqJpStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqJpStart::IsInitialized() const {
  
  return true;
}

void OGReqJpStart::Swap(OGReqJpStart* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqJpStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqJpStart_descriptor_;
  metadata.reflection = OGReqJpStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckJpStart::kRoleNameFieldNumber;
const int OGAckJpStart::kJpStarNameFieldNumber;
const int OGAckJpStart::kJpStarTemNumFieldNumber;
const int OGAckJpStart::kJpStarTimeFieldNumber;
#endif  // !_MSC_VER

OGAckJpStart::OGAckJpStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJpStart::InitAsDefaultInstance() {
}

OGAckJpStart::OGAckJpStart(const OGAckJpStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJpStart::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jpstarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jpstartemnum_ = GOOGLE_LONGLONG(0);
  jpstartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJpStart::~OGAckJpStart() {
  SharedDtor();
}

void OGAckJpStart::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
    delete jpstarname_;
  }
  if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
    delete jpstartime_;
  }
  if (this != default_instance_) {
  }
}

void OGAckJpStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJpStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJpStart_descriptor_;
}

const OGAckJpStart& OGAckJpStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJpStart* OGAckJpStart::default_instance_ = NULL;

OGAckJpStart* OGAckJpStart::New() const {
  return new OGAckJpStart;
}

void OGAckJpStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_jpstarname()) {
      if (jpstarname_ != &::google::protobuf::internal::kEmptyString) {
        jpstarname_->clear();
      }
    }
    jpstartemnum_ = GOOGLE_LONGLONG(0);
    if (has_jpstartime()) {
      if (jpstartime_ != &::google::protobuf::internal::kEmptyString) {
        jpstartime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJpStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_jpStarName;
        break;
      }
      
      // optional string jpStarName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpStarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpstarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpstarname().data(), this->jpstarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jpStarTemNum;
        break;
      }
      
      // optional int64 jpStarTemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpStarTemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jpstartemnum_)));
          set_has_jpstartemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jpStarTime;
        break;
      }
      
      // optional string jpStarTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jpStarTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jpstartime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jpstartime().data(), this->jpstartime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJpStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional string jpStarName = 2;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->jpstarname(), output);
  }
  
  // optional int64 jpStarTemNum = 3;
  if (has_jpstartemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jpstartemnum(), output);
  }
  
  // optional string jpStarTime = 4;
  if (has_jpstartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstartime().data(), this->jpstartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jpstartime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJpStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional string jpStarName = 2;
  if (has_jpstarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstarname().data(), this->jpstarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->jpstarname(), target);
  }
  
  // optional int64 jpStarTemNum = 3;
  if (has_jpstartemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jpstartemnum(), target);
  }
  
  // optional string jpStarTime = 4;
  if (has_jpstartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jpstartime().data(), this->jpstartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jpstartime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJpStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string jpStarName = 2;
    if (has_jpstarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpstarname());
    }
    
    // optional int64 jpStarTemNum = 3;
    if (has_jpstartemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jpstartemnum());
    }
    
    // optional string jpStarTime = 4;
    if (has_jpstartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jpstartime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJpStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJpStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJpStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJpStart::MergeFrom(const OGAckJpStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_jpstarname()) {
      set_jpstarname(from.jpstarname());
    }
    if (from.has_jpstartemnum()) {
      set_jpstartemnum(from.jpstartemnum());
    }
    if (from.has_jpstartime()) {
      set_jpstartime(from.jpstartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJpStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJpStart::CopyFrom(const OGAckJpStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJpStart::IsInitialized() const {
  
  return true;
}

void OGAckJpStart::Swap(OGAckJpStart* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(jpstarname_, other->jpstarname_);
    std::swap(jpstartemnum_, other->jpstartemnum_);
    std::swap(jpstartime_, other->jpstartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJpStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJpStart_descriptor_;
  metadata.reflection = OGAckJpStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGReqBindPhone::OGReqBindPhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqBindPhone::InitAsDefaultInstance() {
}

OGReqBindPhone::OGReqBindPhone(const OGReqBindPhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqBindPhone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqBindPhone::~OGReqBindPhone() {
  SharedDtor();
}

void OGReqBindPhone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqBindPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqBindPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqBindPhone_descriptor_;
}

const OGReqBindPhone& OGReqBindPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqBindPhone* OGReqBindPhone::default_instance_ = NULL;

OGReqBindPhone* OGReqBindPhone::New() const {
  return new OGReqBindPhone;
}

void OGReqBindPhone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqBindPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGReqBindPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqBindPhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqBindPhone::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqBindPhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqBindPhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqBindPhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqBindPhone::MergeFrom(const OGReqBindPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqBindPhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqBindPhone::CopyFrom(const OGReqBindPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqBindPhone::IsInitialized() const {
  
  return true;
}

void OGReqBindPhone::Swap(OGReqBindPhone* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqBindPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqBindPhone_descriptor_;
  metadata.reflection = OGReqBindPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckBindPhone::kResultFieldNumber;
const int OGAckBindPhone::kPhoneFieldNumber;
#endif  // !_MSC_VER

OGAckBindPhone::OGAckBindPhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckBindPhone::InitAsDefaultInstance() {
}

OGAckBindPhone::OGAckBindPhone(const OGAckBindPhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckBindPhone::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckBindPhone::~OGAckBindPhone() {
  SharedDtor();
}

void OGAckBindPhone::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void OGAckBindPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckBindPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckBindPhone_descriptor_;
}

const OGAckBindPhone& OGAckBindPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckBindPhone* OGAckBindPhone::default_instance_ = NULL;

OGAckBindPhone* OGAckBindPhone::New() const {
  return new OGAckBindPhone;
}

void OGAckBindPhone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckBindPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }
      
      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckBindPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckBindPhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckBindPhone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckBindPhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckBindPhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckBindPhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckBindPhone::MergeFrom(const OGAckBindPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckBindPhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckBindPhone::CopyFrom(const OGAckBindPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckBindPhone::IsInitialized() const {
  
  return true;
}

void OGAckBindPhone::Swap(OGAckBindPhone* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckBindPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckBindPhone_descriptor_;
  metadata.reflection = OGAckBindPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqGetPhoneCode::kPhoneFieldNumber;
#endif  // !_MSC_VER

OGReqGetPhoneCode::OGReqGetPhoneCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqGetPhoneCode::InitAsDefaultInstance() {
}

OGReqGetPhoneCode::OGReqGetPhoneCode(const OGReqGetPhoneCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqGetPhoneCode::SharedCtor() {
  _cached_size_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqGetPhoneCode::~OGReqGetPhoneCode() {
  SharedDtor();
}

void OGReqGetPhoneCode::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void OGReqGetPhoneCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqGetPhoneCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqGetPhoneCode_descriptor_;
}

const OGReqGetPhoneCode& OGReqGetPhoneCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqGetPhoneCode* OGReqGetPhoneCode::default_instance_ = NULL;

OGReqGetPhoneCode* OGReqGetPhoneCode::New() const {
  return new OGReqGetPhoneCode;
}

void OGReqGetPhoneCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqGetPhoneCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqGetPhoneCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqGetPhoneCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqGetPhoneCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string phone = 1;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqGetPhoneCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqGetPhoneCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqGetPhoneCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqGetPhoneCode::MergeFrom(const OGReqGetPhoneCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqGetPhoneCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqGetPhoneCode::CopyFrom(const OGReqGetPhoneCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqGetPhoneCode::IsInitialized() const {
  
  return true;
}

void OGReqGetPhoneCode::Swap(OGReqGetPhoneCode* other) {
  if (other != this) {
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqGetPhoneCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqGetPhoneCode_descriptor_;
  metadata.reflection = OGReqGetPhoneCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckGetPhoneCode::kMsgFieldNumber;
#endif  // !_MSC_VER

OGAckGetPhoneCode::OGAckGetPhoneCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckGetPhoneCode::InitAsDefaultInstance() {
}

OGAckGetPhoneCode::OGAckGetPhoneCode(const OGAckGetPhoneCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckGetPhoneCode::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckGetPhoneCode::~OGAckGetPhoneCode() {
  SharedDtor();
}

void OGAckGetPhoneCode::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void OGAckGetPhoneCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckGetPhoneCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckGetPhoneCode_descriptor_;
}

const OGAckGetPhoneCode& OGAckGetPhoneCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckGetPhoneCode* OGAckGetPhoneCode::default_instance_ = NULL;

OGAckGetPhoneCode* OGAckGetPhoneCode::New() const {
  return new OGAckGetPhoneCode;
}

void OGAckGetPhoneCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckGetPhoneCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckGetPhoneCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckGetPhoneCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckGetPhoneCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckGetPhoneCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckGetPhoneCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckGetPhoneCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckGetPhoneCode::MergeFrom(const OGAckGetPhoneCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckGetPhoneCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckGetPhoneCode::CopyFrom(const OGAckGetPhoneCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckGetPhoneCode::IsInitialized() const {
  
  return true;
}

void OGAckGetPhoneCode::Swap(OGAckGetPhoneCode* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckGetPhoneCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckGetPhoneCode_descriptor_;
  metadata.reflection = OGAckGetPhoneCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGReqGetPhoneAward::kCodeFieldNumber;
#endif  // !_MSC_VER

OGReqGetPhoneAward::OGReqGetPhoneAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGReqGetPhoneAward::InitAsDefaultInstance() {
}

OGReqGetPhoneAward::OGReqGetPhoneAward(const OGReqGetPhoneAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGReqGetPhoneAward::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGReqGetPhoneAward::~OGReqGetPhoneAward() {
  SharedDtor();
}

void OGReqGetPhoneAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGReqGetPhoneAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGReqGetPhoneAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGReqGetPhoneAward_descriptor_;
}

const OGReqGetPhoneAward& OGReqGetPhoneAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGReqGetPhoneAward* OGReqGetPhoneAward::default_instance_ = NULL;

OGReqGetPhoneAward* OGReqGetPhoneAward::New() const {
  return new OGReqGetPhoneAward;
}

void OGReqGetPhoneAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGReqGetPhoneAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGReqGetPhoneAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGReqGetPhoneAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGReqGetPhoneAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGReqGetPhoneAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGReqGetPhoneAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGReqGetPhoneAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGReqGetPhoneAward::MergeFrom(const OGReqGetPhoneAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGReqGetPhoneAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGReqGetPhoneAward::CopyFrom(const OGReqGetPhoneAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGReqGetPhoneAward::IsInitialized() const {
  
  return true;
}

void OGReqGetPhoneAward::Swap(OGReqGetPhoneAward* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGReqGetPhoneAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGReqGetPhoneAward_descriptor_;
  metadata.reflection = OGReqGetPhoneAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckGetPhoneAward::kMsgFieldNumber;
const int OGAckGetPhoneAward::kResultFieldNumber;
const int OGAckGetPhoneAward::kPhoneFieldNumber;
#endif  // !_MSC_VER

OGAckGetPhoneAward::OGAckGetPhoneAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckGetPhoneAward::InitAsDefaultInstance() {
}

OGAckGetPhoneAward::OGAckGetPhoneAward(const OGAckGetPhoneAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckGetPhoneAward::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckGetPhoneAward::~OGAckGetPhoneAward() {
  SharedDtor();
}

void OGAckGetPhoneAward::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void OGAckGetPhoneAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckGetPhoneAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckGetPhoneAward_descriptor_;
}

const OGAckGetPhoneAward& OGAckGetPhoneAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckGetPhoneAward* OGAckGetPhoneAward::default_instance_ = NULL;

OGAckGetPhoneAward* OGAckGetPhoneAward::New() const {
  return new OGAckGetPhoneAward;
}

void OGAckGetPhoneAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    result_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckGetPhoneAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }
      
      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckGetPhoneAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckGetPhoneAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckGetPhoneAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckGetPhoneAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckGetPhoneAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckGetPhoneAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckGetPhoneAward::MergeFrom(const OGAckGetPhoneAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckGetPhoneAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckGetPhoneAward::CopyFrom(const OGAckGetPhoneAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckGetPhoneAward::IsInitialized() const {
  
  return true;
}

void OGAckGetPhoneAward::Swap(OGAckGetPhoneAward* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(result_, other->result_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckGetPhoneAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckGetPhoneAward_descriptor_;
  metadata.reflection = OGAckGetPhoneAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckAddJpNum::kAddJpNumFieldNumber;
const int OGAckAddJpNum::kFlgFieldNumber;
#endif  // !_MSC_VER

OGAckAddJpNum::OGAckAddJpNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckAddJpNum::InitAsDefaultInstance() {
}

OGAckAddJpNum::OGAckAddJpNum(const OGAckAddJpNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckAddJpNum::SharedCtor() {
  _cached_size_ = 0;
  addjpnum_ = GOOGLE_LONGLONG(0);
  flg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckAddJpNum::~OGAckAddJpNum() {
  SharedDtor();
}

void OGAckAddJpNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckAddJpNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckAddJpNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckAddJpNum_descriptor_;
}

const OGAckAddJpNum& OGAckAddJpNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckAddJpNum* OGAckAddJpNum::default_instance_ = NULL;

OGAckAddJpNum* OGAckAddJpNum::New() const {
  return new OGAckAddJpNum;
}

void OGAckAddJpNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addjpnum_ = GOOGLE_LONGLONG(0);
    flg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckAddJpNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 addJpNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addjpnum_)));
          set_has_addjpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flg;
        break;
      }
      
      // optional int32 flg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckAddJpNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 addJpNum = 1;
  if (has_addjpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->addjpnum(), output);
  }
  
  // optional int32 flg = 2;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckAddJpNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 addJpNum = 1;
  if (has_addjpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->addjpnum(), target);
  }
  
  // optional int32 flg = 2;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckAddJpNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 addJpNum = 1;
    if (has_addjpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addjpnum());
    }
    
    // optional int32 flg = 2;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckAddJpNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckAddJpNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckAddJpNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckAddJpNum::MergeFrom(const OGAckAddJpNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addjpnum()) {
      set_addjpnum(from.addjpnum());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckAddJpNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckAddJpNum::CopyFrom(const OGAckAddJpNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckAddJpNum::IsInitialized() const {
  
  return true;
}

void OGAckAddJpNum::Swap(OGAckAddJpNum* other) {
  if (other != this) {
    std::swap(addjpnum_, other->addjpnum_);
    std::swap(flg_, other->flg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckAddJpNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckAddJpNum_descriptor_;
  metadata.reflection = OGAckAddJpNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckJpHall_HallContent::kNameFieldNumber;
const int OGAckJpHall_HallContent::kGolodFieldNumber;
const int OGAckJpHall_HallContent::kTimeFieldNumber;
#endif  // !_MSC_VER

OGAckJpHall_HallContent::OGAckJpHall_HallContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJpHall_HallContent::InitAsDefaultInstance() {
}

OGAckJpHall_HallContent::OGAckJpHall_HallContent(const OGAckJpHall_HallContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJpHall_HallContent::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golod_ = GOOGLE_LONGLONG(0);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJpHall_HallContent::~OGAckJpHall_HallContent() {
  SharedDtor();
}

void OGAckJpHall_HallContent::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void OGAckJpHall_HallContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJpHall_HallContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJpHall_HallContent_descriptor_;
}

const OGAckJpHall_HallContent& OGAckJpHall_HallContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJpHall_HallContent* OGAckJpHall_HallContent::default_instance_ = NULL;

OGAckJpHall_HallContent* OGAckJpHall_HallContent::New() const {
  return new OGAckJpHall_HallContent;
}

void OGAckJpHall_HallContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    golod_ = GOOGLE_LONGLONG(0);
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJpHall_HallContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_golod;
        break;
      }
      
      // optional int64 golod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &golod_)));
          set_has_golod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }
      
      // optional string time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJpHall_HallContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int64 golod = 2;
  if (has_golod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->golod(), output);
  }
  
  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJpHall_HallContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int64 golod = 2;
  if (has_golod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->golod(), target);
  }
  
  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJpHall_HallContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 golod = 2;
    if (has_golod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->golod());
    }
    
    // optional string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJpHall_HallContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJpHall_HallContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJpHall_HallContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJpHall_HallContent::MergeFrom(const OGAckJpHall_HallContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_golod()) {
      set_golod(from.golod());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJpHall_HallContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJpHall_HallContent::CopyFrom(const OGAckJpHall_HallContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJpHall_HallContent::IsInitialized() const {
  
  return true;
}

void OGAckJpHall_HallContent::Swap(OGAckJpHall_HallContent* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(golod_, other->golod_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJpHall_HallContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJpHall_HallContent_descriptor_;
  metadata.reflection = OGAckJpHall_HallContent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OGAckJpHall::kContentListFieldNumber;
#endif  // !_MSC_VER

OGAckJpHall::OGAckJpHall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckJpHall::InitAsDefaultInstance() {
}

OGAckJpHall::OGAckJpHall(const OGAckJpHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckJpHall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckJpHall::~OGAckJpHall() {
  SharedDtor();
}

void OGAckJpHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckJpHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckJpHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckJpHall_descriptor_;
}

const OGAckJpHall& OGAckJpHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckJpHall* OGAckJpHall::default_instance_ = NULL;

OGAckJpHall* OGAckJpHall::New() const {
  return new OGAckJpHall;
}

void OGAckJpHall::Clear() {
  contentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckJpHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ContentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckJpHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
  for (int i = 0; i < this->contentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contentlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckJpHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
  for (int i = 0; i < this->contentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contentlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckJpHall::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.texasSlots.OGAckJpHall.HallContent ContentList = 1;
  total_size += 1 * this->contentlist_size();
  for (int i = 0; i < this->contentlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contentlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckJpHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckJpHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckJpHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckJpHall::MergeFrom(const OGAckJpHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  contentlist_.MergeFrom(from.contentlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckJpHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckJpHall::CopyFrom(const OGAckJpHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckJpHall::IsInitialized() const {
  
  return true;
}

void OGAckJpHall::Swap(OGAckJpHall* other) {
  if (other != this) {
    contentlist_.Swap(&other->contentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckJpHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckJpHall_descriptor_;
  metadata.reflection = OGAckJpHall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckAd::kOnFieldNumber;
const int OGAckAd::kContentFieldNumber;
#endif  // !_MSC_VER

OGAckAd::OGAckAd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckAd::InitAsDefaultInstance() {
}

OGAckAd::OGAckAd(const OGAckAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckAd::SharedCtor() {
  _cached_size_ = 0;
  on_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckAd::~OGAckAd() {
  SharedDtor();
}

void OGAckAd::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void OGAckAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckAd_descriptor_;
}

const OGAckAd& OGAckAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckAd* OGAckAd::default_instance_ = NULL;

OGAckAd* OGAckAd::New() const {
  return new OGAckAd;
}

void OGAckAd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_)));
          set_has_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 on = 1;
  if (has_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->on(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 on = 1;
  if (has_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->on(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckAd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 on = 1;
    if (has_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->on());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckAd::MergeFrom(const OGAckAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on()) {
      set_on(from.on());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckAd::CopyFrom(const OGAckAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckAd::IsInitialized() const {
  
  return true;
}

void OGAckAd::Swap(OGAckAd* other) {
  if (other != this) {
    std::swap(on_, other->on_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckAd_descriptor_;
  metadata.reflection = OGAckAd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OGAckLeaveGame::OGAckLeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckLeaveGame::InitAsDefaultInstance() {
}

OGAckLeaveGame::OGAckLeaveGame(const OGAckLeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckLeaveGame::~OGAckLeaveGame() {
  SharedDtor();
}

void OGAckLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckLeaveGame_descriptor_;
}

const OGAckLeaveGame& OGAckLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckLeaveGame* OGAckLeaveGame::default_instance_ = NULL;

OGAckLeaveGame* OGAckLeaveGame::New() const {
  return new OGAckLeaveGame;
}

void OGAckLeaveGame::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OGAckLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckLeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckLeaveGame::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckLeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckLeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckLeaveGame::MergeFrom(const OGAckLeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckLeaveGame::CopyFrom(const OGAckLeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckLeaveGame::IsInitialized() const {
  
  return true;
}

void OGAckLeaveGame::Swap(OGAckLeaveGame* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckLeaveGame_descriptor_;
  metadata.reflection = OGAckLeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OGAckYDFreeTimes::kNumFieldNumber;
#endif  // !_MSC_VER

OGAckYDFreeTimes::OGAckYDFreeTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OGAckYDFreeTimes::InitAsDefaultInstance() {
}

OGAckYDFreeTimes::OGAckYDFreeTimes(const OGAckYDFreeTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OGAckYDFreeTimes::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OGAckYDFreeTimes::~OGAckYDFreeTimes() {
  SharedDtor();
}

void OGAckYDFreeTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OGAckYDFreeTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OGAckYDFreeTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OGAckYDFreeTimes_descriptor_;
}

const OGAckYDFreeTimes& OGAckYDFreeTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OGTexasSlotsProtocol_2eproto();  return *default_instance_;
}

OGAckYDFreeTimes* OGAckYDFreeTimes::default_instance_ = NULL;

OGAckYDFreeTimes* OGAckYDFreeTimes::New() const {
  return new OGAckYDFreeTimes;
}

void OGAckYDFreeTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OGAckYDFreeTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OGAckYDFreeTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OGAckYDFreeTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OGAckYDFreeTimes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OGAckYDFreeTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OGAckYDFreeTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OGAckYDFreeTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OGAckYDFreeTimes::MergeFrom(const OGAckYDFreeTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OGAckYDFreeTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OGAckYDFreeTimes::CopyFrom(const OGAckYDFreeTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OGAckYDFreeTimes::IsInitialized() const {
  
  return true;
}

void OGAckYDFreeTimes::Swap(OGAckYDFreeTimes* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OGAckYDFreeTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OGAckYDFreeTimes_descriptor_;
  metadata.reflection = OGAckYDFreeTimes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace texasSlots
}  // namespace ourgame
}  // namespace com

// @@protoc_insertion_point(global_scope)
